/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type SwapPointStruct = {
  amountIn: PromiseOrValue<BigNumberish>;
  valueIn: PromiseOrValue<BigNumberish>;
  amountOut: PromiseOrValue<BigNumberish>;
  valueOut: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
  tokenIn: PromiseOrValue<string>;
  swappers: PromiseOrValue<string>[];
  tokenOut: PromiseOrValue<string>;
  paths: PromiseOrValue<string>[][];
};

export type SwapPointStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string[],
  string,
  string[][]
] & {
  amountIn: BigNumber;
  valueIn: BigNumber;
  amountOut: BigNumber;
  valueOut: BigNumber;
  slippage: BigNumber;
  tokenIn: string;
  swappers: string[];
  tokenOut: string;
  paths: string[][];
};

export interface ISwapperInterface extends utils.Interface {
  functions: {
    "checkSwappable(address)": FunctionFragment;
    "getAmountOut(uint256,address[])": FunctionFragment;
    "getAmountsOutWithPath(uint256,address[],uint256[][][],(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[])": FunctionFragment;
    "getCommonPoolTokens()": FunctionFragment;
    "swap(uint256,address[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkSwappable"
      | "getAmountOut"
      | "getAmountsOutWithPath"
      | "getCommonPoolTokens"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkSwappable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOutWithPath",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[][][],
      SwapPointStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommonPoolTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkSwappable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOutWithPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommonPoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "Burn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
}

export interface BurnEventObject {
  holderAddress: string;
  amount: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface ISwapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISwapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkSwappable(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAmountOut(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountsOutWithPath(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      amountsForSwaps: PromiseOrValue<BigNumberish>[][][],
      priorSwaps: SwapPointStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCommonPoolTokens(overrides?: CallOverrides): Promise<[string[]]>;

    swap(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      self: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkSwappable(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAmountOut(
    amount: PromiseOrValue<BigNumberish>,
    path: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsOutWithPath(
    amount: PromiseOrValue<BigNumberish>,
    path: PromiseOrValue<string>[],
    amountsForSwaps: PromiseOrValue<BigNumberish>[][][],
    priorSwaps: SwapPointStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCommonPoolTokens(overrides?: CallOverrides): Promise<string[]>;

  swap(
    amount: PromiseOrValue<BigNumberish>,
    path: PromiseOrValue<string>[],
    self: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkSwappable(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAmountOut(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOutWithPath(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      amountsForSwaps: PromiseOrValue<BigNumberish>[][][],
      priorSwaps: SwapPointStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCommonPoolTokens(overrides?: CallOverrides): Promise<string[]>;

    swap(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      self: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Burn(address,uint256)"(
      holderAddress?: null,
      amount?: null
    ): BurnEventFilter;
    Burn(holderAddress?: null, amount?: null): BurnEventFilter;
  };

  estimateGas: {
    checkSwappable(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOutWithPath(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      amountsForSwaps: PromiseOrValue<BigNumberish>[][][],
      priorSwaps: SwapPointStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommonPoolTokens(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      self: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkSwappable(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOutWithPath(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      amountsForSwaps: PromiseOrValue<BigNumberish>[][][],
      priorSwaps: SwapPointStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommonPoolTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      amount: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      self: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
