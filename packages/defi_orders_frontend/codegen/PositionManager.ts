/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type LiquidationConditionStruct = {
  watchedToken: PromiseOrValue<string>;
  liquidateTo: PromiseOrValue<string>;
  lessThan: PromiseOrValue<boolean>;
  liquidationPoint: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
};

export type LiquidationConditionStructOutput = [
  string,
  string,
  boolean,
  BigNumber,
  BigNumber
] & {
  watchedToken: string;
  liquidateTo: string;
  lessThan: boolean;
  liquidationPoint: BigNumber;
  slippage: BigNumber;
};

export type SwapPointStruct = {
  amountIn: PromiseOrValue<BigNumberish>;
  valueIn: PromiseOrValue<BigNumberish>;
  amountOut: PromiseOrValue<BigNumberish>;
  valueOut: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
  tokenIn: PromiseOrValue<string>;
  swappers: PromiseOrValue<string>[];
  tokenOut: PromiseOrValue<string>;
  paths: PromiseOrValue<string>[][];
};

export type SwapPointStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string[],
  string,
  string[][]
] & {
  amountIn: BigNumber;
  valueIn: BigNumber;
  amountOut: BigNumber;
  valueOut: BigNumber;
  slippage: BigNumber;
  tokenIn: string;
  swappers: string[];
  tokenOut: string;
  paths: string[][];
};

export type AssetStruct = {
  pool: PromiseOrValue<string>;
  manager: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
};

export type AssetStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  pool: string;
  manager: string;
  tokenId: BigNumber;
  liquidity: BigNumber;
  data: string;
};

export type ConversionStruct = {
  desiredERC721: AssetStruct;
  desiredERC20: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  underlying: PromiseOrValue<string>[];
  underlyingValues: PromiseOrValue<BigNumberish>[];
};

export type ConversionStructOutput = [
  AssetStructOutput,
  string,
  BigNumber,
  string[],
  BigNumber[]
] & {
  desiredERC721: AssetStructOutput;
  desiredERC20: string;
  value: BigNumber;
  underlying: string[];
  underlyingValues: BigNumber[];
};

export type PositionStruct = {
  user: PromiseOrValue<string>;
  bank: PromiseOrValue<string>;
  bankToken: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  liquidationPoints: LiquidationConditionStruct[];
};

export type PositionStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  LiquidationConditionStructOutput[]
] & {
  user: string;
  bank: string;
  bankToken: BigNumber;
  amount: BigNumber;
  liquidationPoints: LiquidationConditionStructOutput[];
};

export type ProvidedStruct = {
  tokens: PromiseOrValue<string>[];
  amounts: PromiseOrValue<BigNumberish>[];
  nfts: AssetStruct[];
};

export type ProvidedStructOutput = [
  string[],
  BigNumber[],
  AssetStructOutput[]
] & { tokens: string[]; amounts: BigNumber[]; nfts: AssetStructOutput[] };

export interface PositionManagerInterface extends utils.Interface {
  functions: {
    "adjustLiquidationPoints(uint256,(address,address,bool,uint256,uint256)[])": FunctionFragment;
    "banks(uint256)": FunctionFragment;
    "botLiquidate(uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[])": FunctionFragment;
    "close(uint256,string)": FunctionFragment;
    "currentOwner()": FunctionFragment;
    "deposit((address,address,uint256,uint256,(address,address,bool,uint256,uint256)[]),address[],uint256[])": FunctionFragment;
    "depositInExisting(uint256,(address[],uint256[],(address,address,uint256,uint256,bytes)[]),(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[],uint256[])": FunctionFragment;
    "getBanks()": FunctionFragment;
    "getPosition(uint256)": FunctionFragment;
    "getPositions(address)": FunctionFragment;
    "harvestAndRecompound(uint256,(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[],uint256[])": FunctionFragment;
    "harvestRewards(uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "keepers(address)": FunctionFragment;
    "liquidationFailure(uint256)": FunctionFragment;
    "minDepositAmount()": FunctionFragment;
    "networkToken()": FunctionFragment;
    "numPositions()": FunctionFragment;
    "positionClosed(uint256)": FunctionFragment;
    "positions(uint256)": FunctionFragment;
    "recommendBank(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBanks(address[])": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setLiquidationFailure(uint256,string)": FunctionFragment;
    "setMinDepositAmount(uint256)": FunctionFragment;
    "stableToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "universalSwap()": FunctionFragment;
    "userPositions(address,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustLiquidationPoints"
      | "banks"
      | "botLiquidate"
      | "close"
      | "currentOwner"
      | "deposit"
      | "depositInExisting"
      | "getBanks"
      | "getPosition"
      | "getPositions"
      | "harvestAndRecompound"
      | "harvestRewards"
      | "initialize"
      | "keepers"
      | "liquidationFailure"
      | "minDepositAmount"
      | "networkToken"
      | "numPositions"
      | "positionClosed"
      | "positions"
      | "recommendBank"
      | "renounceOwnership"
      | "setBanks"
      | "setKeeper"
      | "setLiquidationFailure"
      | "setMinDepositAmount"
      | "stableToken"
      | "transferOwnership"
      | "universalSwap"
      | "userPositions"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustLiquidationPoints",
    values: [PromiseOrValue<BigNumberish>, LiquidationConditionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "banks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "botLiquidate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      SwapPointStruct[],
      ConversionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PositionStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInExisting",
    values: [
      PromiseOrValue<BigNumberish>,
      ProvidedStruct,
      SwapPointStruct[],
      ConversionStruct[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "getBanks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestAndRecompound",
    values: [
      PromiseOrValue<BigNumberish>,
      SwapPointStruct[],
      ConversionStruct[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "keepers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFailure",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionClosed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recommendBank",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBanks",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationFailure",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDepositAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "universalSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userPositions",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustLiquidationPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "banks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "botLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInExisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBanks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestAndRecompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keepers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFailure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recommendBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBanks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationFailure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universalSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BotLiquidate(uint256,uint256,uint256,uint256)": EventFragment;
    "Deposit(uint256,uint256,uint256)": EventFragment;
    "Harvest(uint256,uint256,uint256)": EventFragment;
    "HarvestRecompound(uint256,uint256,uint256)": EventFragment;
    "IncreasePosition(uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PositionClose(uint256,uint256,uint256)": EventFragment;
    "Refund(uint256,uint256,uint256,string)": EventFragment;
    "Withdraw(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BotLiquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestRecompound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionClose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface BotLiquidateEventObject {
  positionId: BigNumber;
  amount: BigNumber;
  usdValue: BigNumber;
  liquidationIndex: BigNumber;
}
export type BotLiquidateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  BotLiquidateEventObject
>;

export type BotLiquidateEventFilter = TypedEventFilter<BotLiquidateEvent>;

export interface DepositEventObject {
  positionId: BigNumber;
  amount: BigNumber;
  usdValue: BigNumber;
}
export type DepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface HarvestEventObject {
  positionId: BigNumber;
  amount: BigNumber;
  usdValue: BigNumber;
}
export type HarvestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  HarvestEventObject
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface HarvestRecompoundEventObject {
  positionId: BigNumber;
  amount: BigNumber;
  usdValue: BigNumber;
}
export type HarvestRecompoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  HarvestRecompoundEventObject
>;

export type HarvestRecompoundEventFilter =
  TypedEventFilter<HarvestRecompoundEvent>;

export interface IncreasePositionEventObject {
  positionId: BigNumber;
  amount: BigNumber;
  usdValue: BigNumber;
}
export type IncreasePositionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  IncreasePositionEventObject
>;

export type IncreasePositionEventFilter =
  TypedEventFilter<IncreasePositionEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PositionCloseEventObject {
  positionId: BigNumber;
  amount: BigNumber;
  usdValue: BigNumber;
}
export type PositionCloseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PositionCloseEventObject
>;

export type PositionCloseEventFilter = TypedEventFilter<PositionCloseEvent>;

export interface RefundEventObject {
  positionId: BigNumber;
  amount: BigNumber;
  usdValue: BigNumber;
  reason: string;
}
export type RefundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  RefundEventObject
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface WithdrawEventObject {
  positionId: BigNumber;
  amount: BigNumber;
  usdValue: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PositionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustLiquidationPoints(
      positionId: PromiseOrValue<BigNumberish>,
      _liquidationPoints: LiquidationConditionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    banks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    botLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      liquidationIndex: PromiseOrValue<BigNumberish>,
      liquidationFee: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    close(
      positionId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentOwner(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      position: PositionStruct,
      suppliedTokens: PromiseOrValue<string>[],
      suppliedAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositInExisting(
      positionId: PromiseOrValue<BigNumberish>,
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBanks(overrides?: CallOverrides): Promise<[string[]]>;

    getPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput] & { position: PositionStructOutput }>;

    getPositions(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    harvestAndRecompound(
      positionId: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _universalSwap: PromiseOrValue<string>,
      _stableToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    keepers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidationFailure(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkToken(overrides?: CallOverrides): Promise<[string]>;

    numPositions(overrides?: CallOverrides): Promise<[BigNumber]>;

    positionClosed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        user: string;
        bank: string;
        bankToken: BigNumber;
        amount: BigNumber;
      }
    >;

    recommendBank(
      lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBanks(
      _banks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      keeperAddress: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationFailure(
      positionId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinDepositAmount(
      _minDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stableToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    universalSwap(overrides?: CallOverrides): Promise<[string]>;

    userPositions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjustLiquidationPoints(
    positionId: PromiseOrValue<BigNumberish>,
    _liquidationPoints: LiquidationConditionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  banks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  botLiquidate(
    positionId: PromiseOrValue<BigNumberish>,
    liquidationIndex: PromiseOrValue<BigNumberish>,
    liquidationFee: PromiseOrValue<BigNumberish>,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  close(
    positionId: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentOwner(overrides?: CallOverrides): Promise<string>;

  deposit(
    position: PositionStruct,
    suppliedTokens: PromiseOrValue<string>[],
    suppliedAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositInExisting(
    positionId: PromiseOrValue<BigNumberish>,
    provided: ProvidedStruct,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    minAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBanks(overrides?: CallOverrides): Promise<string[]>;

  getPosition(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  getPositions(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  harvestAndRecompound(
    positionId: PromiseOrValue<BigNumberish>,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    minAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestRewards(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _universalSwap: PromiseOrValue<string>,
    _stableToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  keepers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidationFailure(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  networkToken(overrides?: CallOverrides): Promise<string>;

  numPositions(overrides?: CallOverrides): Promise<BigNumber>;

  positionClosed(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      user: string;
      bank: string;
      bankToken: BigNumber;
      amount: BigNumber;
    }
  >;

  recommendBank(
    lpToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBanks(
    _banks: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    keeperAddress: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidationFailure(
    positionId: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinDepositAmount(
    _minDepositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stableToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  universalSwap(overrides?: CallOverrides): Promise<string>;

  userPositions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    positionId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustLiquidationPoints(
      positionId: PromiseOrValue<BigNumberish>,
      _liquidationPoints: LiquidationConditionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    banks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    botLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      liquidationIndex: PromiseOrValue<BigNumberish>,
      liquidationFee: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    close(
      positionId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentOwner(overrides?: CallOverrides): Promise<string>;

    deposit(
      position: PositionStruct,
      suppliedTokens: PromiseOrValue<string>[],
      suppliedAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositInExisting(
      positionId: PromiseOrValue<BigNumberish>,
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBanks(overrides?: CallOverrides): Promise<string[]>;

    getPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    getPositions(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    harvestAndRecompound(
      positionId: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    initialize(
      _universalSwap: PromiseOrValue<string>,
      _stableToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    keepers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidationFailure(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    networkToken(overrides?: CallOverrides): Promise<string>;

    numPositions(overrides?: CallOverrides): Promise<BigNumber>;

    positionClosed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        user: string;
        bank: string;
        bankToken: BigNumber;
        amount: BigNumber;
      }
    >;

    recommendBank(
      lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBanks(
      _banks: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      keeperAddress: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationFailure(
      positionId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDepositAmount(
      _minDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stableToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    universalSwap(overrides?: CallOverrides): Promise<string>;

    userPositions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BotLiquidate(uint256,uint256,uint256,uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null,
      liquidationIndex?: null
    ): BotLiquidateEventFilter;
    BotLiquidate(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null,
      liquidationIndex?: null
    ): BotLiquidateEventFilter;

    "Deposit(uint256,uint256,uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): DepositEventFilter;
    Deposit(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): DepositEventFilter;

    "Harvest(uint256,uint256,uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): HarvestEventFilter;
    Harvest(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): HarvestEventFilter;

    "HarvestRecompound(uint256,uint256,uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): HarvestRecompoundEventFilter;
    HarvestRecompound(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): HarvestRecompoundEventFilter;

    "IncreasePosition(uint256,uint256,uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): IncreasePositionEventFilter;
    IncreasePosition(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): IncreasePositionEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PositionClose(uint256,uint256,uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): PositionCloseEventFilter;
    PositionClose(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): PositionCloseEventFilter;

    "Refund(uint256,uint256,uint256,string)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null,
      reason?: null
    ): RefundEventFilter;
    Refund(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null,
      reason?: null
    ): RefundEventFilter;

    "Withdraw(uint256,uint256,uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): WithdrawEventFilter;
    Withdraw(
      positionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      usdValue?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    adjustLiquidationPoints(
      positionId: PromiseOrValue<BigNumberish>,
      _liquidationPoints: LiquidationConditionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    banks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      liquidationIndex: PromiseOrValue<BigNumberish>,
      liquidationFee: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    close(
      positionId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentOwner(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      position: PositionStruct,
      suppliedTokens: PromiseOrValue<string>[],
      suppliedAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositInExisting(
      positionId: PromiseOrValue<BigNumberish>,
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBanks(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositions(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestAndRecompound(
      positionId: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _universalSwap: PromiseOrValue<string>,
      _stableToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    keepers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationFailure(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    networkToken(overrides?: CallOverrides): Promise<BigNumber>;

    numPositions(overrides?: CallOverrides): Promise<BigNumber>;

    positionClosed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recommendBank(
      lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBanks(
      _banks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeper(
      keeperAddress: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidationFailure(
      positionId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinDepositAmount(
      _minDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stableToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    universalSwap(overrides?: CallOverrides): Promise<BigNumber>;

    userPositions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustLiquidationPoints(
      positionId: PromiseOrValue<BigNumberish>,
      _liquidationPoints: LiquidationConditionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    banks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      liquidationIndex: PromiseOrValue<BigNumberish>,
      liquidationFee: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    close(
      positionId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      position: PositionStruct,
      suppliedTokens: PromiseOrValue<string>[],
      suppliedAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositInExisting(
      positionId: PromiseOrValue<BigNumberish>,
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBanks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositions(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestAndRecompound(
      positionId: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _universalSwap: PromiseOrValue<string>,
      _stableToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    keepers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationFailure(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionClosed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recommendBank(
      lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBanks(
      _banks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      keeperAddress: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationFailure(
      positionId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinDepositAmount(
      _minDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stableToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    universalSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userPositions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
