/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AssetStruct = {
  pool: PromiseOrValue<string>;
  manager: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
};

export type AssetStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  pool: string;
  manager: string;
  tokenId: BigNumber;
  liquidity: BigNumber;
  data: string;
};

export type ProvidedStruct = {
  tokens: PromiseOrValue<string>[];
  amounts: PromiseOrValue<BigNumberish>[];
  nfts: AssetStruct[];
};

export type ProvidedStructOutput = [
  string[],
  BigNumber[],
  AssetStructOutput[]
] & { tokens: string[]; amounts: BigNumber[]; nfts: AssetStructOutput[] };

export interface ProvidedHelperInterface extends utils.Interface {
  functions: {
    "simplifyWithoutWrite((address[],uint256[],(address,address,uint256,uint256,bytes)[]))": FunctionFragment;
    "universalSwap()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "simplifyWithoutWrite" | "universalSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "simplifyWithoutWrite",
    values: [ProvidedStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "universalSwap",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "simplifyWithoutWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universalSwap",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ProvidedHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProvidedHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    simplifyWithoutWrite(
      provided: ProvidedStruct,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        simplifiedTokens: string[];
        simplifiedAmounts: BigNumber[];
      }
    >;

    universalSwap(overrides?: CallOverrides): Promise<[string]>;
  };

  simplifyWithoutWrite(
    provided: ProvidedStruct,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & {
      simplifiedTokens: string[];
      simplifiedAmounts: BigNumber[];
    }
  >;

  universalSwap(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    simplifyWithoutWrite(
      provided: ProvidedStruct,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        simplifiedTokens: string[];
        simplifiedAmounts: BigNumber[];
      }
    >;

    universalSwap(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    simplifyWithoutWrite(
      provided: ProvidedStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universalSwap(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    simplifyWithoutWrite(
      provided: ProvidedStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universalSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
