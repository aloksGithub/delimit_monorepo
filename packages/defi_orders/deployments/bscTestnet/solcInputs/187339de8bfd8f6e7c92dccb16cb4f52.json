{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Banks/BalancerLiquidityGaugeBank.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\n// import \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n// import \"../interfaces/IMasterChef.sol\";\n// import \"./BankBase.sol\";\n// import \"hardhat/console.sol\";\n\n// interface IBalancerLiquidityGaugeFactory {\n//     function getPoolGauge(address pool) external returns (address);\n// }\n\n// interface BalancerLiquidityGauge {\n//     function reward_count() external returns (uint);\n//     function reward_tokens(uint arg0) external returns (address);\n//     function claimable_reward(address _user, address _reward_token) external returns (uint);\n//     function claim_rewards() external;\n//     function balanceOf(address _user) external returns (uint);\n//     function deposit(uint _value) external;\n//     function deposit(uint _value, address _addr) external;\n//     function withdraw(uint _value) external;\n//     function withdraw(uint _value, bool _claim_rewards) external;\n// }\n\n// contract BalancerLiquidityGaugeBank is ERC1155('BalancerLiquidityGaugeBank'), BankBase {\n//     struct PoolInfo {\n//         uint totalSupply;\n//         mapping(address=>uint) rewardAllocationsPerShare;\n//         mapping(address=>uint) userShares;\n//         mapping(address=>mapping(address=>int256)) rewardDebt;    // Mapping from user to reward to debt\n//     }\n\n//     uint PRECISION = 1e12;\n//     mapping (uint=>address[]) rewards; // Rewards for a masterchef/gauge or some other reward giving contract\n//     mapping (uint=>PoolInfo) poolInfo;\n//     IBalancerLiquidityGaugeFactory liquidityGaugeFactory;\n//     IERC20 bal;\n\n//     constructor(address _positionsManager, address _liquidityGaugeFactory, address _bal) BankBase(_positionsManager) {\n//         liquidityGaugeFactory = IBalancerLiquidityGaugeFactory(_liquidityGaugeFactory);\n//         bal = IERC20(_bal);\n//     }\n\n//     function encodeId(address tokenAddress) public pure returns (uint) {\n//         return uint256(uint160(tokenAddress));\n//     }\n\n//     function decodeId(uint id) public pure returns (address tokenAddress) {\n//         return address(uint160(id));\n//     }\n\n//     function getLPToken(uint id) override public pure returns (address tokenAddress) {\n//         tokenAddress = decodeId(id);\n//     }\n\n//     function getRewards(uint tokenId) override external pure returns (address[] memory rewardsArray) {\n//         return rewardsArray;\n//     }\n\n//     function getIdFromLpToken(address lpToken) override external pure returns (bool, uint) {\n//         return (false, 0);\n//     }\n\n//     function name() override public pure returns (string memory) {\n//         return \"Balancer Liquidity Gauge Bank\";\n//     }\n\n//     function updateToken(uint tokenId) onlyAuthorized internal {\n//         address lpToken = decodeId(tokenId);\n//         BalancerLiquidityGauge gauge = BalancerLiquidityGauge(liquidityGaugeFactory.getPoolGauge(lpToken));\n//         PoolInfo storage pool = poolInfo[tokenId];\n//         uint lpSupply = pool.totalSupply;\n//         uint claimable = gauge.claimable_reward(address(this), address(bal));\n//         uint balance = gauge.balanceOf(address(this));\n//         console.log(claimable, balance);\n//         if (lpSupply>0) {\n//             uint numRewards = gauge.reward_count();\n//             uint[] memory initialRewardAmounts = new uint[](numRewards+1);\n//             initialRewardAmounts[0] = bal.balanceOf(address(this));\n//             for (uint i = 1; i<initialRewardAmounts.length; i++) {\n//                 initialRewardAmounts[i] = IERC20(gauge.reward_tokens(i)).balanceOf(address(this));\n//             }\n//             gauge.claim_rewards();\n//             uint balGained = bal.balanceOf(address(this))-initialRewardAmounts[0];\n//             pool.rewardAllocationsPerShare[address(bal)]+=balGained*PRECISION/lpSupply;\n//             for (uint i = 1; i<initialRewardAmounts.length; i++) {\n//                 address rewardToken = gauge.reward_tokens(i);\n//                 uint rewardGained = IERC20(rewardToken).balanceOf(address(this))-initialRewardAmounts[i];\n//                 pool.rewardAllocationsPerShare[rewardToken]+=rewardGained*PRECISION/lpSupply;\n//             }\n//         }\n//     }\n\n//     function mint(uint tokenId, address userAddress, uint amount) onlyAuthorized override external {\n//         address lpToken = decodeId(tokenId);\n//         updateToken(tokenId);\n//         BalancerLiquidityGauge gauge = BalancerLiquidityGauge(liquidityGaugeFactory.getPoolGauge(lpToken));\n//         IERC20(lpToken).approve(address(gauge), amount);\n//         gauge.deposit(amount, address(this));\n//         PoolInfo storage pool = poolInfo[tokenId];\n//         pool.userShares[userAddress]+=amount;\n//         pool.totalSupply+=amount;\n//         uint numRewards = gauge.reward_count();\n//         for (uint i = 0; i<numRewards; i++) {\n//             address reward = gauge.reward_tokens(i);\n//             pool.rewardDebt[userAddress][reward]+=int(amount*pool.rewardAllocationsPerShare[reward]/PRECISION);\n//         }\n//         _mint(userAddress, tokenId, amount, '');\n//     }\n\n//     function burn(uint tokenId, address userAddress, uint amount, address receiver) onlyAuthorized override external {\n//         address lpToken = decodeId(tokenId);\n//         BalancerLiquidityGauge gauge = BalancerLiquidityGauge(liquidityGaugeFactory.getPoolGauge(lpToken));\n//         updateToken(tokenId);\n//         PoolInfo storage pool = poolInfo[tokenId];\n//         uint numRewards = gauge.reward_count();\n//         for (uint i = 0; i<numRewards; i++) {\n//             address reward = gauge.reward_tokens(i);\n//             pool.rewardDebt[userAddress][reward]-=int(amount*pool.rewardAllocationsPerShare[reward]/PRECISION);\n//         }\n//         pool.userShares[userAddress]-=amount;\n//         pool.totalSupply-=amount;\n//         gauge.withdraw(amount);\n//         IERC20(lpToken).transfer(receiver, amount);\n//         _burn(userAddress, tokenId, amount);\n//     }\n\n//     function harvest(uint tokenId, address userAddress, address receiver) onlyAuthorized override external returns (address[] memory rewardAddresses, uint[] memory rewardAmounts) {\n//         address lpToken = decodeId(tokenId);\n//         BalancerLiquidityGauge gauge = BalancerLiquidityGauge(liquidityGaugeFactory.getPoolGauge(lpToken));\n//         updateToken(tokenId);\n//         PoolInfo storage pool = poolInfo[tokenId];\n//         uint numRewards = gauge.reward_count();\n//         rewardAddresses = new address[](numRewards);\n//         rewardAmounts = new uint[](numRewards);\n//         for (uint i = 0; i<numRewards; i++) {\n//             address reward = gauge.reward_tokens(i);\n//             int256 accumulatedReward = int256(pool.userShares[userAddress]*pool.rewardAllocationsPerShare[reward]/PRECISION);\n//             uint pendingReward = uint(accumulatedReward-pool.rewardDebt[userAddress][reward]);\n//             pool.rewardDebt[userAddress][reward] = accumulatedReward;\n//             if (pendingReward!=0) {\n//                 IERC20(reward).transfer(receiver, pendingReward);\n//             }\n//             rewardAddresses[i] = reward;\n//             rewardAmounts[i] = pendingReward;\n//         }\n//     }\n// }\n"
    },
    "contracts/Banks/BankBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../libraries/SaferERC20.sol\";\nimport \"../utils/OwnableUpgradeable.sol\";\n\nabstract contract BankBase is Initializable, OwnableUpgradeable {\n    using SaferERC20 for IERC20;\n\n    event Mint(uint256 tokenId, address userAddress, uint256 amount);\n    event Burn(uint256 tokenId, address userAddress, uint256 amount, address receiver);\n    event Harvest(uint256 tokenId, address userAddress, address receiver);\n\n    address positionsManager;\n\n    function __BankBase_init(address _positionsManager) public onlyInitializing {\n        positionsManager = _positionsManager;\n        __Ownable_init();\n    }\n\n    modifier onlyAuthorized() {\n        require(msg.sender == positionsManager || msg.sender == currentOwner(), \"1\");\n        _;\n    }\n\n    function name() external pure virtual returns (string memory);\n\n    function getIdFromLpToken(address lpToken) external view virtual returns (bool, uint256);\n\n    function decodeId(uint256 id) external view virtual returns (address, address, uint256);\n\n    function getUnderlyingForFirstDeposit(\n        uint256 tokenId\n    ) public view virtual returns (address[] memory underlying, uint256[] memory ratios) {\n        underlying = new address[](1);\n        underlying[0] = getLPToken(tokenId);\n        ratios = new uint256[](1);\n        ratios[0] = 1;\n    }\n\n    function getUnderlyingForRecurringDeposit(\n        uint256 tokenId\n    ) external view virtual returns (address[] memory, uint256[] memory ratios) {\n        return getUnderlyingForFirstDeposit(tokenId);\n    }\n\n    function getLPToken(uint256 tokenId) public view virtual returns (address);\n\n    function getRewards(uint256 tokenId) external view virtual returns (address[] memory rewardsArray) {\n        return rewardsArray;\n    }\n\n    receive() external payable {}\n\n    function getPendingRewardsForUser(\n        uint256 tokenId,\n        address user\n    ) external view virtual returns (address[] memory rewards, uint256[] memory amounts) {}\n\n    function getPositionTokens(\n        uint256 tokenId,\n        address user\n    ) external view virtual returns (address[] memory tokens, uint256[] memory amounts);\n\n    function mint(\n        uint256 tokenId,\n        address userAddress,\n        address[] memory suppliedTokens,\n        uint256[] memory suppliedAmounts\n    ) public virtual returns (uint256);\n\n    function mintRecurring(\n        uint256 tokenId,\n        address userAddress,\n        address[] memory suppliedTokens,\n        uint256[] memory suppliedAmounts\n    ) external virtual returns (uint256) {\n        return mint(tokenId, userAddress, suppliedTokens, suppliedAmounts);\n    }\n\n    function burn(\n        uint256 tokenId,\n        address userAddress,\n        uint256 amount,\n        address receiver\n    ) external virtual returns (address[] memory, uint256[] memory);\n\n    function harvest(\n        uint256 tokenId,\n        address userAddress,\n        address receiver\n    ) external virtual onlyAuthorized returns (address[] memory rewardAddresses, uint256[] memory rewardAmounts) {\n        return (rewardAddresses, rewardAmounts);\n    }\n\n    function isUnderlyingERC721() external pure virtual returns (bool) {\n        return false;\n    }\n}\n"
    },
    "contracts/Banks/ERC20Bank.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"./BankBase.sol\";\nimport \"../interfaces/IPositionsManager.sol\";\nimport \"hardhat/console.sol\";\n\ncontract ERC20Bank is Initializable, ERC1155Upgradeable, BankBase {\n    using SaferERC20 for IERC20;\n\n    struct PoolInfo {\n        mapping(address => uint256) userShares;\n    }\n\n    mapping(uint256 => PoolInfo) poolInfo;\n    mapping(address => uint256) balances;\n\n    function initialize(address _positionsManager) public initializer {\n        __BankBase_init(_positionsManager);\n        __ERC1155_init(\"ERC20Bank\");\n    }\n\n    function encodeId(address tokenAddress) public pure returns (uint256) {\n        return uint256(uint160(tokenAddress));\n    }\n\n    function decodeId(uint256 id) public pure override returns (address, address, uint256) {\n        return (address(uint160(id)), address(0), 0);\n    }\n\n    function getLPToken(uint256 id) public pure override returns (address tokenAddress) {\n        (tokenAddress, , ) = decodeId(id);\n    }\n\n    function getIdFromLpToken(address lpToken) external view override returns (bool, uint256) {\n        if (lpToken == address(0) || lpToken == IPositionsManager(positionsManager).networkToken())\n            return (true, encodeId(lpToken));\n        try ERC20(lpToken).name() {} catch {\n            return (false, 0);\n        }\n        try ERC20(lpToken).totalSupply() {} catch {\n            return (false, 0);\n        }\n        try ERC20(lpToken).balanceOf(address(0)) {} catch {\n            return (false, 0);\n        }\n        try ERC20(lpToken).decimals() {} catch {\n            return (false, 0);\n        }\n        return (true, encodeId(lpToken));\n    }\n\n    function name() public pure override returns (string memory) {\n        return \"ERC20 Bank\";\n    }\n\n    function getPositionTokens(\n        uint256 tokenId,\n        address userAddress\n    ) external view override returns (address[] memory outTokens, uint256[] memory tokenAmounts) {\n        (address lpToken, , ) = decodeId(tokenId);\n        uint256 amount = balanceOf(userAddress, tokenId);\n        outTokens = new address[](1);\n        tokenAmounts = new uint256[](1);\n        outTokens[0] = lpToken;\n        tokenAmounts[0] = amount;\n    }\n\n    function mint(\n        uint256 tokenId,\n        address userAddress,\n        address[] memory suppliedTokens,\n        uint256[] memory suppliedAmounts\n    ) public override onlyAuthorized returns (uint256) {\n        PoolInfo storage pool = poolInfo[tokenId];\n        pool.userShares[userAddress] += suppliedAmounts[0];\n        _mint(userAddress, tokenId, suppliedAmounts[0], \"\");\n\n        // Sanity check\n        if (suppliedTokens[0] != address(0)) {\n            require(\n                balances[suppliedTokens[0]] + suppliedAmounts[0] <= IERC20(suppliedTokens[0]).balanceOf(address(this)),\n                \"8\"\n            );\n        } else {\n            require(balances[suppliedTokens[0]] + suppliedAmounts[0] <= address(this).balance, \"8\");\n        }\n        balances[suppliedTokens[0]] += suppliedAmounts[0];\n        return suppliedAmounts[0];\n    }\n\n    function burn(\n        uint256 tokenId,\n        address userAddress,\n        uint256 amount,\n        address receiver\n    ) external override onlyAuthorized returns (address[] memory outTokens, uint256[] memory tokenAmounts) {\n        (address lpToken, , ) = decodeId(tokenId);\n        PoolInfo storage pool = poolInfo[tokenId];\n        pool.userShares[userAddress] -= amount;\n        if (lpToken != address(0)) {\n            IERC20(lpToken).safeTransfer(receiver, amount);\n        } else {\n            payable(receiver).transfer(amount);\n        }\n        _burn(userAddress, tokenId, amount);\n        outTokens = new address[](1);\n        tokenAmounts = new uint256[](1);\n        outTokens[0] = lpToken;\n        tokenAmounts[0] = amount;\n\n        // Sanity check\n        if (lpToken != address(0)) {\n            require(balances[lpToken] - amount <= IERC20(lpToken).balanceOf(address(this)), \"8\");\n        } else {\n            require(balances[lpToken] - amount <= address(this).balance, \"8\");\n        }\n        balances[lpToken] -= amount;\n    }\n}\n"
    },
    "contracts/Banks/ERC721Bank.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"./ERC721Wrappers.sol\";\nimport \"./BankBase.sol\";\n\ncontract ERC721Bank is Initializable, BankBase {\n    using Address for address;\n\n    struct PoolInfo {\n        address user;\n        uint256 liquidity;\n        // mapping(address=>mapping(uint=>bool)) userShares;\n    }\n\n    address[] nftManagers;\n    mapping(address => address) erc721Wrappers;\n\n    mapping(uint256 => PoolInfo) poolInfo;\n\n    function initialize(address _positionsManager) public initializer {\n        __BankBase_init(_positionsManager);\n    }\n\n    function addManager(address nftManager) external onlyOwner {\n        nftManagers.push(nftManager);\n    }\n\n    function setWrapper(address nftManager, address wrapper) external onlyOwner {\n        erc721Wrappers[nftManager] = wrapper;\n    }\n\n    function encodeId(uint256 id, address nftManager) public view returns (uint256) {\n        for (uint256 i = 0; i < nftManagers.length; i++) {\n            if (nftManagers[i] == nftManager) {\n                return (i << 240) | uint240(id);\n            }\n        }\n        revert(\"NFT manager not supported\");\n    }\n\n    function decodeId(\n        uint256 id\n    ) public view override returns (address poolAddress, address nftManager, uint256 pos_id) {\n        nftManager = nftManagers[id >> 240];\n        pos_id = uint240(id & ((1 << 240) - 1));\n        poolAddress = IERC721Wrapper(erc721Wrappers[nftManager]).getPoolAddress(nftManager, pos_id);\n    }\n\n    function getLPToken(uint256 id) public view override returns (address managerAddress) {\n        (, managerAddress, ) = decodeId(id);\n    }\n\n    function getIdFromLpToken(address manager) public view override returns (bool, uint256) {\n        for (uint256 i = 0; i < nftManagers.length; i++) {\n            if (nftManagers[i] == manager) {\n                return (true, uint160(nftManagers[i]));\n            }\n        }\n        return (false, 0);\n    }\n\n    function name() public pure override returns (string memory) {\n        return \"ERC721 Bank\";\n    }\n\n    function mint(\n        uint256 tokenId,\n        address userAddress,\n        address[] memory suppliedTokens,\n        uint256[] memory suppliedAmounts\n    ) public override onlyAuthorized returns (uint256) {\n        (, , , , , , , uint256 minted, , , , ) = INonfungiblePositionManager(suppliedTokens[0]).positions(\n            suppliedAmounts[0]\n        );\n        poolInfo[tokenId] = PoolInfo(userAddress, minted);\n        return minted;\n    }\n\n    function mintRecurring(\n        uint256 tokenId,\n        address userAddress,\n        address[] memory suppliedTokens,\n        uint256[] memory suppliedAmounts\n    ) external override onlyAuthorized returns (uint256) {\n        require(poolInfo[tokenId].user == userAddress, \"9\");\n        (, address manager, uint256 id) = decodeId(tokenId);\n        address wrapper = erc721Wrappers[manager];\n\n        bytes memory returnData = wrapper.functionDelegateCall(\n            abi.encodeWithSelector(IERC721Wrapper.deposit.selector, manager, id, suppliedTokens, suppliedAmounts)\n        );\n        uint256 minted = abi.decode(returnData, (uint256));\n        poolInfo[tokenId].liquidity += minted;\n        return minted;\n    }\n\n    function burn(\n        uint256 tokenId,\n        address userAddress,\n        uint256 amount,\n        address receiver\n    ) external override onlyAuthorized returns (address[] memory outTokens, uint256[] memory tokenAmounts) {\n        require(poolInfo[tokenId].user == userAddress, \"9\");\n        (, address manager, uint256 id) = decodeId(tokenId);\n        address wrapper = erc721Wrappers[manager];\n        bytes memory returnData = wrapper.functionDelegateCall(\n            abi.encodeWithSelector(IERC721Wrapper.withdraw.selector, manager, id, amount, receiver)\n        );\n        (outTokens, tokenAmounts) = abi.decode(returnData, (address[], uint256[]));\n        // (outTokens, tokenAmounts) = withdraw(manager, id, amount, receiver);\n        (, , , , , , , uint256 liquidity, , , , ) = INonfungiblePositionManager(manager).positions(id);\n        poolInfo[tokenId].liquidity = liquidity;\n    }\n\n    function harvest(\n        uint256 tokenId,\n        address userAddress,\n        address receiver\n    ) external override onlyAuthorized returns (address[] memory rewardAddresses, uint256[] memory rewardAmounts) {\n        require(poolInfo[tokenId].user == userAddress, \"9\");\n        (, address manager, uint256 id) = decodeId(tokenId);\n        address wrapper = erc721Wrappers[manager];\n        bytes memory returnData = wrapper.functionDelegateCall(\n            abi.encodeWithSelector(IERC721Wrapper.harvest.selector, manager, id, receiver)\n        );\n        (, , , , , , , uint256 liquidity, , , , ) = INonfungiblePositionManager(manager).positions(id);\n        poolInfo[tokenId].liquidity = liquidity;\n        (rewardAddresses, rewardAmounts) = abi.decode(returnData, (address[], uint256[]));\n        return (rewardAddresses, rewardAmounts);\n    }\n\n    function getUnderlyingForFirstDeposit(\n        uint256 tokenId\n    ) public view override returns (address[] memory underlying, uint256[] memory ratios) {\n        (, address manager, ) = decodeId(tokenId);\n        underlying = new address[](1);\n        underlying[0] = manager;\n        ratios = new uint256[](1);\n        ratios[0] = 1;\n    }\n\n    function getUnderlyingForRecurringDeposit(\n        uint256 tokenId\n    ) public view override returns (address[] memory, uint256[] memory ratios) {\n        (, address manager, uint256 pos_id) = decodeId(tokenId);\n        IERC721Wrapper wrapper = IERC721Wrapper(erc721Wrappers[manager]);\n        return wrapper.getRatio(manager, pos_id);\n        // return wrapper.getERC20Base(pool);\n    }\n\n    function getRewards(uint256 tokenId) external view override returns (address[] memory rewardsArray) {\n        (rewardsArray, ) = getUnderlyingForRecurringDeposit(tokenId);\n    }\n\n    function getPendingRewardsForUser(\n        uint256 tokenId,\n        address user\n    ) external view override returns (address[] memory rewards, uint256[] memory amounts) {\n        (, address manager, uint256 pos_id) = decodeId(tokenId);\n        IERC721Wrapper wrapper = IERC721Wrapper(erc721Wrappers[manager]);\n        return wrapper.getRewardsForPosition(manager, pos_id);\n    }\n\n    function getPositionTokens(\n        uint256 tokenId,\n        address userAddress\n    ) external view override returns (address[] memory outTokens, uint256[] memory tokenAmounts) {\n        (, address manager, uint256 pos_id) = decodeId(tokenId);\n        IERC721Wrapper wrapper = IERC721Wrapper(erc721Wrappers[manager]);\n        return wrapper.getPositionUnderlying(manager, pos_id);\n    }\n\n    function isUnderlyingERC721() external pure override returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/Banks/ERC721Wrappers.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"../interfaces/UniswapV3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/UniswapV3/IUniswapV3Pool.sol\";\nimport \"../interfaces/UniswapV3/IUniswapV3Factory.sol\";\nimport \"./BankBase.sol\";\nimport \"../libraries/TickMath.sol\";\nimport \"../libraries/LiquidityAmounts.sol\";\nimport \"hardhat/console.sol\";\n\nabstract contract IERC721Wrapper is Ownable {\n    function isSupported(address manager, address pool) external view virtual returns (bool);\n\n    function getPoolAddress(address manager, uint256 id) external view virtual returns (address);\n\n    function deposit(\n        address manager,\n        uint256 id,\n        address[] memory suppliedTokens,\n        uint256[] memory suppliedAmounts\n    ) external virtual returns (uint256);\n\n    function withdraw(\n        address manager,\n        uint256 id,\n        uint256 amount,\n        address receiver\n    ) external virtual returns (address[] memory outTokens, uint256[] memory tokenAmounts);\n\n    function harvest(\n        address manager,\n        uint256 id,\n        address receiver\n    ) external virtual returns (address[] memory outTokens, uint256[] memory tokenAmounts);\n\n    function getRatio(\n        address manager,\n        uint256 id\n    ) external view virtual returns (address[] memory tokens, uint256[] memory ratios);\n\n    function getRewardsForPosition(\n        address manager,\n        uint256 tokenId\n    ) external view virtual returns (address[] memory rewards, uint256[] memory amounts);\n\n    function getERC20Base(address pool) external view virtual returns (address[] memory underlyingTokens);\n\n    function getPositionUnderlying(\n        address manager,\n        uint256 tokenId\n    ) external view virtual returns (address[] memory tokens, uint256[] memory amounts);\n}\n\ncontract UniswapV3Wrapper is IERC721Wrapper {\n    using SaferERC20 for IERC20;\n\n    function isSupported(address managerAddress, address poolAddress) external view override returns (bool) {\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n        address token0 = pool.token0();\n        address token1 = pool.token1();\n        uint24 fee = pool.fee();\n        INonfungiblePositionManager manager = INonfungiblePositionManager(managerAddress);\n        IUniswapV3Factory factory = IUniswapV3Factory(manager.factory());\n        address expectedPoolAddress = factory.getPool(token0, token1, fee);\n        if (expectedPoolAddress == poolAddress) {\n            return true;\n        }\n        return false;\n    }\n\n    function getPoolAddress(address manager, uint256 id) external view override returns (address) {\n        (, , address token0, address token1, uint24 fee, , , , , , , ) = INonfungiblePositionManager(manager).positions(\n            id\n        );\n        address factory = INonfungiblePositionManager(manager).factory();\n        address poolAddress = IUniswapV3Factory(factory).getPool(token0, token1, fee);\n        return poolAddress;\n    }\n\n    function deposit(\n        address manager,\n        uint256 id,\n        address[] memory suppliedTokens,\n        uint256[] memory suppliedAmounts\n    ) external override returns (uint256) {\n        for (uint256 i = 0; i < suppliedTokens.length; i++) {\n            IERC20(suppliedTokens[i]).safeIncreaseAllowance(manager, suppliedAmounts[i]);\n        }\n        (, , address token0, address token1, , , , , , , , ) = INonfungiblePositionManager(manager).positions(id);\n        uint256 amount0;\n        uint256 amount1;\n        if (token0 == suppliedTokens[0] && token1 == suppliedTokens[1]) {\n            amount0 = suppliedAmounts[0];\n            amount1 = suppliedAmounts[1];\n        } else {\n            amount1 = suppliedAmounts[0];\n            amount0 = suppliedAmounts[1];\n        }\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params = INonfungiblePositionManager\n            .IncreaseLiquidityParams(id, amount0, amount1, 0, 0, block.timestamp);\n        (uint256 minted, uint256 a0, uint256 a1) = INonfungiblePositionManager(manager).increaseLiquidity(params);\n        address owner = INonfungiblePositionManager(manager).ownerOf(id);\n        // Refund left overs\n        if (token0 == suppliedTokens[0] && token1 == suppliedTokens[1]) {\n            IERC20(token0).safeTransfer(owner, suppliedAmounts[0] - a0);\n            IERC20(token1).safeTransfer(owner, suppliedAmounts[1] - a1);\n        } else {\n            IERC20(token0).safeTransfer(owner, suppliedAmounts[1] - a0);\n            IERC20(token1).safeTransfer(owner, suppliedAmounts[0] - a1);\n        }\n        return minted;\n    }\n\n    function withdraw(\n        address manager,\n        uint256 id,\n        uint256 amount,\n        address receiver\n    ) external override returns (address[] memory outTokens, uint256[] memory tokenAmounts) {\n        (, , address token0, address token1, , , , , , , , ) = INonfungiblePositionManager(manager).positions(id);\n        INonfungiblePositionManager.DecreaseLiquidityParams memory withdrawParams = INonfungiblePositionManager\n            .DecreaseLiquidityParams(id, uint128(amount), 0, 0, block.timestamp);\n        (uint256 token0Amount, uint256 token1Amount) = INonfungiblePositionManager(manager).decreaseLiquidity(\n            withdrawParams\n        );\n        INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager.CollectParams(\n            id,\n            address(this),\n            2 ** 128 - 1,\n            2 ** 128 - 1\n        );\n        INonfungiblePositionManager(manager).collect(params);\n        IERC20(token0).safeTransfer(receiver, token0Amount);\n        IERC20(token1).safeTransfer(receiver, token1Amount);\n        outTokens = new address[](2);\n        outTokens[0] = token0;\n        outTokens[1] = token1;\n        tokenAmounts = new uint256[](2);\n        tokenAmounts[0] = token0Amount;\n        tokenAmounts[1] = token1Amount;\n    }\n\n    function harvest(\n        address manager,\n        uint256 id,\n        address receiver\n    ) external override returns (address[] memory outTokens, uint256[] memory tokenAmounts) {\n        (, , address token0, address token1, , , , , , , , ) = INonfungiblePositionManager(manager).positions(id);\n        INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager.CollectParams(\n            id,\n            receiver,\n            2 ** 128 - 1,\n            2 ** 128 - 1\n        );\n        (uint256 amount0, uint256 amount1) = INonfungiblePositionManager(manager).collect(params);\n        outTokens = new address[](2);\n        outTokens[0] = token0;\n        outTokens[1] = token1;\n        tokenAmounts = new uint256[](2);\n        tokenAmounts[0] = amount0;\n        tokenAmounts[1] = amount1;\n    }\n\n    function getRatio(\n        address manager,\n        uint256 tokenId\n    ) external view override returns (address[] memory tokens, uint256[] memory ratios) {\n        (\n            ,\n            ,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tick0,\n            int24 tick1,\n            ,\n            ,\n            ,\n            ,\n\n        ) = INonfungiblePositionManager(manager).positions(tokenId);\n        IUniswapV3Factory factory = IUniswapV3Factory(INonfungiblePositionManager(manager).factory());\n        IUniswapV3Pool pool = IUniswapV3Pool(factory.getPool(token0, token1, fee));\n        int24 currentTick;\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n        {\n            currentTick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n            uint absTick = currentTick < 0 ? uint(-int(currentTick)) : uint(int(currentTick));\n            uint24 tickSpacing = uint24(pool.tickSpacing());\n            absTick -= absTick % tickSpacing;\n            currentTick = currentTick < 0 ? -int24(int(absTick)) : int24(int(absTick));\n            tokens = new address[](2);\n            tokens[0] = token0;\n            tokens[1] = token1;\n        }\n        ratios = new uint256[](2);\n        {\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\n                TickMath.getSqrtRatioAtTick(currentTick),\n                TickMath.getSqrtRatioAtTick(tick0),\n                TickMath.getSqrtRatioAtTick(tick1),\n                pool.liquidity()\n            );\n            uint256 price;\n            uint256 MAX = 2 ** 256 - 1;\n            if (uint256(sqrtPriceX96) * uint256(sqrtPriceX96) > MAX / 1e18) {\n                price = ((uint256(sqrtPriceX96) * uint256(sqrtPriceX96)) >> (96 * 2)) * 1e18;\n            } else {\n                price = (uint256(sqrtPriceX96) * uint256(sqrtPriceX96) * 1e18) >> (96 * 2);\n            }\n            ratios[0] = amount0;\n            ratios[1] = (amount1 * 1e18) / price;\n        }\n    }\n\n    function getRewardsForPosition(\n        address manager,\n        uint256 tokenId\n    ) external view override returns (address[] memory rewards, uint256[] memory amounts) {\n        (uint256 fee0, uint256 fee1) = getPendingFees(manager, tokenId);\n        (, , address token0, address token1, , , , , , , , ) = INonfungiblePositionManager(manager).positions(tokenId);\n        rewards = new address[](2);\n        rewards[0] = token0;\n        rewards[1] = token1;\n        amounts = new uint256[](2);\n        amounts[0] = fee0;\n        amounts[1] = fee1;\n    }\n\n    function getPositionUnderlying(\n        address manager,\n        uint256 tokenId\n    ) external view override returns (address[] memory tokens, uint256[] memory amounts) {\n        (\n            ,\n            ,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            ,\n            ,\n            ,\n\n        ) = INonfungiblePositionManager(manager).positions(tokenId);\n        IUniswapV3Pool pool = IUniswapV3Pool(\n            IUniswapV3Factory(INonfungiblePositionManager(manager).factory()).getPool(token0, token1, fee)\n        );\n        (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\n            sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            liquidity\n        );\n        tokens = new address[](2);\n        tokens[0] = token0;\n        tokens[1] = token1;\n        amounts = new uint256[](2);\n        amounts[0] = amount0;\n        amounts[1] = amount1;\n    }\n\n    function getERC20Base(address poolAddress) external view override returns (address[] memory underlyingTokens) {\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n        address token0 = pool.token0();\n        address token1 = pool.token1();\n        underlyingTokens = new address[](2);\n        underlyingTokens[0] = token0;\n        underlyingTokens[1] = token1;\n    }\n\n    function getPendingFees(\n        address manager,\n        uint256 _positionId\n    ) internal view returns (uint256 feeAmt0, uint256 feeAmt1) {\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        IUniswapV3Pool pool;\n        {\n            address token0;\n            address token1;\n            uint24 fee;\n            (\n                ,\n                ,\n                token0,\n                token1,\n                fee,\n                tickLower,\n                tickUpper,\n                ,\n                feeGrowthInside0LastX128,\n                feeGrowthInside1LastX128,\n                ,\n\n            ) = INonfungiblePositionManager(manager).positions(_positionId);\n            pool = IUniswapV3Pool(\n                IUniswapV3Factory(INonfungiblePositionManager(manager).factory()).getPool(token0, token1, fee)\n            );\n        }\n        (, int24 curTick, , , , , ) = pool.slot0();\n\n        (uint128 liquidity, , , uint128 tokensOwed0, uint128 tokensOwed1) = pool.positions(\n            _getPositionID(manager, tickLower, tickUpper)\n        );\n\n        feeAmt0 =\n            _computeFeesEarned(pool, true, feeGrowthInside0LastX128, curTick, tickLower, tickUpper, liquidity) +\n            tokensOwed0;\n        feeAmt1 =\n            _computeFeesEarned(pool, false, feeGrowthInside1LastX128, curTick, tickLower, tickUpper, liquidity) +\n            tokensOwed1;\n    }\n\n    function _getPositionID(\n        address _owner,\n        int24 _lowerTick,\n        int24 _upperTick\n    ) internal pure returns (bytes32 positionId) {\n        return keccak256(abi.encodePacked(_owner, _lowerTick, _upperTick));\n    }\n\n    // ref: from arrakis finance: https://github.com/ArrakisFinance/vault-v1-core/blob/main/contracts/ArrakisVaultV1.sol\n    function _computeFeesEarned(\n        IUniswapV3Pool _pool,\n        bool _isZero,\n        uint256 _feeGrowthInsideLast,\n        int24 _tick,\n        int24 _lowerTick,\n        int24 _upperTick,\n        uint128 _liquidity\n    ) internal view returns (uint256 fee) {\n        uint256 feeGrowthOutsideLower;\n        uint256 feeGrowthOutsideUpper;\n        uint256 feeGrowthGlobal;\n        if (_isZero) {\n            feeGrowthGlobal = _pool.feeGrowthGlobal0X128();\n            (, , feeGrowthOutsideLower, , , , , ) = _pool.ticks(_lowerTick);\n            (, , feeGrowthOutsideUpper, , , , , ) = _pool.ticks(_upperTick);\n        } else {\n            feeGrowthGlobal = _pool.feeGrowthGlobal1X128();\n            (, , , feeGrowthOutsideLower, , , , ) = _pool.ticks(_lowerTick);\n            (, , , feeGrowthOutsideUpper, , , , ) = _pool.ticks(_upperTick);\n        }\n\n        unchecked {\n            // calculate fee growth below\n            uint256 feeGrowthBelow;\n            if (_tick >= _lowerTick) {\n                feeGrowthBelow = feeGrowthOutsideLower;\n            } else {\n                feeGrowthBelow = feeGrowthGlobal - feeGrowthOutsideLower;\n            }\n\n            // calculate fee growth above\n            uint256 feeGrowthAbove;\n            if (_tick < _upperTick) {\n                feeGrowthAbove = feeGrowthOutsideUpper;\n            } else {\n                feeGrowthAbove = feeGrowthGlobal - feeGrowthOutsideUpper;\n            }\n\n            uint256 feeGrowthInside = feeGrowthGlobal - feeGrowthBelow - feeGrowthAbove;\n            fee = (_liquidity * (feeGrowthInside - _feeGrowthInsideLast)) / 2 ** 128;\n        }\n    }\n}\n"
    },
    "contracts/Banks/MasterChefBank.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"./BankBase.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./MasterChefWrappers.sol\";\nimport \"hardhat/console.sol\";\n\ncontract MasterChefBank is Initializable, ERC1155Upgradeable, BankBase {\n    using Address for address;\n    using SaferERC20 for IERC20;\n\n    event SetMasterChefWrapper(address masterChef, address wrapper);\n\n    struct PoolInfo {\n        address lpToken;\n        uint256 lpSupply;\n        mapping(address => uint256) rewardAllocationsPerShare;\n        mapping(address => uint256) userShares;\n        mapping(address => mapping(address => int256)) rewardDebt; // Mapping from user to reward to debt\n    }\n\n    uint256 PRECISION;\n    mapping(uint256 => PoolInfo) public poolInfo;\n    mapping(address => address) public masterChefWrappers;\n    address[] public supportedMasterChefs;\n    mapping(address => uint256) public balances;\n\n    function initialize(address _positionsManager) public initializer {\n        PRECISION = 1e12;\n        __BankBase_init(_positionsManager);\n        __ERC1155_init(\"MasterChefBank\");\n    }\n\n    function encodeId(address masterChef, uint256 pid) public pure returns (uint256) {\n        return (pid << 160) | uint160(masterChef);\n    }\n\n    function setMasterChefWrapper(address masterChef, address wrapper) external onlyOwner {\n        masterChefWrappers[masterChef] = wrapper;\n        for (uint256 i = 0; i < supportedMasterChefs.length; i++) {\n            if (supportedMasterChefs[i] == masterChef) {\n                return;\n            }\n        }\n        supportedMasterChefs.push(masterChef);\n        emit SetMasterChefWrapper(masterChef, wrapper);\n    }\n\n    function decodeId(uint256 id) public view override returns (address lpToken, address masterChef, uint256 pid) {\n        pid = id >> 160;\n        masterChef = address(uint160(id & ((1 << 160) - 1)));\n        lpToken = IMasterChefWrapper(masterChefWrappers[masterChef]).getLpToken(pid);\n    }\n\n    function getLPToken(uint256 id) public view override returns (address tokenAddress) {\n        (tokenAddress, , ) = decodeId(id);\n    }\n\n    function name() public pure override returns (string memory) {\n        return \"Masterchef Bank\";\n    }\n\n    function getIdFromLpToken(address lpToken) public view override returns (bool, uint256) {\n        for (uint256 i = 0; i < supportedMasterChefs.length; i++) {\n            IMasterChefWrapper wrapper = IMasterChefWrapper(masterChefWrappers[supportedMasterChefs[i]]);\n            (bool success, uint256 id) = wrapper.getIdFromLpToken(lpToken);\n            if (success) {\n                return (true, encodeId(supportedMasterChefs[i], id));\n            }\n        }\n        return (false, 0);\n    }\n\n    function getRewards(uint256 tokenId) external view override returns (address[] memory) {\n        (, address masterChef, uint256 pid) = decodeId(tokenId);\n        IMasterChefWrapper wrapper = IMasterChefWrapper(masterChefWrappers[masterChef]);\n        return wrapper.getRewards(pid);\n    }\n\n    function getPendingRewardsForUser(\n        uint256 tokenId,\n        address user\n    ) external view override returns (address[] memory rewards, uint256[] memory amounts) {\n        PoolInfo storage pool = poolInfo[tokenId];\n        uint256 lpSupply = pool.lpSupply;\n        (, address masterChef, uint256 pid) = decodeId(tokenId);\n        uint256[] memory everyonesRewardAmounts;\n        (rewards, everyonesRewardAmounts) = IMasterChefWrapper(masterChefWrappers[masterChef]).getPendingRewards(pid);\n        amounts = new uint256[](rewards.length);\n        if (lpSupply > 0) {\n            for (uint256 i = 0; i < rewards.length; i++) {\n                address reward = rewards[i];\n                uint256 allocationPerShare = pool.rewardAllocationsPerShare[rewards[i]] +\n                    (everyonesRewardAmounts[i] * PRECISION) /\n                    lpSupply;\n                int256 accumulatedReward = int256((pool.userShares[user] * allocationPerShare) / PRECISION);\n                uint256 pendingReward = uint256(accumulatedReward - pool.rewardDebt[user][reward]);\n                amounts[i] = pendingReward;\n            }\n        }\n    }\n\n    function getPositionTokens(\n        uint256 tokenId,\n        address userAddress\n    ) external view override returns (address[] memory outTokens, uint256[] memory tokenAmounts) {\n        (address lpToken, , ) = decodeId(tokenId);\n        uint256 amount = balanceOf(userAddress, tokenId);\n        outTokens = new address[](1);\n        tokenAmounts = new uint256[](1);\n        outTokens[0] = lpToken;\n        tokenAmounts[0] = amount;\n    }\n\n    function _harvest(address masterChef, address lpToken, uint256 pid) internal {\n        IERC20(lpToken).safeIncreaseAllowance(masterChef, 10);\n        address masterChefWrapperAddress = masterChefWrappers[masterChef];\n        IMasterChefWrapper wrapper = IMasterChefWrapper(masterChefWrappers[masterChef]);\n        masterChefWrapperAddress.functionDelegateCall(\n            abi.encodeWithSelector(wrapper.harvest.selector, masterChef, pid)\n        );\n    }\n\n    function updateToken(uint256 tokenId) internal onlyAuthorized {\n        (address lpToken, address masterChef, uint256 pid) = decodeId(tokenId);\n        PoolInfo storage pool = poolInfo[tokenId];\n        uint256 lpSupply = pool.lpSupply;\n        if (lpSupply > 0) {\n            address[] memory rewards = IMasterChefWrapper(masterChefWrappers[masterChef]).getRewards(pid);\n            uint256[] memory rewardAmounts = new uint256[](rewards.length);\n            for (uint256 i = 0; i < rewards.length; i++) {\n                rewardAmounts[i] = IERC20(rewards[i]).balanceOf(address(this));\n            }\n            _harvest(masterChef, lpToken, pid);\n            for (uint256 i = 0; i < rewards.length; i++) {\n                rewardAmounts[i] = IERC20(rewards[i]).balanceOf(address(this)) - rewardAmounts[i];\n                pool.rewardAllocationsPerShare[rewards[i]] += (rewardAmounts[i] * PRECISION) / lpSupply;\n            }\n        }\n    }\n\n    function _deposit(address masterChef, uint256 pid, uint256 amount) internal {\n        address masterChefWrapper = masterChefWrappers[masterChef];\n        masterChefWrapper.functionDelegateCall(\n            abi.encodeWithSelector(IMasterChefWrapper.deposit.selector, masterChef, pid, amount)\n        );\n    }\n\n    function _withdraw(address masterChef, uint256 pid, uint256 amount) internal {\n        address masterChefWrapper = masterChefWrappers[masterChef];\n        masterChefWrapper.functionDelegateCall(\n            abi.encodeWithSelector(IMasterChefWrapper.withdraw.selector, masterChef, pid, amount)\n        );\n    }\n\n    function mint(\n        uint256 tokenId,\n        address userAddress,\n        address[] memory suppliedTokens,\n        uint256[] memory suppliedAmounts\n    ) public override onlyAuthorized returns (uint256) {\n        updateToken(tokenId);\n        (address lpToken, address masterChef, uint256 pid) = decodeId(tokenId);\n        require(lpToken == suppliedTokens[0], \"6\");\n        IERC20(lpToken).safeIncreaseAllowance(masterChef, suppliedAmounts[0]);\n        _deposit(masterChef, pid, suppliedAmounts[0]);\n        PoolInfo storage pool = poolInfo[tokenId];\n        pool.userShares[userAddress] += suppliedAmounts[0];\n        pool.lpSupply += suppliedAmounts[0];\n        address[] memory rewards = IMasterChefWrapper(masterChefWrappers[masterChef]).getRewards(pid);\n        for (uint256 i = 0; i < rewards.length; i++) {\n            address reward = rewards[i];\n            pool.rewardDebt[userAddress][reward] += int256(\n                (suppliedAmounts[0] * pool.rewardAllocationsPerShare[reward]) / PRECISION\n            );\n        }\n        _mint(userAddress, tokenId, suppliedAmounts[0], \"\");\n        emit Mint(tokenId, userAddress, suppliedAmounts[0]);\n        return suppliedAmounts[0];\n    }\n\n    function burn(\n        uint256 tokenId,\n        address userAddress,\n        uint256 amount,\n        address receiver\n    ) external override onlyAuthorized returns (address[] memory outTokens, uint256[] memory tokenAmounts) {\n        updateToken(tokenId);\n        (address lpToken, address masterChef, uint256 pid) = decodeId(tokenId);\n        PoolInfo storage pool = poolInfo[tokenId];\n        address[] memory rewards = IMasterChefWrapper(masterChefWrappers[masterChef]).getRewards(pid);\n        for (uint256 i = 0; i < rewards.length; i++) {\n            address reward = rewards[i];\n            pool.rewardDebt[userAddress][reward] -= int256(\n                (amount * pool.rewardAllocationsPerShare[reward]) / PRECISION\n            );\n        }\n        pool.userShares[userAddress] -= amount;\n        pool.lpSupply -= amount;\n        _withdraw(masterChef, pid, amount);\n        IERC20(lpToken).safeTransfer(receiver, amount);\n        _burn(userAddress, tokenId, amount);\n        emit Burn(tokenId, userAddress, amount, receiver);\n        outTokens = new address[](1);\n        tokenAmounts = new uint256[](1);\n        outTokens[0] = lpToken;\n        tokenAmounts[0] = amount;\n    }\n\n    function harvest(\n        uint256 tokenId,\n        address userAddress,\n        address receiver\n    ) external override onlyAuthorized returns (address[] memory rewardAddresses, uint256[] memory rewardAmounts) {\n        updateToken(tokenId);\n        PoolInfo storage pool = poolInfo[tokenId];\n        (, address masterChef, uint256 pid) = decodeId(tokenId);\n        address[] memory rewards = IMasterChefWrapper(masterChefWrappers[masterChef]).getRewards(pid);\n        rewardAddresses = new address[](rewards.length);\n        rewardAmounts = new uint256[](rewards.length);\n        for (uint256 i = 0; i < rewards.length; i++) {\n            address reward = rewards[i];\n            int256 accumulatedReward = int256(\n                (pool.userShares[userAddress] * pool.rewardAllocationsPerShare[reward]) / PRECISION\n            );\n            uint256 pendingReward = uint256(accumulatedReward - pool.rewardDebt[userAddress][reward]);\n            pool.rewardDebt[userAddress][reward] = accumulatedReward;\n            if (pendingReward != 0) {\n                IERC20(reward).safeTransfer(receiver, pendingReward);\n            }\n            rewardAddresses[i] = rewards[i];\n            rewardAmounts[i] = pendingReward;\n        }\n        emit Harvest(tokenId, userAddress, receiver);\n    }\n}\n"
    },
    "contracts/Banks/MasterChefWrappers.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"./BankBase.sol\";\nimport \"../interfaces/MasterChefInterfaces.sol\";\nimport \"../libraries/AddressArray.sol\";\nimport \"../libraries/UintArray.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"hardhat/console.sol\";\n\nabstract contract IMasterChefWrapper is Ownable {\n    using AddressArray for address[];\n    using UintArray for uint256[];\n    using Address for address;\n\n    event LPTokenAdded(address masterChef, address lpToken, uint256 poolId);\n\n    mapping(address => bool) public supportedLps;\n    mapping(address => uint256) public supportedLpIndices;\n    address public masterChef;\n    address public baseReward;\n    string public pendingRewardGetter;\n\n    function getRewards(uint256 pid) external view virtual returns (address[] memory) {\n        address[] memory rewards = new address[](1);\n        rewards[0] = baseReward;\n        return rewards;\n    }\n\n    function initialize() public virtual {\n        uint256 poolLength = IMasterChefV1(masterChef).poolLength();\n        for (uint256 i = 0; i < poolLength; i++) {\n            setSupported(i);\n        }\n    }\n\n    function setSupported(uint256 pid) public virtual {\n        address lpToken = getLpToken(pid);\n        supportedLpIndices[lpToken] = pid;\n        supportedLps[lpToken] = true;\n    }\n\n    function getIdFromLpToken(address lpToken) external view virtual returns (bool, uint256) {\n        if (!supportedLps[lpToken] || lpToken == baseReward) return (false, 0);\n        else return (true, supportedLpIndices[lpToken]);\n    }\n\n    function getPendingRewards(\n        uint256 pid\n    ) external view virtual returns (address[] memory rewards, uint256[] memory amounts) {\n        bytes memory returnData = masterChef.functionStaticCall(\n            abi.encodeWithSignature(pendingRewardGetter, pid, msg.sender)\n        );\n        uint256 pending = abi.decode(returnData, (uint256));\n        rewards = new address[](1);\n        rewards[0] = baseReward;\n        amounts = new uint256[](1);\n        amounts[0] = pending;\n    }\n\n    function getLpToken(uint256 pid) public view virtual returns (address);\n\n    function deposit(address masterChef, uint256 pid, uint256 amount) external virtual;\n\n    function withdraw(address masterChef, uint256 pid, uint256 amount) external virtual;\n\n    function harvest(address masterChef, uint256 pid) external virtual;\n}\n\ncontract MasterChefV1Wrapper is IMasterChefWrapper {\n    using AddressArray for address[];\n    using UintArray for uint256[];\n    using Address for address;\n\n    constructor(address _masterChef, address _baseReward, string memory _pendingRewardGetter) {\n        masterChef = _masterChef;\n        baseReward = _baseReward;\n        pendingRewardGetter = _pendingRewardGetter;\n        initialize();\n    }\n\n    // function getIdFromLpToken(address lpToken) override external view returns (bool, uint) {\n    //     uint poolLength = IMasterChefV1(masterChef).poolLength();\n    //     for (uint i = 0; i<poolLength; i++) {\n    //         IMasterChefV1.PoolInfo memory poolInfo = IMasterChefV1(masterChef).poolInfo(i);\n    //         if (poolInfo.lpToken==lpToken) {\n    //             return (true, i);\n    //         }\n    //     }\n    //     return (false, 0);\n    // }\n\n    function getLpToken(uint256 pid) public view override returns (address) {\n        IMasterChefV1.PoolInfo memory pool = IMasterChefV1(masterChef).poolInfo(pid);\n        return pool.lpToken;\n    }\n\n    function deposit(address masterChef, uint256 pid, uint256 amount) external override {\n        IMasterChefV1(masterChef).deposit(pid, amount);\n    }\n\n    function withdraw(address masterChef, uint256 pid, uint256 amount) external override {\n        IMasterChefV1(masterChef).withdraw(pid, amount);\n    }\n\n    function harvest(address masterChef, uint256 pid) external override {\n        IMasterChefV1(masterChef).withdraw(pid, 10);\n        IMasterChefV1(masterChef).deposit(pid, 10);\n    }\n}\n\ncontract MasterChefV2Wrapper is IMasterChefWrapper {\n    using AddressArray for address[];\n    using UintArray for uint256[];\n    using Address for address;\n    mapping(uint256 => address) extraRewards;\n\n    constructor(address _masterChef, address _baseReward, string memory _pendingRewardGetter) {\n        masterChef = _masterChef;\n        baseReward = _baseReward;\n        pendingRewardGetter = _pendingRewardGetter;\n        initialize();\n    }\n\n    // function getIdFromLpToken(address lpToken) override external view returns (bool, uint) {\n    //     uint poolLength = ISushiSwapMasterChefV2(masterChef).poolLength();\n    //     for (uint i = 0; i<poolLength; i++) {\n    //         if (ISushiSwapMasterChefV2(masterChef).lpToken(i)==lpToken) {\n    //             return (true, i);\n    //         }\n    //     }\n    //     return (false, 0);\n    // }\n\n    function getLpToken(uint256 pid) public view override returns (address) {\n        return ISushiSwapMasterChefV2(masterChef).lpToken(pid);\n    }\n\n    function getRewards(uint256 pid) external view override returns (address[] memory) {\n        address[] memory rewards = new address[](1);\n        rewards[0] = baseReward;\n        address rewarder = ISushiSwapMasterChefV2(masterChef).rewarder(pid);\n        if (rewarder != address(0)) {\n            (address[] memory tokens, ) = IRewarder(rewarder).pendingTokens(0, address(this), 0);\n            rewards = rewards.concat(tokens);\n        }\n        return rewards;\n    }\n\n    function getPendingRewards(\n        uint256 pid\n    ) external view override returns (address[] memory rewards, uint256[] memory rewardAmounts) {\n        bytes memory returnData = masterChef.functionStaticCall(\n            abi.encodeWithSignature(pendingRewardGetter, pid, msg.sender)\n        );\n        uint256 pending = abi.decode(returnData, (uint256));\n        rewards = new address[](1);\n        rewards[0] = baseReward;\n        rewardAmounts = new uint256[](1);\n        rewardAmounts[0] = pending;\n        address rewarder = ISushiSwapMasterChefV2(masterChef).rewarder(pid);\n        if (rewarder != address(0)) {\n            (address[] memory tokens, uint256[] memory amounts) = IRewarder(rewarder).pendingTokens(pid, msg.sender, 0);\n            rewards = rewards.concat(tokens);\n            rewardAmounts = rewardAmounts.concat(amounts);\n        }\n    }\n\n    function deposit(address masterChef, uint256 pid, uint256 amount) external override {\n        ISushiSwapMasterChefV2(masterChef).deposit(pid, amount, address(this));\n    }\n\n    function withdraw(address masterChef, uint256 pid, uint256 amount) external override {\n        ISushiSwapMasterChefV2(masterChef).withdraw(pid, amount, address(this));\n    }\n\n    function harvest(address masterChef, uint256 pid) external override {\n        try ISushiSwapMasterChefV2(masterChef).pendingSushi(pid, address(this)) returns (uint256) {\n            ISushiSwapMasterChefV2(masterChef).harvest(pid, address(this));\n        } catch {}\n    }\n}\n\ncontract PancakeSwapMasterChefV2Wrapper is IMasterChefWrapper {\n    using AddressArray for address[];\n    using UintArray for uint256[];\n    using Address for address;\n\n    constructor(address _masterChef, address _baseReward, string memory _pendingRewardGetter) {\n        masterChef = _masterChef;\n        baseReward = _baseReward;\n        pendingRewardGetter = _pendingRewardGetter;\n        initialize();\n    }\n\n    // function getIdFromLpToken(address lpToken) override external view returns (bool, uint) {\n    //     uint poolLength = IPancakeSwapMasterChefV2(masterChef).poolLength();\n    //     for (uint i = 0; i<poolLength; i++) {\n    //         if (IPancakeSwapMasterChefV2(masterChef).lpToken(i)==lpToken) {\n    //             return (true, i);\n    //         }\n    //     }\n    //     return (false, 0);\n    // }\n\n    function getLpToken(uint256 pid) public view override returns (address) {\n        return ISushiSwapMasterChefV2(masterChef).lpToken(pid);\n    }\n\n    function deposit(address masterChef, uint256 pid, uint256 amount) external override {\n        IMasterChefV1(masterChef).deposit(pid, amount);\n    }\n\n    function withdraw(address masterChef, uint256 pid, uint256 amount) external override {\n        IMasterChefV1(masterChef).withdraw(pid, amount);\n    }\n\n    function harvest(address masterChef, uint256 pid) external override {\n        IMasterChefV1(masterChef).withdraw(pid, 10);\n        IMasterChefV1(masterChef).deposit(pid, 10);\n    }\n}\n"
    },
    "contracts/BasicOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"./interfaces/IOracle.sol\";\nimport \"./interfaces/UniswapV2/IUniswapV2Factory.sol\";\nimport \"./interfaces/UniswapV2/IUniswapV2Pair.sol\";\nimport \"./interfaces/UniswapV3/IUniswapV3Factory.sol\";\nimport \"./interfaces/UniswapV3/IUniswapV3Pool.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./libraries/TickMath.sol\";\nimport \"hardhat/console.sol\";\n\ncontract UniswapV3Source is IOracle {\n    IUniswapV3Factory factory;\n    address[] commonPoolTokens;\n\n    constructor(address _factory, address[] memory _commonPoolTokens) {\n        factory = IUniswapV3Factory(_factory);\n        commonPoolTokens = _commonPoolTokens;\n    }\n\n    function getSqrtTwapX96(address uniswapV3Pool, uint32 twapInterval) public view returns (uint160 sqrtPriceX96) {\n        if (twapInterval == 0) {\n            (sqrtPriceX96, , , , , , ) = IUniswapV3Pool(uniswapV3Pool).slot0();\n        } else {\n            uint32[] memory secondsAgos = new uint32[](2);\n            secondsAgos[0] = twapInterval;\n            secondsAgos[1] = 0;\n            (int56[] memory tickCumulatives, ) = IUniswapV3Pool(uniswapV3Pool).observe(secondsAgos);\n            sqrtPriceX96 = TickMath.getSqrtRatioAtTick(\n                int24((tickCumulatives[1] - tickCumulatives[0]) / int56(uint56(twapInterval)))\n            );\n        }\n    }\n\n    function getPrice1X96FromSqrtPriceX96(\n        uint160 sqrtPriceX96,\n        uint256 decimals\n    ) public pure returns (uint256 priceX96) {\n        uint256 MAX_INT = 2 ** 256 - 1;\n        if (uint256(sqrtPriceX96) * uint256(sqrtPriceX96) > MAX_INT / 1e18) {\n            return decimals * ((uint256(sqrtPriceX96) * uint256(sqrtPriceX96)) >> (96 * 2));\n        } else {\n            return ((decimals * uint256(sqrtPriceX96) * uint256(sqrtPriceX96)) >> (96 * 2));\n        }\n    }\n\n    function getPrice0X96FromSqrtPriceX96(\n        uint160 sqrtPriceX96,\n        uint256 decimals\n    ) public pure returns (uint256 priceX96) {\n        return (decimals * 2 ** 192) / (uint256(sqrtPriceX96) ** 2);\n    }\n\n    function getMainPair(address token0, address token1) public view returns (address) {\n        uint16[4] memory availableFees = [100, 500, 3000, 10000];\n        uint256 maxLiquidity = 0;\n        address mainPool;\n        for (uint256 i = 0; i < availableFees.length; i++) {\n            address poolAddress = factory.getPool(token0, token1, availableFees[i]);\n            if (poolAddress != address(0)) {\n                uint256 liquidity = IUniswapV3Pool(poolAddress).liquidity();\n                if (liquidity > maxLiquidity) {\n                    maxLiquidity = liquidity;\n                    mainPool = poolAddress;\n                }\n            }\n        }\n        return mainPool;\n    }\n\n    function getPrice(address token, address inTermsOf) public view returns (uint256) {\n        address mainPool = getMainPair(token, inTermsOf);\n        if (mainPool != address(0)) {\n            IUniswapV3Pool pool = IUniswapV3Pool(mainPool);\n            uint160 sqrtTwapX96 = getSqrtTwapX96(mainPool, 60);\n            if (token == pool.token0()) {\n                return getPrice1X96FromSqrtPriceX96(sqrtTwapX96, uint256(10) ** ERC20(token).decimals());\n            } else {\n                return getPrice0X96FromSqrtPriceX96(sqrtTwapX96, uint256(10) ** ERC20(token).decimals());\n            }\n        }\n        for (uint256 i = 0; i < commonPoolTokens.length; i++) {\n            address poolAddress = getMainPair(token, commonPoolTokens[i]);\n            if (poolAddress != address(0)) {\n                IUniswapV3Pool pair = IUniswapV3Pool(poolAddress);\n                uint256 priceOfCommonPoolToken = getPrice(commonPoolTokens[i], inTermsOf);\n                uint256 priceIntermediate;\n                uint160 sqrtTwapX96 = getSqrtTwapX96(poolAddress, 60);\n                if (token == pair.token0()) {\n                    priceIntermediate = getPrice1X96FromSqrtPriceX96(\n                        sqrtTwapX96,\n                        uint256(10) ** ERC20(token).decimals()\n                    );\n                } else {\n                    priceIntermediate = getPrice0X96FromSqrtPriceX96(\n                        sqrtTwapX96,\n                        uint256(10) ** ERC20(token).decimals()\n                    );\n                }\n                return\n                    (priceIntermediate * priceOfCommonPoolToken) / uint256(10) ** ERC20(commonPoolTokens[i]).decimals();\n            }\n        }\n        return 0;\n    }\n}\n\ncontract UniswapV2Source is IOracle {\n    IUniswapV2Factory factory;\n    address[] commonPoolTokens;\n\n    constructor(address _factory, address[] memory _commonPoolTokens) {\n        factory = IUniswapV2Factory(_factory);\n        commonPoolTokens = _commonPoolTokens;\n    }\n\n    function getPrice(address token, address inTermsOf) public view returns (uint256) {\n        address poolAddress = factory.getPair(token, inTermsOf);\n        if (poolAddress != address(0)) {\n            IUniswapV2Pair pair = IUniswapV2Pair(poolAddress);\n            (uint256 r0, uint256 r1, ) = pair.getReserves();\n            if (token == pair.token0()) {\n                return ((r1 * uint256(10) ** ERC20(token).decimals()) / r0);\n            } else {\n                return ((r0 * uint256(10) ** ERC20(token).decimals()) / r1);\n            }\n        }\n        for (uint256 i = 0; i < commonPoolTokens.length; i++) {\n            poolAddress = factory.getPair(token, commonPoolTokens[i]);\n            if (poolAddress != address(0)) {\n                IUniswapV2Pair pair = IUniswapV2Pair(poolAddress);\n                uint256 priceOfCommonPoolToken = getPrice(commonPoolTokens[i], inTermsOf);\n                (uint256 r0, uint256 r1, ) = pair.getReserves();\n                uint256 priceIntermediate;\n                if (token == pair.token0()) {\n                    priceIntermediate = ((r1 * uint256(10) ** ERC20(token).decimals()) / r0);\n                } else {\n                    priceIntermediate = ((r0 * uint256(10) ** ERC20(token).decimals()) / r1);\n                }\n                return\n                    (priceIntermediate * priceOfCommonPoolToken) / uint256(10) ** ERC20(commonPoolTokens[i]).decimals();\n            }\n        }\n        return 0;\n    }\n}\n\ncontract BasicOracle is IOracle, Ownable {\n    IOracle[] public sources;\n\n    constructor(IOracle[] memory _sources) {\n        sources = _sources;\n    }\n\n    function setSources(IOracle[] memory _sources) external onlyOwner {\n        sources = _sources;\n    }\n\n    function _calculateMean(uint256[] memory prices) internal pure returns (uint256) {\n        uint256 total;\n        uint256 numPrices;\n        for (uint256 i = 0; i < prices.length; i++) {\n            if (prices[i] > 0) {\n                total += prices[i];\n                numPrices += 1;\n            }\n        }\n        require(numPrices > 0, \"5\");\n        return total / numPrices;\n    }\n\n    function getPrice(address token, address inTermsOf) external view returns (uint256) {\n        if (token == inTermsOf) return (10 ** ERC20(token).decimals());\n        uint256[] memory prices = new uint256[](sources.length);\n        for (uint256 i = 0; i < sources.length; i++) {\n            prices[i] = sources[i].getPrice(token, inTermsOf);\n        }\n        return _calculateMean(prices);\n    }\n\n    function getPrice2(address token, address inTermsOf) external returns (uint256) {\n        if (token == inTermsOf) return (10 ** ERC20(token).decimals());\n        uint256[] memory prices = new uint256[](sources.length);\n        for (uint256 i = 0; i < sources.length; i++) {\n            prices[i] = sources[i].getPrice(token, inTermsOf);\n        }\n        return _calculateMean(prices);\n    }\n}\n"
    },
    "contracts/interfaces/AAVE/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.17;\n\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n}\n"
    },
    "contracts/interfaces/AAVE/IAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IScaledBalanceToken} from \"./IScaledBalanceToken.sol\";\n\ninterface IAToken1 is IERC20 {\n    function redeem(uint256 _amount) external;\n}\n\ninterface IAToken2 is IERC20, IScaledBalanceToken {\n    /**\n     * @dev Emitted after the mint action\n     * @param from The address performing the mint\n     * @param value The amount being\n     * @param index The new liquidity index of the reserve\n     **/\n    event Mint(address indexed from, uint256 value, uint256 index);\n\n    /**\n     * @dev Mints `amount` aTokens to `user`\n     * @param user The address receiving the minted tokens\n     * @param amount The amount of tokens getting minted\n     * @param index The new liquidity index of the reserve\n     * @return `true` if the the previous balance of the user was 0\n     */\n    function mint(address user, uint256 amount, uint256 index) external returns (bool);\n\n    /**\n     * @dev Emitted after aTokens are burned\n     * @param from The owner of the aTokens, getting them burned\n     * @param target The address that will receive the underlying\n     * @param value The amount being burned\n     * @param index The new liquidity index of the reserve\n     **/\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\n\n    /**\n     * @dev Emitted during the transfer action\n     * @param from The user whose tokens are being transferred\n     * @param to The recipient\n     * @param value The amount being transferred\n     * @param index The new liquidity index of the reserve\n     **/\n    event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\n\n    /**\n     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n     * @param user The owner of the aTokens, getting them burned\n     * @param receiverOfUnderlying The address that will receive the underlying\n     * @param amount The amount being burned\n     * @param index The new liquidity index of the reserve\n     **/\n    function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\n\n    /**\n     * @dev Mints aTokens to the reserve treasury\n     * @param amount The amount of tokens getting minted\n     * @param index The new liquidity index of the reserve\n     */\n    function mintToTreasury(uint256 amount, uint256 index) external;\n\n    /**\n     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n     * @param from The address getting liquidated, current owner of the aTokens\n     * @param to The recipient\n     * @param value The amount of tokens getting transferred\n     **/\n    function transferOnLiquidation(address from, address to, uint256 value) external;\n\n    /**\n     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n     * assets in borrow(), withdraw() and flashLoan()\n     * @param user The recipient of the aTokens\n     * @param amount The amount getting transferred\n     * @return The amount transferred\n     **/\n    function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\n\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n\n    function underlyingAssetAddress() external view returns (address);\n}\n"
    },
    "contracts/interfaces/AAVE/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.17;\npragma experimental ABIEncoderV2;\n\nimport {ILendingPoolAddressesProvider} from \"./ILendingPoolAddressesProvider.sol\";\nimport {DataTypes} from \"./DataTypes.sol\";\n\ninterface ILendingPool1 {\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\n\n    function redeemUnderlying(\n        address _reserve,\n        address payable _user,\n        uint256 _amount,\n        uint256 _aTokenBalanceAfterRedeem\n    ) external;\n\n    function core() external returns (address);\n\n    function getReserveData(\n        address _reserve\n    )\n        external\n        view\n        returns (\n            uint256 totalLiquidity,\n            uint256 availableLiquidity,\n            uint256 totalBorrowsStable,\n            uint256 totalBorrowsVariable,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 utilizationRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            address aTokenAddress,\n            uint40 lastUpdateTimestamp\n        );\n}\n\ninterface ILendingPool2 {\n    /**\n     * @dev Emitted on deposit()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the deposit\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n     * @param amount The amount deposited\n     * @param referral The referral code used\n     **/\n    event Deposit(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlyng asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to Address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed\n     * @param referral The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 borrowRateMode,\n        uint256 borrowRate,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     **/\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint256 amount,\n        uint256 premium,\n        uint16 referralCode\n    );\n\n    /**\n     * @dev Emitted when the pause is triggered.\n     */\n    event Paused();\n\n    /**\n     * @dev Emitted when the pause is lifted.\n     */\n    event Unpaused();\n\n    /**\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n     * LendingPoolCollateral manager using a DELEGATECALL\n     * This allows to have the events in the generated ABI for LendingPool.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n     * gets added to the LendingPool ABI\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The new liquidity rate\n     * @param stableBorrowRate The new stable borrow rate\n     * @param variableBorrowRate The new variable borrow rate\n     * @param liquidityIndex The new liquidity index\n     * @param variableBorrowIndex The new variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\n    /**\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\n\n    /**\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n     * @param asset The address of the underlying asset borrowed\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n    /**\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n     *        borrowed at a stable rate and depositors are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n     * @param asset The address of the underlying asset deposited\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n     * For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts amounts being flash-borrowed\n     * @param modes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralETH the total collateral in ETH of the user\n     * @return totalDebtETH the total debt in ETH of the user\n     * @return availableBorrowsETH the borrowing power left of the user\n     * @return currentLiquidationThreshold the liquidation threshold of the user\n     * @return ltv the loan to value of the user\n     * @return healthFactor the current health factor of the user\n     **/\n    function getUserAccountData(\n        address user\n    )\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    function initReserve(\n        address reserve,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n    function setConfiguration(address reserve, uint256 configuration) external;\n\n    /**\n     * @dev Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @dev Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @dev Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state of the reserve\n     **/\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromAfter,\n        uint256 balanceToBefore\n    ) external;\n\n    function getReservesList() external view returns (address[] memory);\n\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n    function setPause(bool val) external;\n\n    function paused() external view returns (bool);\n}\n\nlibrary DataTypes3 {\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        //timestamp of last update\n        uint40 lastUpdateTimestamp;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint16 id;\n        //aToken address\n        address aTokenAddress;\n        //stableDebtToken address\n        address stableDebtTokenAddress;\n        //variableDebtToken address\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the current treasury balance, scaled\n        uint128 accruedToTreasury;\n        //the outstanding unbacked aTokens minted through the bridging feature\n        uint128 unbacked;\n        //the outstanding debt borrowed against this asset in isolation mode\n        uint128 isolationModeTotalDebt;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60: asset is paused\n        //bit 61: borrowing in isolation mode is enabled\n        //bit 62-63: reserved\n        //bit 64-79: reserve factor\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n        //bit 152-167 liquidation protocol fee\n        //bit 168-175 eMode category\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n        //bit 252-255 unused\n\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        /**\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\n         * asset is borrowed by the user.\n         */\n        uint256 data;\n    }\n\n    struct EModeCategory {\n        // each eMode category has a custom ltv and liquidation threshold\n        uint16 ltv;\n        uint16 liquidationThreshold;\n        uint16 liquidationBonus;\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n        address priceSource;\n        string label;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n\n    struct ReserveCache {\n        uint256 currScaledVariableDebt;\n        uint256 nextScaledVariableDebt;\n        uint256 currPrincipalStableDebt;\n        uint256 currAvgStableBorrowRate;\n        uint256 currTotalStableDebt;\n        uint256 nextAvgStableBorrowRate;\n        uint256 nextTotalStableDebt;\n        uint256 currLiquidityIndex;\n        uint256 nextLiquidityIndex;\n        uint256 currVariableBorrowIndex;\n        uint256 nextVariableBorrowIndex;\n        uint256 currLiquidityRate;\n        uint256 currVariableBorrowRate;\n        uint256 reserveFactor;\n        ReserveConfigurationMap reserveConfiguration;\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        uint40 reserveLastUpdateTimestamp;\n        uint40 stableDebtLastUpdateTimestamp;\n    }\n\n    struct ExecuteLiquidationCallParams {\n        uint256 reservesCount;\n        uint256 debtToCover;\n        address collateralAsset;\n        address debtAsset;\n        address user;\n        bool receiveAToken;\n        address priceOracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteSupplyParams {\n        address asset;\n        uint256 amount;\n        address onBehalfOf;\n        uint16 referralCode;\n    }\n\n    struct ExecuteBorrowParams {\n        address asset;\n        address user;\n        address onBehalfOf;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint16 referralCode;\n        bool releaseUnderlying;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteRepayParams {\n        address asset;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        address onBehalfOf;\n        bool useATokens;\n    }\n\n    struct ExecuteWithdrawParams {\n        address asset;\n        uint256 amount;\n        address to;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ExecuteSetUserEModeParams {\n        uint256 reservesCount;\n        address oracle;\n        uint8 categoryId;\n    }\n\n    struct FinalizeTransferParams {\n        address asset;\n        address from;\n        address to;\n        uint256 amount;\n        uint256 balanceFromBefore;\n        uint256 balanceToBefore;\n        uint256 reservesCount;\n        address oracle;\n        uint8 fromEModeCategory;\n    }\n\n    struct FlashloanParams {\n        address receiverAddress;\n        address[] assets;\n        uint256[] amounts;\n        uint256[] interestRateModes;\n        address onBehalfOf;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address addressesProvider;\n        uint8 userEModeCategory;\n        bool isAuthorizedFlashBorrower;\n    }\n\n    struct FlashloanSimpleParams {\n        address receiverAddress;\n        address asset;\n        uint256 amount;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n    }\n\n    struct FlashLoanRepaymentParams {\n        uint256 amount;\n        uint256 totalPremium;\n        uint256 flashLoanPremiumToProtocol;\n        address asset;\n        address receiverAddress;\n        uint16 referralCode;\n    }\n\n    struct CalculateUserAccountDataParams {\n        UserConfigurationMap userConfig;\n        uint256 reservesCount;\n        address user;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ValidateBorrowParams {\n        ReserveCache reserveCache;\n        UserConfigurationMap userConfig;\n        address asset;\n        address userAddress;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint256 maxStableLoanPercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n        bool isolationModeActive;\n        address isolationModeCollateralAddress;\n        uint256 isolationModeDebtCeiling;\n    }\n\n    struct ValidateLiquidationCallParams {\n        ReserveCache debtReserveCache;\n        uint256 totalDebt;\n        uint256 healthFactor;\n        address priceOracleSentinel;\n    }\n\n    struct CalculateInterestRatesParams {\n        uint256 unbacked;\n        uint256 liquidityAdded;\n        uint256 liquidityTaken;\n        uint256 totalStableDebt;\n        uint256 totalVariableDebt;\n        uint256 averageStableBorrowRate;\n        uint256 reserveFactor;\n        address reserve;\n        address aToken;\n    }\n\n    struct InitReserveParams {\n        address asset;\n        address aTokenAddress;\n        address stableDebtAddress;\n        address variableDebtAddress;\n        address interestRateStrategyAddress;\n        uint16 reservesCount;\n        uint16 maxNumberReserves;\n    }\n}\n\ninterface IPoolAddressesProvider {\n    /**\n     * @dev Emitted when the market identifier is updated.\n     * @param oldMarketId The old id of the market\n     * @param newMarketId The new id of the market\n     */\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n    /**\n     * @dev Emitted when the pool is updated.\n     * @param oldAddress The old address of the Pool\n     * @param newAddress The new address of the Pool\n     */\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the pool configurator is updated.\n     * @param oldAddress The old address of the PoolConfigurator\n     * @param newAddress The new address of the PoolConfigurator\n     */\n    event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the price oracle is updated.\n     * @param oldAddress The old address of the PriceOracle\n     * @param newAddress The new address of the PriceOracle\n     */\n    event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the ACL manager is updated.\n     * @param oldAddress The old address of the ACLManager\n     * @param newAddress The new address of the ACLManager\n     */\n    event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the ACL admin is updated.\n     * @param oldAddress The old address of the ACLAdmin\n     * @param newAddress The new address of the ACLAdmin\n     */\n    event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the price oracle sentinel is updated.\n     * @param oldAddress The old address of the PriceOracleSentinel\n     * @param newAddress The new address of the PriceOracleSentinel\n     */\n    event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the pool data provider is updated.\n     * @param oldAddress The old address of the PoolDataProvider\n     * @param newAddress The new address of the PoolDataProvider\n     */\n    event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when a new proxy is created.\n     * @param id The identifier of the proxy\n     * @param proxyAddress The address of the created proxy contract\n     * @param implementationAddress The address of the implementation contract\n     */\n    event ProxyCreated(bytes32 indexed id, address indexed proxyAddress, address indexed implementationAddress);\n\n    /**\n     * @dev Emitted when a new non-proxied contract address is registered.\n     * @param id The identifier of the contract\n     * @param oldAddress The address of the old contract\n     * @param newAddress The address of the new contract\n     */\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the implementation of the proxy registered with id is updated\n     * @param id The identifier of the contract\n     * @param proxyAddress The address of the proxy contract\n     * @param oldImplementationAddress The address of the old implementation contract\n     * @param newImplementationAddress The address of the new implementation contract\n     */\n    event AddressSetAsProxy(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address oldImplementationAddress,\n        address indexed newImplementationAddress\n    );\n\n    /**\n     * @notice Returns the id of the Aave market to which this contract points to.\n     * @return The market id\n     **/\n    function getMarketId() external view returns (string memory);\n\n    /**\n     * @notice Associates an id with a specific PoolAddressesProvider.\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n     * identify and validate multiple Aave markets.\n     * @param newMarketId The market id\n     */\n    function setMarketId(string calldata newMarketId) external;\n\n    /**\n     * @notice Returns an address by its identifier.\n     * @dev The returned address might be an EOA or a contract, potentially proxied\n     * @dev It returns ZERO if there is no registered address with the given id\n     * @param id The id\n     * @return The address of the registered for the specified id\n     */\n    function getAddress(bytes32 id) external view returns (address);\n\n    /**\n     * @notice General function to update the implementation of a proxy registered with\n     * certain `id`. If there is no proxy registered, it will instantiate one and\n     * set as implementation the `newImplementationAddress`.\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n     * setter function, in order to avoid unexpected consequences\n     * @param id The id\n     * @param newImplementationAddress The address of the new implementation\n     */\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\n\n    /**\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n     * @param id The id\n     * @param newAddress The address to set\n     */\n    function setAddress(bytes32 id, address newAddress) external;\n\n    /**\n     * @notice Returns the address of the Pool proxy.\n     * @return The Pool proxy address\n     **/\n    function getPool() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the Pool, or creates a proxy\n     * setting the new `pool` implementation when the function is called for the first time.\n     * @param newPoolImpl The new Pool implementation\n     **/\n    function setPoolImpl(address newPoolImpl) external;\n\n    /**\n     * @notice Returns the address of the PoolConfigurator proxy.\n     * @return The PoolConfigurator proxy address\n     **/\n    function getPoolConfigurator() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n     **/\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n    /**\n     * @notice Returns the address of the price oracle.\n     * @return The address of the PriceOracle\n     */\n    function getPriceOracle() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle.\n     * @param newPriceOracle The address of the new PriceOracle\n     */\n    function setPriceOracle(address newPriceOracle) external;\n\n    /**\n     * @notice Returns the address of the ACL manager.\n     * @return The address of the ACLManager\n     */\n    function getACLManager() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL manager.\n     * @param newAclManager The address of the new ACLManager\n     **/\n    function setACLManager(address newAclManager) external;\n\n    /**\n     * @notice Returns the address of the ACL admin.\n     * @return The address of the ACL admin\n     */\n    function getACLAdmin() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL admin.\n     * @param newAclAdmin The address of the new ACL admin\n     */\n    function setACLAdmin(address newAclAdmin) external;\n\n    /**\n     * @notice Returns the address of the price oracle sentinel.\n     * @return The address of the PriceOracleSentinel\n     */\n    function getPriceOracleSentinel() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle sentinel.\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n     **/\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n    /**\n     * @notice Returns the address of the data provider.\n     * @return The address of the DataProvider\n     */\n    function getPoolDataProvider() external view returns (address);\n\n    /**\n     * @notice Updates the address of the data provider.\n     * @param newDataProvider The address of the new DataProvider\n     **/\n    function setPoolDataProvider(address newDataProvider) external;\n}\n\n/**\n * @title IPool\n * @author Aave\n * @notice Defines the basic interface for an Aave Pool.\n **/\ninterface ILendingPool3 {\n    /**\n     * @dev Emitted on mintUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\n     * @param amount The amount of supplied assets\n     * @param referralCode The referral code used\n     **/\n    event MintUnbacked(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on backUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param backer The address paying for the backing\n     * @param amount The amount added as backing\n     * @param fee The amount paid in fees\n     **/\n    event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\n\n    /**\n     * @dev Emitted on supply()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\n     * @param amount The amount supplied\n     * @param referralCode The referral code used\n     **/\n    event Supply(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlying asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to The address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\n     * @param referralCode The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        DataTypes3.InterestRateMode interestRateMode,\n        uint256 borrowRate,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\n     **/\n    event Repay(\n        address indexed reserve,\n        address indexed user,\n        address indexed repayer,\n        uint256 amount,\n        bool useATokens\n    );\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     **/\n    event SwapBorrowRateMode(\n        address indexed reserve,\n        address indexed user,\n        DataTypes3.InterestRateMode interestRateMode\n    );\n\n    /**\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\n     * @param asset The address of the underlying asset of the reserve\n     * @param totalDebt The total isolation mode debt for the reserve\n     */\n    event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\n\n    /**\n     * @dev Emitted when the user selects a certain asset category for eMode\n     * @param user The address of the user\n     * @param categoryId The category id\n     **/\n    event UserEModeSet(address indexed user, uint8 categoryId);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address initiator,\n        address indexed asset,\n        uint256 amount,\n        DataTypes3.InterestRateMode interestRateMode,\n        uint256 premium,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted when a borrower is liquidated.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated.\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The next liquidity rate\n     * @param stableBorrowRate The next stable borrow rate\n     * @param variableBorrowRate The next variable borrow rate\n     * @param liquidityIndex The next liquidity index\n     * @param variableBorrowIndex The next variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\n     * @param reserve The address of the reserve\n     * @param amountMinted The amount minted to the treasury\n     **/\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\n\n    /**\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\n     * @param asset The address of the underlying asset to mint\n     * @param amount The amount to mint\n     * @param onBehalfOf The address that will receive the aTokens\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function mintUnbacked(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n    /**\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\n     * @param asset The address of the underlying asset to back\n     * @param amount The amount to back\n     * @param fee The amount paid in fees\n     **/\n    function backUnbacked(address asset, uint256 amount, uint256 fee) external;\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n    /**\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     **/\n    function supplyWithPermit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external;\n\n    /**\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to The address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\n    /**\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     * @return The final amount repaid\n     **/\n    function repayWithPermit(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external returns (uint256);\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\n     * equivalent debt tokens\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\n     * balance is not enough to cover the whole debt\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @return The final amount repaid\n     **/\n    function repayWithATokens(address asset, uint256 amount, uint256 interestRateMode) external returns (uint256);\n\n    /**\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\n     * @param asset The address of the underlying asset borrowed\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     **/\n    function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\n\n    /**\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\n     * @param asset The address of the underlying asset supplied\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts of the assets being flash-borrowed\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata interestRateModes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\n     * @param asset The address of the asset being flash-borrowed\n     * @param amount The amount of the asset being flash-borrowed\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n     * @return currentLiquidationThreshold The liquidation threshold of the user\n     * @return ltv The loan to value of The user\n     * @return healthFactor The current health factor of the user\n     **/\n    function getUserAccountData(\n        address user\n    )\n        external\n        view\n        returns (\n            uint256 totalCollateralBase,\n            uint256 totalDebtBase,\n            uint256 availableBorrowsBase,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    /**\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n     * interest rate strategy\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\n     **/\n    function initReserve(\n        address asset,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    /**\n     * @notice Drop a reserve\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     **/\n    function dropReserve(address asset) external;\n\n    /**\n     * @notice Updates the address of the interest rate strategy contract\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param rateStrategyAddress The address of the interest rate strategy contract\n     **/\n    function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;\n\n    /**\n     * @notice Sets the configuration bitmap of the reserve as a whole\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param configuration The new configuration bitmap\n     **/\n    function setConfiguration(address asset, DataTypes3.ReserveConfigurationMap calldata configuration) external;\n\n    /**\n     * @notice Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset) external view returns (DataTypes3.ReserveConfigurationMap memory);\n\n    /**\n     * @notice Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user) external view returns (DataTypes3.UserConfigurationMap memory);\n\n    /**\n     * @notice Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n     * @notice Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state and configuration data of the reserve\n     **/\n    function getReserveData(address asset) external view returns (DataTypes3.ReserveData memory);\n\n    /**\n     * @notice Validates and finalizes an aToken transfer\n     * @dev Only callable by the overlying aToken of the `asset`\n     * @param asset The address of the underlying asset of the aToken\n     * @param from The user from which the aTokens are transferred\n     * @param to The user receiving the aTokens\n     * @param amount The amount being transferred/withdrawn\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\n     */\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromBefore,\n        uint256 balanceToBefore\n    ) external;\n\n    /**\n     * @notice Returns the list of the underlying assets of all the initialized reserves\n     * @dev It does not include dropped reserves\n     * @return The addresses of the underlying assets of the initialized reserves\n     **/\n    function getReservesList() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes3.ReserveData struct\n     * @param id The id of the reserve as stored in the DataTypes3.ReserveData struct\n     * @return The address of the reserve associated with id\n     **/\n    function getReserveAddressById(uint16 id) external view returns (address);\n\n    /**\n     * @notice Returns the PoolAddressesProvider connected to this contract\n     * @return The address of the PoolAddressesProvider\n     **/\n    function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\n\n    /**\n     * @notice Updates the protocol fee on the bridging\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\n     */\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\n\n    /**\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\n     * - A part is sent to aToken holders as extra, one time accumulated interest\n     * - A part is collected by the protocol treasury\n     * @dev The total premium is calculated on the total borrowed amount\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\n     * @dev Only callable by the PoolConfigurator contract\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\n     */\n    function updateFlashloanPremiums(uint128 flashLoanPremiumTotal, uint128 flashLoanPremiumToProtocol) external;\n\n    /**\n     * @notice Configures a new category for the eMode.\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\n     * The category 0 is reserved as it's the default for volatile assets\n     * @param id The id of the category\n     * @param config The configuration of the category\n     */\n    function configureEModeCategory(uint8 id, DataTypes3.EModeCategory memory config) external;\n\n    /**\n     * @notice Returns the data of an eMode category\n     * @param id The id of the category\n     * @return The configuration data of the category\n     */\n    function getEModeCategoryData(uint8 id) external view returns (DataTypes3.EModeCategory memory);\n\n    /**\n     * @notice Allows a user to use the protocol in eMode\n     * @param categoryId The id of the category\n     */\n    function setUserEMode(uint8 categoryId) external;\n\n    /**\n     * @notice Returns the eMode the user is using\n     * @param user The address of the user\n     * @return The eMode id\n     */\n    function getUserEMode(address user) external view returns (uint256);\n\n    /**\n     * @notice Resets the isolation mode total debt of the given asset to zero\n     * @dev It requires the given asset has zero debt ceiling\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\n     */\n    function resetIsolationModeTotalDebt(address asset) external;\n\n    /**\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\n     * @return The percentage of available liquidity to borrow, expressed in bps\n     */\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\n\n    /**\n     * @notice Returns the total fee on flash loans\n     * @return The total fee on flashloans\n     */\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n\n    /**\n     * @notice Returns the part of the bridge fees sent to protocol\n     * @return The bridge fee sent to the protocol treasury\n     */\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\n\n    /**\n     * @notice Returns the part of the flashloan fees sent to protocol\n     * @return The flashloan fee sent to the protocol treasury\n     */\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\n\n    /**\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\n     * @return The maximum number of reserves supported\n     */\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\n\n    /**\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\n     * @param assets The list of reserves for which the minting needs to be executed\n     **/\n    function mintToTreasury(address[] calldata assets) external;\n\n    /**\n     * @notice Rescue and transfer tokens locked in this contract\n     * @param token The address of the token\n     * @param to The address of the recipient\n     * @param amount The amount of token to transfer\n     */\n    function rescueTokens(address token, address to, uint256 amount) external;\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @dev Deprecated: Use the `supply` function instead\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n}\n"
    },
    "contracts/interfaces/AAVE/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.17;\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n    event MarketIdSet(string newMarketId);\n    event LendingPoolUpdated(address indexed newAddress);\n    event ConfigurationAdminUpdated(address indexed newAddress);\n    event EmergencyAdminUpdated(address indexed newAddress);\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n    event PriceOracleUpdated(address indexed newAddress);\n    event LendingRateOracleUpdated(address indexed newAddress);\n    event ProxyCreated(bytes32 id, address indexed newAddress);\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n    function getMarketId() external view returns (string memory);\n\n    function setMarketId(string calldata marketId) external;\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function setAddressAsProxy(bytes32 id, address impl) external;\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getLendingPool() external view returns (address);\n\n    function setLendingPoolImpl(address pool) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n\n    function setLendingPoolConfiguratorImpl(address configurator) external;\n\n    function getLendingPoolCollateralManager() external view returns (address);\n\n    function setLendingPoolCollateralManager(address manager) external;\n\n    function getPoolAdmin() external view returns (address);\n\n    function setPoolAdmin(address admin) external;\n\n    function getEmergencyAdmin() external view returns (address);\n\n    function setEmergencyAdmin(address admin) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n\n    function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
    },
    "contracts/interfaces/AAVE/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.17;\n\ninterface IScaledBalanceToken {\n    /**\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\n     * @param user The user whose balance is calculated\n     * @return The scaled balance of the user\n     **/\n    function scaledBalanceOf(address user) external view returns (uint256);\n\n    /**\n     * @dev Returns the scaled balance of the user and the scaled total supply.\n     * @param user The address of the user\n     * @return The scaled balance of the user\n     * @return The scaled balance and the scaled total supply\n     **/\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n\n    /**\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n     * @return The scaled total supply\n     **/\n    function scaledTotalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/INFTPoolInteractor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\n/// @notice\n/// @param pool Address of liquidity pool\n/// @param manager NFT manager contract, such as uniswap V3 positions manager\n/// @param tokenId ID representing NFT\n/// @param liquidity Amount of liquidity, used when converting part of the NFT to some other asset\n/// @param data Data used when creating the NFT position, contains int24 tickLower, int24 tickUpper, uint minAmount0 and uint minAmount1\nstruct Asset {\n    address pool;\n    address manager;\n    uint tokenId;\n    uint liquidity;\n    bytes data;\n}\n\ninterface INFTPoolInteractor {\n    function burn(\n        Asset memory asset\n    ) external payable returns (address[] memory receivedTokens, uint256[] memory receivedTokenAmounts);\n\n    function mint(\n        Asset memory toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts,\n        address receiver\n    ) external payable returns (uint256);\n\n    function simulateMint(\n        Asset memory toMint,\n        address[] memory underlyingTokens,\n        uint[] memory underlyingAmounts\n    ) external view returns (uint);\n\n    function getRatio(address poolAddress, int24 tick0, int24 tick1) external view returns (uint, uint);\n\n    function testSupported(address token) external view returns (bool);\n\n    function testSupportedPool(address token) external view returns (bool);\n\n    function getUnderlyingAmount(\n        Asset memory nft\n    ) external view returns (address[] memory underlying, uint[] memory amounts);\n\n    function getUnderlyingTokens(address lpTokenAddress) external view returns (address[] memory);\n}\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\ninterface IOracle {\n    /// @notice Gives price of token in terms of another token\n    function getPrice(address token, address inTermsOf) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IPoolInteractor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libraries/SaferERC20.sol\";\nimport \"hardhat/console.sol\";\n\ninterface IPoolInteractor {\n    event Burn(address lpTokenAddress, uint256 amount);\n\n    function burn(\n        address lpTokenAddress,\n        uint256 amount,\n        address self\n    ) external payable returns (address[] memory, uint256[] memory);\n\n    function mint(\n        address toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts,\n        address receiver,\n        address self\n    ) external payable returns (uint256);\n\n    function simulateMint(\n        address toMint,\n        address[] memory underlyingTokens,\n        uint[] memory underlyingAmounts\n    ) external view returns (uint);\n\n    function testSupported(address lpToken) external view returns (bool);\n\n    function getUnderlyingAmount(\n        address lpTokenAddress,\n        uint amount\n    ) external view returns (address[] memory underlying, uint[] memory amounts);\n\n    function getUnderlyingTokens(address poolAddress) external view returns (address[] memory, uint[] memory);\n}\n"
    },
    "contracts/interfaces/IPositionsManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./IUniversalSwap.sol\";\r\n\r\n/// @notice Structure representing a liquidation condition\r\n/// @param watchedToken The token whose price needs to be watched\r\n/// @param liquidateTo The token that the position will be converted into\r\n/// @param lessThan Wether liquidation will happen when price is below or above liquidationPoint\r\n/// @param liquidationPoint Price of watchedToken in usd*10**18 at which liquidation should be trigerred\r\nstruct LiquidationCondition {\r\n    address watchedToken;\r\n    address liquidateTo;\r\n    bool lessThan;\r\n    uint liquidationPoint;\r\n    uint slippage;\r\n}\r\n\r\n/// @notice Structure representing a position\r\n/// @param user The user that owns this position\r\n/// @param bankId Bank ID in which the assets are deposited\r\n/// @param bankToken Token ID for the assets in the bank\r\n/// @param amount Size of the position\r\n/// @param liquidationPoints A list of conditions, where if any is not met, the position will be liquidated\r\nstruct Position {\r\n    address user;\r\n    address bank;\r\n    uint bankToken;\r\n    uint amount;\r\n    LiquidationCondition[] liquidationPoints;\r\n}\r\n\r\nstruct BankTokenInfo {\r\n    address lpToken;\r\n    address manager;\r\n    uint idInManager;\r\n}\r\n\r\n// struct PositionInteraction {\r\n//     string action;\r\n//     uint timestamp;\r\n//     uint blockNumber;\r\n//     Provided assets;\r\n//     uint usdValue;\r\n//     uint positionSizeChange;\r\n// }\r\n\r\nstruct PositionData {\r\n    Position position; // Position data such as bankId, bankToken, positionSize, etc.\r\n    BankTokenInfo bankTokenInfo; // The information about the banktoken from the bank\r\n    address[] underlyingTokens; // The underlying tokens for the token first deposited\r\n    uint[] underlyingAmounts; // Amounts for the aforementioned underlying tokens\r\n    uint[] underlyingValues; // The USD values of the underlying tokens\r\n    address[] rewardTokens; // Reward tokens generated for the position\r\n    uint[] rewardAmounts; // Amount of reward tokens that can be harvested\r\n    uint[] rewardValues; // Value of the reward tokens in USD\r\n    uint usdValue; // Combined net worth of the position\r\n}\r\n\r\ninterface IPositionsManager {\r\n    event Deposit(uint indexed positionId, uint amount, uint usdValue);\r\n    event IncreasePosition(uint indexed positionId, uint amount, uint usdValue);\r\n    event Withdraw(uint indexed positionId, uint amount, uint usdValue);\r\n    event PositionClose(uint indexed positionId, uint amount, uint usdValue);\r\n    event BotLiquidate(uint indexed positionId, uint amount, uint usdValue, uint liquidationIndex);\r\n    event Refund(uint indexed positionId, uint amount, uint usdValue, uint liquidationIndex);\r\n    event Harvest(uint indexed positionId, uint amount, uint usdValue);\r\n    event HarvestRecompound(uint indexed positionId, uint amount, uint usdValue);\r\n    \r\n    /// @notice Returns the address of universal swap\r\n    function universalSwap() external view returns (address networkToken);\r\n\r\n    /// @notice Returns the address of the wrapped network token\r\n    function networkToken() external view returns (address networkToken);\r\n\r\n    /// @notice Returns the address of the preferred stable token for the network\r\n    function stableToken() external view returns (address stableToken);\r\n\r\n    /// @notice Returns number of positions that have been opened\r\n    /// @return positions Number of positions that have been opened\r\n    function numPositions() external view returns (uint positions);\r\n\r\n    // /// @notice Returns a list of position interactions, each interaction is a two element array consisting of block number and interaction type\r\n    // /// @notice Interaction type 0 is deposit, 1 is withdraw, 2 is harvest, 3 is compound and 4 is bot liquidation\r\n    // /// @param positionId position ID\r\n    // /// @return interactions List of position interactions\r\n    // function getPositionInteractions(uint positionId) external view returns (PositionInteraction[] memory interactions);\r\n\r\n    /// @notice Returns number of banks\r\n    /// @return banks Addresses of banks\r\n    function getBanks() external view returns (address payable[] memory banks);\r\n\r\n    /// @notice Returns a list of position ids for the user\r\n    function getPositions(address user) external view returns (uint[] memory userPositions);\r\n\r\n    /// @notice Get position data for position id\r\n    function getPosition(uint positionId) external view returns (Position memory position);\r\n\r\n    /// @notice Set the address for the EOA that can be used to trigger liquidations\r\n    function setKeeper(address keeperAddress, bool active) external;\r\n\r\n    /// @notice Updates bank addresses\r\n    function setBanks(address payable[] memory _banks) external;\r\n\r\n    // /// @notice Get a position\r\n    // /// @param positionId position ID\r\n    // /// @return data Position details\r\n    // function getPosition(uint positionId) external returns (PositionData memory data);\r\n\r\n    /// @notice Get a list of banks and bank tokens that support the provided token\r\n    /// @dev bankToken for ERC721 banks is not supported and will always be 0\r\n    /// @param token The token for which to get supported banks\r\n    /// @return banks List of banks that support the token\r\n    /// @return bankTokens token IDs corresponding to the provided token for each of the banks\r\n    function recommendBank(address token) external view returns (address[] memory banks, uint[] memory bankTokens);\r\n\r\n    /// @notice Change the liquidation conditions for a position\r\n    /// @param positionId position ID\r\n    /// @param _liquidationPoints New list of liquidation conditions\r\n    function adjustLiquidationPoints(uint positionId, LiquidationCondition[] memory _liquidationPoints) external;\r\n\r\n    /// @notice Deposit into existing position\r\n    /// @dev Before calling, make sure PositionsManager contract has approvals according to suppliedAmounts\r\n    /// @param positionId position ID\r\n    /// @param provided Assets provided to deposit into position\r\n    /// @param swaps Swaps to conduct if provided assets do not match underlying for position\r\n    /// @param conversions Conversions to conduct if provided assets do not match underlying for position\r\n    /// @param minAmounts Slippage control, used when provided assets don't match the positions underlying\r\n    function depositInExisting(\r\n        uint positionId,\r\n        Provided memory provided,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions,\r\n        uint[] memory minAmounts\r\n    ) external payable;\r\n\r\n    /// @notice Create new position and deposit into it\r\n    /// @dev Before calling, make sure PositionsManager contract has approvals according to suppliedAmounts\r\n    /// @dev For creating an ERC721Bank position, suppliedTokens will contain the ERC721 contract and suppliedAmounts will contain the tokenId\r\n    /// @param position position details\r\n    /// @param suppliedTokens list of tokens supplied to increase the positions value\r\n    /// @param suppliedAmounts amounts supplied for each of the supplied tokens\r\n    function deposit(\r\n        Position memory position,\r\n        address[] memory suppliedTokens,\r\n        uint[] memory suppliedAmounts\r\n    ) external payable returns (uint);\r\n\r\n    /// @notice Withdraw from a position\r\n    /// @dev In case of ERC721Bank position, amount should be liquidity to withdraw like in UniswapV3PositionsManager\r\n    /// @param positionId position ID\r\n    /// @param amount amount to withdraw\r\n    function withdraw(uint positionId, uint amount) external;\r\n\r\n    /// @notice Withdraws all funds from a position\r\n    /// @dev Called by position owner or keepers or admin\r\n    /// @param positionId Position ID\r\n    /// @param liquidationIndex In case close is being called to refund user after order failure, this param specifies index of order\r\n    function close(uint positionId, uint liquidationIndex) external;\r\n\r\n    // /// @notice Estimates the net worth of the position in terms of another token\r\n    // /// @param positionId Position ID\r\n    // /// @return value Value of the position in terms of inTermsOf\r\n    // function estimateValue(uint positionId, address inTermsOf) external view returns (uint value);\r\n\r\n    // /// @notice Get the underlying tokens, amounts and corresponding usd values for a position\r\n    // function getPositionTokens(\r\n    //     uint positionId\r\n    // ) external view returns (address[] memory tokens, uint[] memory amounts, uint256[] memory values);\r\n\r\n    // /// @notice Get the rewards, rewad amounts and corresponding usd values that have been generated for a position\r\n    // function getPositionRewards(\r\n    //     uint positionId\r\n    // ) external view returns (address[] memory tokens, uint[] memory amounts, uint256[] memory rewardValues);\r\n\r\n    /// @notice Harvest and receive the rewards for a position\r\n    /// @param positionId Position ID\r\n    /// @return rewards List of tokens obtained as rewards\r\n    /// @return rewardAmounts Amount of tokens received as reward\r\n    function harvestRewards(uint positionId) external returns (address[] memory rewards, uint[] memory rewardAmounts);\r\n\r\n    /// @notice Harvest rewards for position and deposit them back to increase position value\r\n    /// @param positionId Position ID\r\n    /// @param swaps Swaps to conduct if harvested assets do not match underlying for position\r\n    /// @param conversions Conversions to conduct if harvested assets do not match underlying for position\r\n    /// @param minAmounts Slippage control, used when harvested assets don't match the positions underlying\r\n    /// @return newLpTokens Amount of new tokens added/increase in liquidity for position\r\n    function harvestAndRecompound(\r\n        uint positionId,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions,\r\n        uint[] memory minAmounts\r\n    ) external returns (uint newLpTokens);\r\n\r\n    /// @notice Liquidate a position that has violated some liquidation condition\r\n    /// @notice Can only be called by a keeper\r\n    /// @param positionId Position ID\r\n    /// @param liquidationIndex index of liquidation condition being triggered\r\n    /// @param liquidationFee ETH to be refunded to bot that triggered the liquidation\r\n    /// @param swaps Swaps to conduct to get desired asset from position\r\n    /// @param conversions Conversions to conduct to get desired asset from position\r\n    /// @param liquidationIndex Index of liquidation condition that is no longer satisfied\r\n    function botLiquidate(\r\n        uint positionId,\r\n        uint liquidationIndex,\r\n        uint liquidationFee,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions\r\n    ) external;\r\n\r\n    // /// @notice Check wether one of the liquidation conditions has become true\r\n    // /// @param positionId Position ID\r\n    // /// @return index Index of the liquidation condition that has become true\r\n    // /// @return liquidate Flag used to tell wether liquidation should be performed\r\n    // function checkLiquidate(uint positionId) external view returns (uint index, bool liquidate);\r\n}\r\n"
    },
    "contracts/interfaces/ISwapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\nimport \"../libraries/SwapFinder.sol\";\n\ninterface ISwapper {\n    event Burn(address holderAddress, uint256 amount);\n\n    function getCommonPoolTokens() external view returns (address[] memory);\n\n    function swap(uint256 amount, address[] memory path, address self) external payable returns (uint256);\n\n    function getAmountOut(uint256 amount, address[] memory path) external view returns (uint256);\n\n    function getAmountsOutWithPath(\n        uint256 amount,\n        address[] memory path,\n        uint[][][] memory amountsForSwaps,\n        SwapPoint[] memory priorSwaps\n    ) external view returns (uint256[] memory);\n\n    function checkSwappable(address token) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IUniversalSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\nimport \"./INFTPoolInteractor.sol\";\nimport \"../libraries/SwapFinder.sol\";\nimport \"../libraries/Conversions.sol\";\n// import \"../UniversalSwap/ProvidedHelper.sol\";\n// import \"../UniversalSwap/ConversionHelper.sol\";\n// import \"../UniversalSwap/SwapHelper.sol\";\n\nstruct Desired {\n    address[] outputERC20s;\n    Asset[] outputERC721s;\n    uint256[] ratios;\n    uint256[] minAmountsOut;\n}\n\nstruct Provided {\n    address[] tokens;\n    uint256[] amounts;\n    Asset[] nfts;\n}\n\n/// @title Interface for UniversalSwap utility\n/// @notice UniversalSwap allows trading between pool tokens and tokens tradeable on DEXes\ninterface IUniversalSwap {\n    /// Getters\n    function networkToken() external view returns (address tokenAddress);\n    function oracle() external view returns (address oracle);\n    function stableToken() external view returns (address stableToken);\n    function devFee() external view returns (uint devFee);\n    function treasury() external view returns (address treasury);\n    function getSwappers() external view returns (address[] memory swappers);\n    function getPoolInteractors() external view returns (address[] memory poolInteractors);\n    function getNFTPoolInteractors() external view returns (address[] memory nftPoolInteractors);\n\n    /// @notice Checks if a provided token is composed of other underlying tokens or not\n    function isSimpleToken(address token) external view returns (bool);\n\n    /// @notice Get the pool interactor for a token\n    function getProtocol(address token) external view returns (address);\n\n    /// @notice get values of provided tokens and amounts in terms of network token\n    function getTokenValues(\n        address[] memory tokens,\n        uint256[] memory tokenAmounts\n    ) external view returns (uint256[] memory values, uint256 total);\n\n    /// @notice Estimates the combined values of the provided tokens in terms of another token\n    /// @param assets ERC20 or ERC721 assets for whom the value needs to be estimated\n    /// @param inTermsOf Token whose value equivalent value to the provided tokens needs to be returned\n    /// @return value The amount of inTermsOf that is equal in value to the provided tokens\n    function estimateValue(Provided memory assets, address inTermsOf) external view returns (uint256 value);\n\n    /// @notice Checks if a provided token is swappable using UniversalSwap\n    /// @param token Address of token to be swapped or swapped for\n    /// @return supported Wether the provided token is supported or not\n    function isSupported(address token) external returns (bool supported);\n\n    /// @notice Estimates the value of a single ERC20 token in terms of another ERC20 token\n    function estimateValueERC20(address token, uint256 amount, address inTermsOf) external view returns (uint256 value);\n\n    /// @notice Estimates the value of an ECR721 token in terms of an ERC20 token\n    function estimateValueERC721(Asset memory nft, address inTermsOf) external view returns (uint256 value);\n\n    /// @notice Find the underlying tokens and amounts for some complex tokens\n    function getUnderlying(\n        Provided memory provided\n    ) external view returns (address[] memory underlyingTokens, uint256[] memory underlyingAmounts);\n\n    /// @notice Performs the pre swap computation and calculates the approximate amounts and corresponding usd values that can be expected from the swap\n    /// @return amounts Amounts of the desired assets that can be expected to be received during the actual swap\n    /// @return swaps Swaps that need to be performed with the provided assets\n    /// @return conversions List of conversions from simple ERC20 tokens to complex assets such as LP tokens, Uniswap v3 positions, etc\n    /// @return expectedUSDValues Expected usd values for the assets that can be expected from the swap\n    function getAmountsOut(\n        Provided memory provided,\n        Desired memory desired\n    )\n        external\n        view\n        returns (\n            uint256[] memory amounts,\n            SwapPoint[] memory swaps,\n            Conversion[] memory conversions,\n            uint256[] memory expectedUSDValues\n        );\n\n    /// @notice The pre swap computations can be performed off-chain much faster, hence this function was created as a faster alternative to getAmountsOut\n    /// @notice Calculates the expected amounts and usd values from a swap given the pre swap calculations\n    function getAmountsOutWithSwaps(\n        Provided memory provided,\n        Desired memory desired,\n        SwapPoint[] memory swaps,\n        Conversion[] memory conversions\n    ) external view returns (uint[] memory amounts, uint[] memory expectedUSDValues);\n\n    /// @notice Calculate the underlying tokens, amount and values for provided assets in a swap, as well\n    /// as the conversions needed to obtain desired assets along with the conversion underlying and the value that needs to be allocated to each underlying\n    /// @param provided List of provided ERC20/ERC721 assets provided to convert into the desired assets\n    /// @param desired Assets to convert provided assets into\n    /// @return tokens Tokens that can be obtained by breaking down complex assets in provided\n    /// @return amounts Amounts of tokens that will be obtained from breaking down provided assetts\n    /// @return values Worth of the amounts of tokens, in terms of usd or network token (not relevant which for purpose of swapping)\n    /// @return conversions Data structures representing the conversions that need to take place from simple assets to complex assets to obtain the desired assets\n    /// @return conversionUnderlying The simplest tokens needed in order to perform the previously mentioned conversions\n    /// @return conversionUnderlyingValues The values in terms of usd or network token that need to be allocated to each of the underlying tokens in order to perform the conversions\n    function preSwapCalculateUnderlying(\n        Provided memory provided,\n        Desired memory desired\n    )\n        external\n        view\n        returns (\n            address[] memory tokens,\n            uint256[] memory amounts,\n            uint256[] memory values,\n            Conversion[] memory conversions,\n            address[] memory conversionUnderlying,\n            uint256[] memory conversionUnderlyingValues\n        );\n\n    /// @notice Calculates the swaps and conversions that need to be performed prior to calling swap/swapAfterTransfer\n    /// @notice It is recommended to use this function and provide the return values to swap/swapAfterTransfer as that greatly reduces gas consumption\n    /// @return swaps Swaps that need to be performed with the provided assets\n    /// @return conversions List of conversions from simple ERC20 tokens to complex assets such as LP tokens, Uniswap v3 positions, etc\n    function preSwapCalculateSwaps(\n        Provided memory provided,\n        Desired memory desired\n    ) external view returns (SwapPoint[] memory swaps, Conversion[] memory conversions);\n\n    /// @notice Swap provided assets into desired assets\n    /// @dev Before calling, make sure UniversalSwap contract has approvals to transfer provided assets\n    /// @dev swaps ans conversions can be provided as empty list, in which case the contract will calculate them, but this will result in high gas usage\n    /// @param provided List of provided ERC20/ERC721 assets provided to convert into the desired assets\n    /// @param swaps Swaps that need to be performed with the provided assets\n    /// @param conversions List of conversions from simple ERC20 tokens to complex assets such as LP tokens, Uniswap v3 positions, etc\n    /// @param desired Assets to convert provided assets into\n    /// @param receiver Address that will receive output desired assets\n    /// @return amountsAndIds Amount of outputTokens obtained and Token IDs for output NFTs\n    function swap(\n        Provided memory provided,\n        SwapPoint[] memory swaps,\n        Conversion[] memory conversions,\n        Desired memory desired,\n        address receiver\n    ) external payable returns (uint256[] memory amountsAndIds);\n\n    /// @notice Functions just like swap, but assets are transferred to universal swap contract before calling this function rather than using approval\n    /// @notice Implemented as a way to save gas by eliminating needless transfers\n    /// @dev Before calling, make sure all assets in provided have been transferred to universal swap contract\n    /// @param provided List of provided ERC20/ERC721 assets provided to convert into the desired assets\n    /// @param swaps Swaps that need to be performed with the provided assets. Can be provided as empty list, in which case it will be calculated by the contract\n    /// @param conversions List of conversions from simple ERC20 tokens to complex assets such as LP tokens, Uniswap v3 positions, etc. Can be provided as empty list.\n    /// @param desired Assets to convert provided assets into\n    /// @param receiver Address that will receive output desired assets\n    /// @return amountsAndIds Amount of outputTokens obtained and Token IDs for output NFTs\n    function swapAfterTransfer(\n        Provided memory provided,\n        SwapPoint[] memory swaps,\n        Conversion[] memory conversions,\n        Desired memory desired,\n        address receiver\n    ) external payable returns (uint256[] memory amountsAndIds);\n\n    /// @notice Set swappers to allow interaction with different dexes\n    function setSwappers(address[] calldata _swappers) external;\n\n    /// @notice Set oracle\n    function setOracle(address _oracle) external;\n\n    /// @notice Set interactors for protocols\n    function setPoolInteractors(address[] calldata _poolInteractors) external;\n\n    /// @notice Set helpers for different tasks\n    /// @dev _coreLogic contains all the logic to receive burn, mint and swap assets\n    /// @dev _providedHelper contains logic for dealing with Provided structs\n    /// @dev _conversionHelper contains logic for dealing with Conversion structs\n    /// @dev _swapHelper contains pre swap logic for estimating return values from swaps and calculating optimal routes\n    function setHelpers(\n        address _coreLogic,\n        address _providedHelper,\n        address _conversionHelper,\n        address _swapHelper\n    ) external;\n\n    /// @notice Set interactors for uniswap v3 like protocols\n    function setNFTPoolInteractors(address[] calldata _nftPoolInteractors) external;\n\n    /// @notice Set dev fee for transactions\n    function setDevFee(uint _fee) external;\n\n    /// @notice Set treasury to receive fee from transactions\n    function setTreasury(address _treasury) external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\ninterface IWETH {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function allowance(address, address) external view returns (uint256);\n\n    receive() external payable;\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\n}\n"
    },
    "contracts/interfaces/MasterChefInterfaces.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\ninterface IMasterChefV1 {\n    struct PoolInfo {\n        address lpToken;\n        uint accSushiPerShare;\n        uint lastRewardBlock;\n        uint allocPoint;\n    }\n\n    function poolInfo(uint poolId) external view returns (PoolInfo memory);\n\n    function poolLength() external view returns (uint);\n\n    function totalAllocPoint() external view returns (uint);\n\n    function deposit(uint _pid, uint _amount) external;\n\n    function withdraw(uint _pid, uint _amount) external;\n}\n\ninterface IRewarder {\n    function rewardToken() external view returns (address);\n\n    function pendingToken(uint _pid, address _user) external view returns (uint);\n\n    function pendingTokens(\n        uint256 pid,\n        address user,\n        uint256 sushiAmount\n    ) external view returns (address[] memory, uint256[] memory);\n\n    function userInfo(uint pid, address user) external view returns (uint, uint, uint);\n}\n\ninterface ISushiSwapMasterChefV2 {\n    function lpToken(uint poolId) external view returns (address);\n\n    function poolLength() external view returns (uint);\n\n    function totalAllocPoint() external view returns (uint);\n\n    function deposit(uint _pid, uint _amount, address to) external;\n\n    function withdrawAndHarvest(uint _pid, uint _amount, address to) external;\n\n    function withdraw(uint _pid, uint _amount, address to) external;\n\n    function harvest(uint pid, address to) external;\n\n    function rewarder(uint pid) external view returns (address);\n\n    function userInfo(uint pid, address user) external view returns (uint, int);\n\n    function pendingSushi(uint pid, address user) external view returns (uint);\n}\n\ninterface IPancakeSwapMasterChefV2 is ISushiSwapMasterChefV2 {\n    struct PoolInfo {\n        uint accCakePerShare;\n        uint lastRewardBlock;\n        uint allocPoint;\n        uint totalBoostedShare;\n        bool isRegular;\n    }\n\n    function poolInfo(uint _pid) external view returns (PoolInfo memory);\n}\n"
    },
    "contracts/interfaces/UniswapV2/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/UniswapV2/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/UniswapV2/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint amountOut,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    \n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountOut);\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/UniswapV3/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"./Interfaces.sol\";\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(\n        uint256 tokenId\n    )\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(\n        MintParams calldata params\n    ) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(\n        IncreaseLiquidityParams calldata params\n    ) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(\n        DecreaseLiquidityParams calldata params\n    ) external payable returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/interfaces/UniswapV3/Interfaces.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(address tokenA, address tokenB, uint24 fee) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                            POOL_INIT_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external payable;\n}\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(address token, uint256 amountMinimum, address recipient) external payable;\n}\n"
    },
    "contracts/interfaces/UniswapV3/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\n}\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/interfaces/UniswapV3/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/interfaces/UniswapV3/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./pool/IUniswapV3PoolImmutables.sol\";\nimport \"./pool/IUniswapV3PoolState.sol\";\nimport \"./pool/IUniswapV3PoolDerivedState.sol\";\nimport \"./pool/IUniswapV3PoolActions.sol\";\nimport \"./pool/IUniswapV3PoolOwnerActions.sol\";\nimport \"./pool/IUniswapV3PoolEvents.sol\";\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "contracts/interfaces/UniswapV3/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "contracts/interfaces/UniswapV3/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(\n        uint32[] calldata secondsAgos\n    ) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(\n        int24 tickLower,\n        int24 tickUpper\n    ) external view returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside);\n}\n"
    },
    "contracts/interfaces/UniswapV3/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/interfaces/UniswapV3/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "contracts/interfaces/UniswapV3/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/interfaces/UniswapV3/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(\n        int24 tick\n    )\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(\n        bytes32 key\n    )\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(\n        uint256 index\n    )\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "contracts/interfaces/Venus/IVToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\ninterface IVToken {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function mint() external payable;\n\n    function mintBehalf(address receiver, uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function transfer(address dst, uint amount) external returns (bool);\n\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\n\n    function approve(address spender, uint amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function balanceOfUnderlying(address owner) external returns (uint);\n\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n\n    function borrowRatePerBlock() external view returns (uint);\n\n    function supplyRatePerBlock() external view returns (uint);\n\n    function totalBorrowsCurrent() external returns (uint);\n\n    function borrowBalanceCurrent(address account) external returns (uint);\n\n    function exchangeRateStored() external view returns (uint);\n\n    function totalSupply() external view returns (uint);\n\n    function isVToken() external view returns (bool);\n}\n"
    },
    "contracts/libraries/AddressArray.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\nimport \"hardhat/console.sol\";\n\nlibrary AddressArray {\n    function concat(address[] memory self, address[] memory array) internal pure returns (address[] memory) {\n        address[] memory newArray = new address[](self.length + array.length);\n        for (uint i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        for (uint i = 0; i < array.length; i++) {\n            newArray[i + self.length] = array[i];\n        }\n        return newArray;\n    }\n\n    function append(address[] memory self, address element) internal pure returns (address[] memory) {\n        address[] memory newArray = new address[](self.length + 1);\n        for (uint i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        newArray[self.length] = element;\n        return newArray;\n    }\n\n    function remove(address[] memory self, uint index) internal pure returns (address[] memory newArray) {\n        newArray = new address[](self.length - 1);\n        uint elementsAdded;\n        for (uint i = 0; i < self.length; i++) {\n            if (i != index) {\n                newArray[elementsAdded] = self[i];\n                elementsAdded += 1;\n            }\n        }\n        return newArray;\n    }\n\n    function findAll(address[] memory self, address toFind) internal pure returns (uint[] memory) {\n        uint[] memory indices;\n        uint numMatching;\n        for (uint i = 0; i < self.length; i++) {\n            if (self[i] == toFind) {\n                numMatching += 1;\n            }\n        }\n        if (numMatching == 0) {\n            return indices;\n        }\n        indices = new uint[](numMatching);\n        uint numPushed = 0;\n        for (uint i = 0; i < self.length; i++) {\n            if (self[i] == toFind) {\n                indices[numPushed] = i;\n                numPushed += 1;\n                if (numPushed == numMatching) {\n                    return indices;\n                }\n            }\n        }\n        return indices;\n    }\n\n    function findFirst(address[] memory self, address toFind) internal pure returns (uint) {\n        for (uint i = 0; i < self.length; i++) {\n            if (self[i] == toFind) {\n                return i;\n            }\n        }\n        return self.length;\n    }\n\n    function exists(address[] memory self, address toFind) internal pure returns (bool) {\n        for (uint i = 0; i < self.length; i++) {\n            if (self[i] == toFind) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function shrink(\n        address[] memory self,\n        uint[] memory amounts\n    ) internal pure returns (address[] memory shrunkTokens, uint[] memory shrunkAmounts) {\n        uint[] memory toRemove = new uint[](self.length);\n        for (uint i = 0; i < self.length; i++) {\n            for (uint j = i; j < self.length; j++) {\n                if (j > i && self[i] == self[j]) {\n                    amounts[i] = amounts[i] + amounts[j];\n                    amounts[j] = 0;\n                    toRemove[j] = 1;\n                }\n            }\n        }\n        uint shrunkSize;\n        for (uint i = 0; i < self.length; i++) {\n            if (amounts[i] > 0) {\n                shrunkSize += 1;\n            }\n        }\n        shrunkTokens = new address[](shrunkSize);\n        shrunkAmounts = new uint[](shrunkSize);\n        uint tokensAdded;\n        for (uint i = 0; i < self.length; i++) {\n            if (amounts[i] > 0) {\n                shrunkTokens[tokensAdded] = self[i];\n                shrunkAmounts[tokensAdded] = amounts[i];\n                tokensAdded += 1;\n            }\n        }\n    }\n\n    function equal(address[] memory array1, address[] memory array2) internal pure returns (bool) {\n        if (array1.length != array2.length) return false;\n        for (uint i = 0; i < array1.length; i++) {\n            bool matchFound = false;\n            for (uint j = 0; j < array2.length; j++) {\n                if (array1[i] == array2[j]) {\n                    matchFound = true;\n                    break;\n                }\n            }\n            if (!matchFound) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function copy(address[] memory self) internal pure returns (address[] memory copied) {\n        copied = new address[](self.length);\n        for (uint i = 0; i < self.length; i++) {\n            copied[i] = self[i];\n        }\n    }\n\n    function log(address[] memory self) internal view {\n        console.log(\"-------------------address array-------------------\");\n        for (uint i = 0; i < self.length; i++) {\n            console.log(i, self[i]);\n        }\n    }\n}\n"
    },
    "contracts/libraries/Conversions.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"../interfaces/INFTPoolInteractor.sol\";\nimport \"./AddressArray.sol\";\nimport \"./UintArray.sol\";\nimport \"hardhat/console.sol\";\n\nstruct Conversion {\n    Asset desiredERC721;\n    address desiredERC20;\n    uint256 value;\n    address[] underlying;\n    uint256[] underlyingValues;\n}\n\nlibrary Conversions {\n    using AddressArray for address[];\n    using UintArray for uint256[];\n\n    function append(\n        Conversion[] memory self,\n        Conversion memory conversion\n    ) internal pure returns (Conversion[] memory) {\n        Conversion[] memory newArray = new Conversion[](self.length + 1);\n        for (uint256 i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        newArray[self.length] = conversion;\n        return newArray;\n    }\n\n    function concat(Conversion[] memory self, Conversion[] memory array) internal pure returns (Conversion[] memory) {\n        Conversion[] memory newArray = new Conversion[](self.length + array.length);\n        for (uint256 i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        for (uint256 i = 0; i < array.length; i++) {\n            newArray[i + self.length] = array[i];\n        }\n        return newArray;\n    }\n\n    function getUnderlying(\n        Conversion[] memory self\n    ) internal pure returns (address[] memory underlying, uint256[] memory underlyingValues) {\n        for (uint256 i = 0; i < self.length; i++) {\n            for (uint256 j = 0; j < self[i].underlying.length; j++) {\n                if (_isBasic(self, self[i].underlying[j])) {\n                    underlying = underlying.append(self[i].underlying[j]);\n                    underlyingValues = underlyingValues.append(self[i].underlyingValues[j]);\n                }\n            }\n        }\n    }\n\n    function findAllBasic(Conversion[] memory self, address toFind) internal pure returns (uint256[] memory) {\n        uint256[] memory indices;\n        uint256 numMatching;\n        for (uint256 i = 0; i < self.length; i++) {\n            if (self[i].desiredERC20 == toFind && self[i].underlying.length == 0) {\n                numMatching += 1;\n            }\n        }\n        if (numMatching == 0) {\n            return indices;\n        }\n        indices = new uint256[](numMatching);\n        uint256 numPushed = 0;\n        for (uint256 i = 0; i < self.length; i++) {\n            if (self[i].desiredERC20 == toFind && self[i].underlying.length == 0) {\n                indices[numPushed] = i;\n                numPushed += 1;\n                if (numPushed == numMatching) {\n                    return indices;\n                }\n            }\n        }\n        return indices;\n    }\n\n    function findAllWithUnderlying(\n        Conversion[] memory self,\n        address underlying\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory indices;\n        for (uint256 i = 0; i < self.length; i++) {\n            if (self[i].underlying.exists(underlying)) {\n                indices = indices.append(i);\n            }\n        }\n        return indices;\n    }\n\n    function findUnderlyingOrFinal(Conversion[] memory self, address token) internal pure returns (uint256[] memory) {\n        uint256[] memory indices;\n        for (uint256 i = 0; i < self.length; i++) {\n            if (self[i].underlying.exists(token) || self[i].desiredERC20 == token) {\n                indices = indices.append(i);\n            }\n        }\n        return indices;\n    }\n\n    function _isBasic(Conversion[] memory conversions, address token) internal pure returns (bool) {\n        for (uint256 i = 0; i < conversions.length; i++) {\n            if (conversions[i].desiredERC20 == token && conversions[i].underlying[0] != token) return false;\n        }\n        return true;\n    }\n\n    function sumAll(Conversion[] memory conversions, address token) internal pure returns (uint256 sum) {\n        for (uint256 i = 0; i < conversions.length; i++) {\n            uint256 underlyingIdx = conversions[i].underlying.findFirst(token);\n            if (\n                underlyingIdx != conversions[i].underlying.length && conversions[i].underlying[underlyingIdx] == token\n            ) {\n                sum += conversions[i].underlyingValues[underlyingIdx];\n            }\n        }\n    }\n\n    function sumPrior(Conversion[] memory conversions, uint256 idx, address token) internal pure returns (uint256 sum) {\n        for (uint256 i = 0; i <= idx; i++) {\n            if (conversions[i].desiredERC20 == token) {\n                sum += conversions[i].value;\n                continue;\n            }\n            uint256 underlyingIdx = conversions[i].underlying.findFirst(token);\n            if (underlyingIdx != conversions[i].underlying.length) {\n                sum -= conversions[i].underlyingValues[underlyingIdx];\n            }\n        }\n    }\n\n    function sumAfter(Conversion[] memory conversions, uint256 idx, address token) internal pure returns (uint256 sum) {\n        for (uint256 i = idx; i < conversions.length; i++) {\n            uint256 underlyingIdx = conversions[i].underlying.findFirst(token);\n            if (underlyingIdx != conversions[i].underlying.length) {\n                sum += conversions[i].underlyingValues[underlyingIdx];\n            }\n        }\n    }\n\n    function normalizeRatios(Conversion[] memory self) internal pure returns (Conversion[] memory) {\n        for (uint256 i = 0; i < self.length; i++) {\n            for (uint256 j = 0; j < self[i].underlying.length; j++) {\n                if (!_isBasic(self, self[i].underlying[j])) continue;\n                uint256 sum = sumAfter(self, i, self[i].underlying[j]);\n                self[i].underlyingValues[j] = sum > 0 ? (self[i].underlyingValues[j] * 1e18) / sum : 1e18;\n            }\n        }\n        for (uint256 i = 0; i < self.length; i++) {\n            for (uint256 j = 0; j < self[i].underlying.length; j++) {\n                if (_isBasic(self, self[i].underlying[j])) continue;\n                uint256 sum = sumPrior(self, i, self[i].underlying[j]);\n                self[i].underlyingValues[j] = sum > 0 ? (self[i].underlyingValues[j] * 1e18) / sum : 1e18;\n            }\n        }\n        return self;\n    }\n}\n"
    },
    "contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos = (0 - denominator) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}"
    },
    "contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './FullMath.sol';\nimport './FixedPoint96.sol';\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        unchecked {\n            return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n        }\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        unchecked {\n            return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n        }\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            return\n                FullMath.mulDiv(\n                    uint256(liquidity) << FixedPoint96.RESOLUTION,\n                    sqrtRatioBX96 - sqrtRatioAX96,\n                    sqrtRatioBX96\n                ) / sqrtRatioAX96;\n        }\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        unchecked {\n            return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n        }\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    function max(uint x, uint y) internal pure returns (uint z) {\n        z = x > y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/SaferERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title SaferERC20\n * @dev Wrapper around the safe increase allowance SafeERC20 operation that fails for usdt\n * when the allowance is non zero.\n * To use this library you can add a `using SaferERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SaferERC20 {\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        token.safeTransfer(to, value);\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        token.safeTransferFrom(from, to, value);\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        token.safeApprove(spender, value);\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint currentAllowance = token.allowance(address(this), spender);\n        uint256 newAllowance = currentAllowance + value;\n        (bool success, ) = address(token).call(abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        if (!success) {\n            if (currentAllowance > 0) {\n                token.safeDecreaseAllowance(spender, currentAllowance);\n                token.safeApprove(spender, value);\n            }\n        }\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        token.safeDecreaseAllowance(spender, value);\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n}\n"
    },
    "contracts/libraries/StringArray.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\nlibrary StringArray {\n    function concat(string[] memory self, string[] memory array) internal pure returns (string[] memory) {\n        string[] memory newArray = new string[](self.length + array.length);\n        for (uint i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        for (uint i = 0; i < array.length; i++) {\n            newArray[i + self.length] = array[i];\n        }\n        return newArray;\n    }\n\n    function append(string[] memory self, string memory element) internal pure returns (string[] memory) {\n        string[] memory newArray = new string[](self.length + 1);\n        for (uint i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        newArray[self.length] = element;\n        return newArray;\n    }\n}\n"
    },
    "contracts/libraries/SwapFinder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"./AddressArray.sol\";\nimport \"hardhat/console.sol\";\n\nstruct SwapPoint {\n    uint256 amountIn;\n    uint256 valueIn;\n    uint256 amountOut;\n    uint256 valueOut;\n    int256 slippage;\n    address tokenIn;\n    address[] swappers;\n    address tokenOut;\n    address[][] paths;\n}\n\nlibrary SwapFinder {\n    using AddressArray for address[];\n\n    function sort(SwapPoint[] memory self) internal pure returns (SwapPoint[] memory sorted) {\n        sorted = new SwapPoint[](self.length);\n        for (uint256 i = 0; i < self.length; i++) {\n            int256 minSlippage = 2 ** 128 - 1;\n            uint256 minSlippageIndex = 0;\n            for (uint256 j = 0; j < self.length; j++) {\n                if (self[j].slippage < minSlippage) {\n                    minSlippageIndex = j;\n                    minSlippage = self[j].slippage;\n                }\n            }\n            sorted[i] = self[minSlippageIndex];\n            self[minSlippageIndex].slippage = 2 ** 128 - 1;\n        }\n    }\n\n    function append(\n        SwapPoint[] memory self,\n        SwapPoint memory swap\n    ) internal pure returns (SwapPoint[] memory newSwaps) {\n        newSwaps = new SwapPoint[](self.length + 1);\n        for (uint i = 0; i < self.length; i++) {\n            newSwaps[i] = self[i];\n        }\n        newSwaps[self.length] = swap;\n        return newSwaps;\n    }\n\n    struct StackMinimizingStruct {\n        uint256 valueIn;\n        uint256 toConvertIndex;\n        uint256 convertToIndex;\n    }\n\n    struct StackMinimizingStruct2 {\n        uint256[] valuesUsed;\n        uint256[] valuesProvided;\n        uint256 swapsAdded;\n    }\n\n    function findBestSwaps(\n        SwapPoint[] memory self,\n        address[] memory toConvert,\n        uint256[] memory valuesToConvert,\n        uint256[] memory amountsToConvert,\n        address[] memory convertTo,\n        uint256[] memory wantedValues\n    ) internal pure returns (SwapPoint[] memory swaps) {\n        SwapPoint[] memory bestSwaps = new SwapPoint[](self.length);\n        StackMinimizingStruct2 memory data2 = StackMinimizingStruct2(\n            new uint256[](toConvert.length),\n            new uint256[](wantedValues.length),\n            0\n        );\n        for (uint256 i = 0; i < self.length; i++) {\n            StackMinimizingStruct memory data = StackMinimizingStruct(\n                self[i].valueIn,\n                toConvert.findFirst(self[i].tokenIn),\n                convertTo.findFirst(self[i].tokenOut)\n            );\n            if (self[i].tokenIn == address(0) || self[i].tokenOut == address(0)) continue;\n            if (\n                data2.valuesUsed[data.toConvertIndex] < valuesToConvert[data.toConvertIndex] &&\n                data2.valuesProvided[data.convertToIndex] < wantedValues[data.convertToIndex]\n            ) {\n                uint256 valueInAdjusted;\n                {\n                    uint256 moreValueInAvailable = valuesToConvert[data.toConvertIndex] -\n                        data2.valuesUsed[data.toConvertIndex];\n                    uint256 moreValueOutNeeded = wantedValues[data.convertToIndex] -\n                        data2.valuesProvided[data.convertToIndex];\n                    valueInAdjusted = moreValueInAvailable >= data.valueIn ? data.valueIn : moreValueInAvailable;\n                    if (valueInAdjusted > moreValueOutNeeded) {\n                        valueInAdjusted = moreValueOutNeeded;\n                    }\n                }\n                self[i].amountIn =\n                    (valueInAdjusted * amountsToConvert[data.toConvertIndex]) /\n                    valuesToConvert[data.toConvertIndex];\n                self[i].valueIn = valueInAdjusted;\n                self[i].valueOut = (valueInAdjusted * self[i].valueOut) / self[i].valueIn;\n                self[i].amountOut = (valueInAdjusted * self[i].amountOut) / self[i].valueIn;\n                bestSwaps[data2.swapsAdded] = self[i];\n                data2.swapsAdded += 1;\n                data2.valuesUsed[data.toConvertIndex] += valueInAdjusted;\n                data2.valuesProvided[data.convertToIndex] += valueInAdjusted;\n                continue;\n            }\n        }\n        uint256 numSwaps = 0;\n        for (uint256 i = 0; i < bestSwaps.length; i++) {\n            if (bestSwaps[i].tokenIn != address(0) && bestSwaps[i].amountIn > 0) {\n                numSwaps += 1;\n            }\n        }\n        swaps = new SwapPoint[](numSwaps);\n        uint256 swapsAdded;\n        for (uint256 i = 0; i < bestSwaps.length; i++) {\n            if (bestSwaps[i].tokenIn != address(0) && bestSwaps[i].amountIn > 0) {\n                swaps[swapsAdded] = bestSwaps[i];\n                swapsAdded += 1;\n            }\n        }\n        for (uint256 i = 0; i < swaps.length; i++) {\n            swaps[i].amountIn = (1e18 * swaps[i].amountIn) / amountsToConvert[toConvert.findFirst(swaps[i].tokenIn)];\n        }\n        return swaps;\n    }\n\n    function log(SwapPoint memory self) internal view {\n        console.log(\"Swapping \", self.tokenIn, \" for \", self.tokenOut);\n        console.log(\"Amount in: \", self.amountIn, \" Value in: \", self.valueIn);\n        console.log(\"Amount out: \", self.amountOut, \" Value out: \", self.valueOut);\n        console.log(\"Swappers used:\");\n        for (uint i = 0; i < self.swappers.length; i++) {\n            console.log(self.swappers[i]);\n            console.log(\"Path used:\");\n            for (uint j = 0; j < self.paths[i].length; j++) {\n                console.log(self.paths[i][j]);\n            }\n            console.log(\"___________________\");\n        }\n    }\n\n    function log(SwapPoint[] memory self) internal view {\n        for (uint i = 0; i < self.length; i++) {\n            log(self[i]);\n        }\n    }\n}\n"
    },
    "contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    error T();\n    error R();\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\n\n            uint256 ratio = absTick & 0x1 != 0\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\n                : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {\n            // second inequality must be < because the price can never reach the price at the max tick\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}"
    },
    "contracts/libraries/UintArray.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\nimport \"hardhat/console.sol\";\n\nlibrary UintArray {\n    function concat(uint[] memory self, uint[] memory array) internal pure returns (uint[] memory) {\n        uint[] memory newArray = new uint[](self.length + array.length);\n        for (uint i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        for (uint i = 0; i < array.length; i++) {\n            newArray[i + self.length] = array[i];\n        }\n        return newArray;\n    }\n\n    function append(uint[] memory self, uint element) internal pure returns (uint[] memory) {\n        uint[] memory newArray = new uint[](self.length + 1);\n        for (uint i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        newArray[self.length] = element;\n        return newArray;\n    }\n\n    function remove(uint[] memory self, uint index) internal pure returns (uint[] memory newArray) {\n        newArray = new uint[](self.length - 1);\n        uint elementsAdded;\n        for (uint i = 0; i < self.length; i++) {\n            if (i != index) {\n                newArray[elementsAdded] = self[i];\n                elementsAdded += 1;\n            }\n        }\n        return newArray;\n    }\n\n    function sum(uint[] memory self) internal pure returns (uint) {\n        uint total;\n        for (uint i = 0; i < self.length; i++) {\n            total += self[i];\n        }\n        return total;\n    }\n\n    function scale(uint[] memory self, uint newTotal) internal pure returns (uint[] memory) {\n        uint totalRatios;\n        for (uint i = 0; i < self.length; i++) {\n            totalRatios += self[i];\n        }\n        for (uint i = 0; i < self.length; i++) {\n            self[i] = (self[i] * newTotal) / totalRatios;\n        }\n        return self;\n    }\n\n    function insert(uint[] memory self, uint idx, uint value) internal pure returns (uint[] memory newArray) {\n        newArray = new uint[](self.length + 1);\n        for (uint i = 0; i < idx; i++) {\n            newArray[i] = self[i];\n        }\n        newArray[idx] = value;\n        for (uint i = idx; i < self.length; i++) {\n            newArray[i + 1] = self[i];\n        }\n    }\n\n    function copy(uint[] memory self) internal pure returns (uint[] memory copied) {\n        copied = new uint[](self.length);\n        for (uint i = 0; i < self.length; i++) {\n            copied[i] = self[i];\n        }\n    }\n\n    function slice(uint[] memory self, uint start, uint end) internal pure returns (uint[] memory sliced) {\n        sliced = new uint[](end - start);\n        uint elementsAdded = 0;\n        for (uint i = start; i < end; i++) {\n            sliced[elementsAdded] = self[i];\n            elementsAdded += 1;\n        }\n    }\n\n    function log(uint[] memory self) internal view {\n        console.log(\"-------------------uint array-------------------\");\n        for (uint i = 0; i < self.length; i++) {\n            console.log(i, self[i]);\n        }\n    }\n}\n"
    },
    "contracts/libraries/UintArray2D.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.17;\n\nlibrary UintArray2D {\n    function concat(uint[][] memory self, uint[][] memory array) internal pure returns (uint[][] memory) {\n        uint[][] memory newArray = new uint[][](self.length + array.length);\n        for (uint i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        for (uint i = 0; i < array.length; i++) {\n            newArray[i + self.length] = array[i];\n        }\n        return newArray;\n    }\n\n    function append(uint[][] memory self, uint[] memory element) internal pure returns (uint[][] memory) {\n        uint[][] memory newArray = new uint[][](self.length + 1);\n        for (uint i = 0; i < self.length; i++) {\n            newArray[i] = self[i];\n        }\n        newArray[self.length] = element;\n        return newArray;\n    }\n}\n"
    },
    "contracts/ManagerHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./Banks/BankBase.sol\";\r\nimport \"./PositionsManager.sol\";\r\nimport \"./interfaces/IUniversalSwap.sol\";\r\nimport \"./libraries/AddressArray.sol\";\r\nimport \"./libraries/UintArray.sol\";\r\n\r\ncontract ManagerHelper is Initializable {\r\n    using AddressArray for address[];\r\n    using UintArray for uint256[];\r\n\r\n    PositionsManager positionManager;\r\n\r\n    function initialize(address _manager) public initializer {\r\n        positionManager = PositionsManager(payable(_manager));\r\n    }\r\n\r\n    function estimateValue(\r\n        uint positionId,\r\n        address inTermsOf\r\n    ) public view returns (uint256) {\r\n        Position memory position = positionManager.getPosition(positionId);\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        (address[] memory underlyingTokens, uint256[] memory underlyingAmounts) = bank.getPositionTokens(\r\n            position.bankToken,\r\n            address(uint160(positionId))\r\n        );\r\n        (address[] memory rewardTokens, uint256[] memory rewardAmounts) = bank.getPendingRewardsForUser(\r\n            position.bankToken,\r\n            position.user\r\n        );\r\n        Provided memory assets = Provided(\r\n            underlyingTokens.concat(rewardTokens),\r\n            underlyingAmounts.concat(rewardAmounts),\r\n            new Asset[](0)\r\n        );\r\n        return IUniversalSwap(positionManager.universalSwap()).estimateValue(assets, inTermsOf);\r\n    }\r\n\r\n    function checkLiquidate(\r\n        uint positionId\r\n    ) public view returns (uint256 index, bool liquidate) {\r\n        Position memory position = positionManager.getPosition(positionId);\r\n        address stableToken = positionManager.stableToken();\r\n        for (uint256 i = 0; i < position.liquidationPoints.length; i++) {\r\n            LiquidationCondition memory condition = position.liquidationPoints[i];\r\n            address token = condition.watchedToken;\r\n            uint256 currentPrice;\r\n            if (token == address(positionManager)) {\r\n                currentPrice = estimateValue(positionId, stableToken);\r\n                currentPrice = (currentPrice * 10 ** 18) / 10 ** ERC20Upgradeable(stableToken).decimals();\r\n            } else {\r\n                currentPrice = IUniversalSwap(positionManager.universalSwap()).estimateValueERC20(\r\n                    token,\r\n                    10 ** ERC20Upgradeable(token).decimals(),\r\n                    stableToken\r\n                );\r\n                currentPrice = (currentPrice * 10 ** 18) / 10 ** ERC20Upgradeable(stableToken).decimals();\r\n            }\r\n            if (condition.lessThan && currentPrice < condition.liquidationPoint) {\r\n                index = i;\r\n                liquidate = true;\r\n                break;\r\n            }\r\n            if (!condition.lessThan && currentPrice > condition.liquidationPoint) {\r\n                index = i;\r\n                liquidate = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPositionTokens(\r\n        uint positionId\r\n    ) public view returns (address[] memory tokens, uint256[] memory amounts, uint256[] memory values) {\r\n        Position memory position = positionManager.getPosition(positionId);\r\n        address universalSwap = positionManager.universalSwap();\r\n        address stableToken = positionManager.stableToken();\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        (tokens, amounts) = bank.getPositionTokens(position.bankToken, address(uint160(positionId)));\r\n        if (amounts.sum()!=0) {\r\n            (tokens, amounts) = IUniversalSwap(universalSwap).getUnderlying(Provided(tokens, amounts, new Asset[](0)));\r\n            values = new uint256[](tokens.length);\r\n            for (uint256 i = 0; i < tokens.length; i++) {\r\n                uint256 value = IUniversalSwap(universalSwap).estimateValueERC20(tokens[i], amounts[i], stableToken);\r\n                values[i] = value;\r\n            }\r\n        } else {\r\n            for (uint i = 0; i<tokens.length; i++) {\r\n                amounts[i] = 1e18;\r\n            }\r\n            (tokens,) = IUniversalSwap(universalSwap).getUnderlying(Provided(tokens, amounts, new Asset[](0)));\r\n            amounts = new uint256[](tokens.length);\r\n            values = new uint256[](tokens.length);\r\n        }\r\n    }\r\n\r\n    function getPositionRewards(\r\n        uint positionId\r\n    ) public view returns (address[] memory rewards, uint256[] memory rewardAmounts, uint256[] memory rewardValues) {\r\n        Position memory position = positionManager.getPosition(positionId);\r\n        address universalSwap = positionManager.universalSwap();\r\n        address stableToken = positionManager.stableToken();\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        (rewards, rewardAmounts) = bank.getPendingRewardsForUser(position.bankToken, address(uint160(positionId)));\r\n        rewardValues = new uint256[](rewards.length);\r\n        for (uint256 i = 0; i < rewards.length; i++) {\r\n            uint256 value = IUniversalSwap(universalSwap).estimateValueERC20(rewards[i], rewardAmounts[i], stableToken);\r\n            rewardValues[i] = value;\r\n        }\r\n    }\r\n\r\n    function getPosition(\r\n        uint positionId\r\n    ) external view returns (PositionData memory) {\r\n        Position memory position = positionManager.getPosition(positionId);\r\n        (address lpToken, address manager, uint256 id) = BankBase(payable(position.bank)).decodeId(position.bankToken);\r\n        (address[] memory tokens, uint256[] memory amounts, uint256[] memory underlyingValues) = getPositionTokens(\r\n            positionId\r\n        );\r\n        (address[] memory rewards, uint256[] memory rewardAmounts, uint256[] memory rewardValues) = getPositionRewards(\r\n            positionId\r\n        );\r\n        return\r\n            PositionData(\r\n                position,\r\n                BankTokenInfo(lpToken, manager, id),\r\n                tokens,\r\n                amounts,\r\n                underlyingValues,\r\n                rewards,\r\n                rewardAmounts,\r\n                rewardValues,\r\n                underlyingValues.sum() + rewardValues.sum()\r\n            );\r\n    }\r\n\r\n    function recommendBank(address lpToken) external view returns (address[] memory, uint256[] memory) {\r\n        address payable[] memory banks = positionManager.getBanks();\r\n        uint256[] memory tokenIds;\r\n        address[] memory supportedBanks;\r\n        for (uint256 i = 0; i < banks.length; i++) {\r\n            (bool success, uint256 tokenId) = BankBase(banks[i]).getIdFromLpToken(lpToken);\r\n            if (success) {\r\n                supportedBanks = supportedBanks.append(banks[i]);\r\n                tokenIds = tokenIds.append(tokenId);\r\n            }\r\n        }\r\n        return (supportedBanks, tokenIds);\r\n    }\r\n}\r\n"
    },
    "contracts/PoolInteractors/AaveV2PoolInteractor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"../interfaces/IPoolInteractor.sol\";\nimport \"../interfaces/AAVE/ILendingPool.sol\";\nimport \"../interfaces/AAVE/IAToken.sol\";\n\ninterface IAToken {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n\n    function underlyingAssetAddress() external view returns (address);\n}\n\ncontract AaveV2PoolInteractor is IPoolInteractor {\n    using SaferERC20 for IERC20;\n\n    address public lendingPool1;\n    address public lendingPool2;\n    address public lendingPool3;\n\n    constructor(address _lendingPool1, address _lendingPool2, address _lendingPool3) {\n        lendingPool1 = _lendingPool1;\n        lendingPool2 = _lendingPool2;\n        lendingPool3 = _lendingPool3;\n    }\n\n    function _getVersion(address lpTokenAddress, address self) internal view returns (uint256) {\n        (address[] memory underlying, ) = getUnderlyingTokens(lpTokenAddress);\n        address lendingPool2Address = AaveV2PoolInteractor(self).lendingPool2();\n        address lendingPool3Address = AaveV2PoolInteractor(self).lendingPool3();\n        if (lendingPool2Address != address(0)) {\n            if (ILendingPool2(lendingPool2Address).getReserveData(underlying[0]).aTokenAddress == lpTokenAddress)\n                return 2;\n        }\n        if (lendingPool3Address != address(0)) {\n            if (ILendingPool3(lendingPool3Address).getReserveData(underlying[0]).aTokenAddress == lpTokenAddress)\n                return 3;\n        }\n        // if (lendingPool1Address!=address(0)) {\n        //     (,,,,,,,,,,,address aToken,) = ILendingPool1(lendingPool1Address).getReserveData(underlyingAddress);\n        //     if (aToken==lpTokenAddress) return 1;\n        // }\n        return 1;\n    }\n\n    function burn(\n        address lpTokenAddress,\n        uint256 amount,\n        address self\n    ) external payable returns (address[] memory, uint256[] memory) {\n        IERC20 lpTokenContract = IERC20(lpTokenAddress);\n        // lpTokenContract.transferFrom(msg.sender, address(this), amount);\n        (address[] memory underlying, ) = getUnderlyingTokens(lpTokenAddress);\n        uint256 balanceBefore = ERC20(underlying[0]).balanceOf(address(this));\n        address lendingPool2Address = AaveV2PoolInteractor(self).lendingPool2();\n        address lendingPool3Address = AaveV2PoolInteractor(self).lendingPool3();\n\n        uint256 version = _getVersion(lpTokenAddress, self);\n        if (version == 1) {\n            IAToken1(lpTokenAddress).redeem(amount);\n            // IERC20(underlying[0]).safeTransfer(msg.sender, ERC20(underlying[0]).balanceOf(address(this)));\n            // ILendingPool1(lendingPool1Address).redeemUnderlying(underlyingAddress, payable(address(this)), amount, 0);\n        } else if (version == 2) {\n            lpTokenContract.safeIncreaseAllowance(lendingPool2Address, amount);\n            ILendingPool2(lendingPool2Address).withdraw(underlying[0], amount, address(this));\n        } else if (version == 3) {\n            lpTokenContract.safeIncreaseAllowance(lendingPool3Address, amount);\n            ILendingPool3(lendingPool3Address).withdraw(underlying[0], amount, address(this));\n        }\n\n        uint256 tokensGained = ERC20(underlying[0]).balanceOf(address(this)) - balanceBefore;\n        require(tokensGained > 0, \"10\");\n        address[] memory receivedTokens = new address[](1);\n        receivedTokens[0] = underlying[0];\n        uint256[] memory receivedTokenAmounts = new uint256[](1);\n        receivedTokenAmounts[0] = tokensGained;\n        return (receivedTokens, receivedTokenAmounts);\n    }\n\n    function mint(\n        address toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts,\n        address receiver,\n        address self\n    ) external payable returns (uint256) {\n        IERC20 lpTokenContract = IERC20(toMint);\n        uint256 lpBalance = lpTokenContract.balanceOf(receiver);\n        (address[] memory underlying, ) = getUnderlyingTokens(toMint);\n        require(underlying[0] == underlyingTokens[0], \"6\");\n        address lendingPool1Address = AaveV2PoolInteractor(self).lendingPool1();\n        address lendingPool2Address = AaveV2PoolInteractor(self).lendingPool2();\n        address lendingPool3Address = AaveV2PoolInteractor(self).lendingPool3();\n\n        uint256 version = _getVersion(toMint, self);\n        if (version == 1) {\n            IERC20(underlyingTokens[0]).safeIncreaseAllowance(\n                ILendingPool1(lendingPool1Address).core(),\n                underlyingAmounts[0]\n            );\n            ILendingPool1(lendingPool1Address).deposit(underlying[0], underlyingAmounts[0], 0);\n            lpTokenContract.transfer(receiver, lpTokenContract.balanceOf(address(this)));\n        } else if (version == 2) {\n            IERC20(underlyingTokens[0]).safeIncreaseAllowance(lendingPool2Address, underlyingAmounts[0]);\n            ILendingPool2(lendingPool2Address).deposit(underlying[0], underlyingAmounts[0], receiver, 0);\n        } else if (version == 3) {\n            IERC20(underlyingTokens[0]).safeIncreaseAllowance(lendingPool3Address, underlyingAmounts[0]);\n            ILendingPool3(lendingPool3Address).supply(underlying[0], underlyingAmounts[0], receiver, 0);\n        }\n\n        uint256 minted = lpTokenContract.balanceOf(receiver) - lpBalance;\n        require(minted > 0, \"11\");\n        return minted;\n    }\n\n    function simulateMint(\n        address toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts\n    ) external pure returns (uint256 minted) {\n        return underlyingAmounts[0];\n    }\n\n    function testSupported(address token) external view override returns (bool) {\n        try IAToken(token).UNDERLYING_ASSET_ADDRESS() returns (address) {\n            return true;\n        } catch {\n            try IAToken(token).underlyingAssetAddress() returns (address) {\n                return true;\n            } catch {\n                return false;\n            }\n        }\n    }\n\n    function getUnderlyingAmount(\n        address aTokenAddress,\n        uint256 amount\n    ) external view returns (address[] memory underlying, uint256[] memory amounts) {\n        (underlying, ) = getUnderlyingTokens(aTokenAddress);\n        amounts = new uint256[](1);\n        amounts[0] = amount;\n    }\n\n    function getUnderlyingTokens(address lpTokenAddress) public view returns (address[] memory, uint256[] memory) {\n        address underlyingAddress;\n        try IAToken(lpTokenAddress).UNDERLYING_ASSET_ADDRESS() returns (address underlying) {\n            underlyingAddress = underlying;\n        } catch {\n            try IAToken(lpTokenAddress).underlyingAssetAddress() returns (address underlying) {\n                underlyingAddress = underlying;\n            } catch {\n                revert(\"Failed to get underlying\");\n            }\n        }\n        address[] memory receivedTokens = new address[](1);\n        receivedTokens[0] = underlyingAddress;\n        uint256[] memory ratios = new uint256[](1);\n        ratios[0] = 1;\n        return (receivedTokens, ratios);\n    }\n}\n"
    },
    "contracts/PoolInteractors/BalancerPoolInteractor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\n// import \"../interfaces/IPoolInteractor.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n// import \"../interfaces/ILendingPool.sol\";\n// import \"../interfaces/IAToken.sol\";\n// import \"hardhat/console.sol\";\n\n// interface IAsset {\n//     // solhint-disable-previous-line no-empty-blocks\n// }\n\n// interface IPool {\n//     function getPoolId() external view returns (bytes32);\n//     function getVault() external view returns (IVault vaultAddress);\n// }\n\n// interface IVault {\n//     struct JoinPoolRequest {\n//         IAsset[] assets;\n//         uint256[] maxAmountsIn;\n//         bytes userData;\n//         bool fromInternalBalance;\n//     }\n\n//     function joinPool(\n//         bytes32 poolId,\n//         address sender,\n//         address recipient,\n//         JoinPoolRequest memory request\n//     ) external payable;\n\n//     struct ExitPoolRequest {\n//         IAsset[] assets;\n//         uint256[] minAmountsOut;\n//         bytes userData;\n//         bool toInternalBalance;\n//     }\n\n//     function exitPool(\n//         bytes32 poolId,\n//         address sender,\n//         address payable recipient,\n//         ExitPoolRequest memory request\n//     ) external;\n\n//     function getPoolTokens(bytes32 poolId)\n//         external\n//         view\n//         returns (\n//             IERC20[] memory tokens,\n//             uint256[] memory balances,\n//             uint256 lastChangeBlock\n//         );\n// }\n\n// contract BalancerPoolInteractor is IPoolInteractor {\n\n//     IVault vault;\n\n//     constructor(address _balancerVault) {\n//         vault = IVault(_balancerVault);\n//     }\n\n//     function burn(\n//         address lpTokenAddress,\n//         uint256 amount\n//     ) external returns (address[] memory underlyingTokens, uint256[] memory receivedAmounts) {\n//         IPool poolContract = IPool(lpTokenAddress);\n//         bytes32 poolId = poolContract.getPoolId();\n//         (IERC20[] memory tokens,,) = vault.getPoolTokens(poolId);\n//         IAsset[] memory assets = new IAsset[](tokens.length);\n//         receivedAmounts = new uint256[](tokens.length);\n//         for (uint j = 0; j<tokens.length; j++) {\n//             assets[j] = IAsset(address(tokens[j]));\n//             receivedAmounts[j] = tokens[j].balanceOf(address(this));\n//         }\n//         uint256[] memory minAmounts = new uint256[](tokens.length);\n//         bytes memory userData = abi.encode(1, amount);\n//         IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest(assets, minAmounts, userData, false);\n//         vault.exitPool(poolId, address(this), payable(address(this)), request);\n//         for (uint i = 0; i<tokens.length; i++) {\n//             receivedAmounts[i] = tokens[i].balanceOf(address(this))-receivedAmounts[i];\n//             underlyingTokens[i] = address(tokens[i]);\n//         }\n//     }\n\n//     function mint(address lpTokenAddress, address[] memory underlyingTokens, uint[] memory underlyingAmounts) external returns(uint) {\n//         uint startBalance = IERC20(lpTokenAddress).balanceOf(address(this));\n//         IPool poolContract = IPool(lpTokenAddress);\n//         bytes32 poolId = poolContract.getPoolId();\n//         IAsset[] memory assets = new IAsset[](underlyingTokens.length);\n//         for (uint j = 0; j<underlyingTokens.length; j++) {\n//             IERC20(underlyingTokens[j]).transferFrom(msg.sender, address(this), underlyingAmounts[j]);\n//             IERC20(underlyingTokens[j]).approve(address(vault), underlyingAmounts[j]);\n//             assets[j] = IAsset(underlyingTokens[j]);\n//         }\n//         bytes memory userData = abi.encode(1, underlyingAmounts, 1);\n//         IVault.JoinPoolRequest memory request = IVault.JoinPoolRequest(assets, underlyingAmounts, userData, false);\n//         vault.joinPool(poolId, address(this), payable(address(this)), request);\n//         uint lpGained = IERC20(lpTokenAddress).balanceOf(address(this))-startBalance;\n//         IERC20(lpTokenAddress).transfer(msg.sender, lpGained);\n//         return lpGained;\n//     }\n\n//     function getUnderlyingTokens(address lpTokenAddress)\n//         public\n//         view\n//         returns (address[] memory)\n//     {\n//         IPool poolContract = IPool(lpTokenAddress);\n//         bytes32 poolId = poolContract.getPoolId();\n//         (IERC20[] memory tokens,,) = vault.getPoolTokens(poolId);\n//         address[] memory underlyingTokens = new address[](tokens.length);\n//         for (uint i = 0; i<tokens.length; i++) {\n//             underlyingTokens[i] = address(tokens[i]);\n//         }\n//         return underlyingTokens;\n//     }\n// }\n"
    },
    "contracts/PoolInteractors/CurvePoolInteractor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\n// import \"../interfaces/IPoolInteractor.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n// import \"../interfaces/ILendingPool.sol\";\n// import \"../interfaces/IAToken.sol\";\n// import \"hardhat/console.sol\";\n\n// interface CurvePool {\n//     function coins(uint256 index) view external returns (address);\n//     function add_liquidity(uint256[] calldata _amounts, uint256 _min_mint_amount) external returns (uint256);\n//     function remove_liquidity(uint256 _amount, uint256[] calldata _min_amounts) external returns (uint256[] memory);\n// }\n\n// contract CurvePoolInteractor is IPoolInteractor {\n\n//     mapping (address => address) pools;\n\n//     mapping (address => address[]) underlying;\n\n//     constructor(address[] memory lpTokens, address[] memory _pools) {\n//         for (uint i = 0; i<lpTokens.length; i++) {\n//             pools[lpTokens[i]] = _pools[i];\n//         }\n//     }\n\n//     function burn(\n//         address lpTokenAddress,\n//         uint256 amount\n//     ) external returns (address[] memory, uint256[] memory) {\n//         address pool = pools[lpTokenAddress];\n//         CurvePool poolContract = CurvePool(pool);\n//         address[] memory underlyingTokens = getUnderlyingTokens(lpTokenAddress);\n//         uint256[] memory minAmounts = new uint256[](underlyingTokens.length);\n//         uint256[] memory returnedAmounts = poolContract.remove_liquidity(amount, minAmounts);\n//         for (uint i = 0; i<underlyingTokens.length; i++) {\n//             ERC20 tokenContract = ERC20(underlyingTokens[i]);\n//             tokenContract.transfer(msg.sender, returnedAmounts[i]);\n//         }\n//         return (underlyingTokens, returnedAmounts);\n//     }\n\n//     function mint(address toMint, address[] memory underlyingTokens, uint[] memory underlyingAmounts) external returns(uint) {\n//         address pool = pools[toMint];\n//         for (uint i = 0; i<underlyingTokens.length; i++) {\n//             ERC20 tokenContract = ERC20(underlyingTokens[i]);\n//             tokenContract.transferFrom(msg.sender, address(this), underlyingAmounts[i]);\n//             tokenContract.approve(pool, underlyingAmounts[i]);\n//         }\n//         CurvePool poolContract = CurvePool(pool);\n//         uint minted = poolContract.add_liquidity(underlyingAmounts, 0);\n//         ERC20(toMint).transfer(msg.sender, minted);\n//         return minted;\n//     }\n\n//     function getUnderlyingTokens(address lpTokenAddress)\n//         public\n//         view\n//         returns (address[] memory underlyingTokens)\n//     {\n//         address pool = pools[lpTokenAddress];\n//         CurvePool poolContract = CurvePool(pool);\n//         if (underlying[pool].length!=0) {\n//             return underlying[pool];\n//         }\n//         uint i = 0;\n//         while (true) {\n//             try poolContract.coins(i) {\n//                 i++;\n//             } catch {\n//                 break;\n//             }\n//         }\n//         underlyingTokens = new address[](i);\n//         for (uint j = 0;j<i;j++) {\n//             underlyingTokens[j] = CurvePool(lpTokenAddress).coins(j);\n//         }\n//     }\n// }\n"
    },
    "contracts/PoolInteractors/UniswapV2PoolInteractor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"../interfaces/IPoolInteractor.sol\";\nimport \"../interfaces/UniswapV2/IUniswapV2Pair.sol\";\nimport \"../libraries/Math.sol\";\n\ncontract UniswapV2PoolInteractor is IPoolInteractor {\n    using SaferERC20 for IERC20;\n\n    uint256 public constant MINIMUM_LIQUIDITY = 10 ** 3;\n\n    function burn(\n        address lpTokenAddress,\n        uint256 amount,\n        address self\n    ) external payable returns (address[] memory, uint256[] memory) {\n        IUniswapV2Pair pair = IUniswapV2Pair(lpTokenAddress);\n        address[] memory receivedTokens = new address[](2);\n        receivedTokens[0] = pair.token0();\n        receivedTokens[1] = pair.token1();\n        uint256[] memory receivedTokenAmounts = new uint256[](2);\n        if (amount == 0) {\n            receivedTokenAmounts[0] = 0;\n            receivedTokenAmounts[1] = 0;\n        } else {\n            pair.transfer(lpTokenAddress, amount);\n            (uint256 amount0, uint256 amount1) = pair.burn(address(this));\n            receivedTokenAmounts[0] = amount0;\n            receivedTokenAmounts[1] = amount1;\n            emit Burn(lpTokenAddress, amount);\n        }\n        return (receivedTokens, receivedTokenAmounts);\n    }\n\n    function mint(\n        address toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts,\n        address receiver,\n        address self\n    ) external payable returns (uint256) {\n        IUniswapV2Pair poolContract = IUniswapV2Pair(toMint);\n        if (underlyingAmounts[0] + underlyingAmounts[1] == 0) {\n            return 0;\n        }\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\n            IERC20(underlyingTokens[i]).safeTransfer(toMint, underlyingAmounts[i]);\n        }\n        uint256 minted = poolContract.mint(receiver);\n        return minted;\n    }\n\n    function simulateMint(\n        address toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts\n    ) external view returns (uint256 minted) {\n        IUniswapV2Pair pair = IUniswapV2Pair(toMint);\n        (uint256 r0, uint256 r1, ) = pair.getReserves();\n        uint256 totalSupply = pair.totalSupply();\n        uint256 amount0;\n        uint256 amount1;\n        if (underlyingTokens[0] == pair.token0()) {\n            amount0 = underlyingAmounts[0];\n            amount1 = underlyingAmounts[1];\n        } else {\n            amount0 = underlyingAmounts[1];\n            amount1 = underlyingAmounts[0];\n        }\n        if (totalSupply == 0) {\n            minted = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n        } else {\n            minted = Math.min((amount0 * totalSupply) / r0, (amount1 * totalSupply) / r1);\n        }\n    }\n\n    function testSupported(address token) external view override returns (bool) {\n        try IUniswapV2Pair(token).token0() returns (address) {} catch {\n            return false;\n        }\n        try IUniswapV2Pair(token).token1() returns (address) {} catch {\n            return false;\n        }\n        try IUniswapV2Pair(token).getReserves() returns (uint112, uint112, uint32) {} catch {\n            return false;\n        }\n        try IUniswapV2Pair(token).kLast() returns (uint256) {} catch {\n            return false;\n        }\n        return true;\n    }\n\n    function getUnderlyingAmount(\n        address lpTokenAddress,\n        uint256 amount\n    ) external view returns (address[] memory underlying, uint256[] memory amounts) {\n        IUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddress);\n        (uint256 r0, uint256 r1, ) = lpToken.getReserves();\n        uint256 supply = lpToken.totalSupply();\n        (underlying, ) = getUnderlyingTokens(lpTokenAddress);\n        amounts = new uint256[](2);\n        amounts[0] = (amount * r0) / supply;\n        amounts[1] = (amount * r1) / supply;\n    }\n\n    function getUnderlyingTokens(address lpTokenAddress) public view returns (address[] memory, uint256[] memory) {\n        IUniswapV2Pair poolContract = IUniswapV2Pair(lpTokenAddress);\n        address[] memory receivedTokens = new address[](2);\n        receivedTokens[0] = poolContract.token0();\n        receivedTokens[1] = poolContract.token1();\n        uint256[] memory ratios = new uint256[](2);\n        ratios[0] = 1;\n        ratios[1] = 1;\n        return (receivedTokens, ratios);\n    }\n}\n"
    },
    "contracts/PoolInteractors/UniswapV3PoolInteractor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"../interfaces/IPoolInteractor.sol\";\nimport \"../interfaces/UniswapV3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/UniswapV3/IUniswapV3Pool.sol\";\nimport \"../interfaces/UniswapV3/IUniswapV3Factory.sol\";\nimport \"../interfaces/INFTPoolInteractor.sol\";\nimport \"../libraries/TickMath.sol\";\nimport \"../libraries/LiquidityAmounts.sol\";\nimport \"hardhat/console.sol\";\n\ncontract UniswapV3PoolInteractor is INFTPoolInteractor, Ownable {\n    using SaferERC20 for IERC20;\n\n    address public supportedManager;\n\n    constructor(address _supportedManager) {\n        supportedManager = _supportedManager;\n    }\n\n    function burn(\n        Asset memory asset\n    ) external payable returns (address[] memory receivedTokens, uint256[] memory receivedTokenAmounts) {\n        (, , address token0, address token1, , , , , , , , ) = INonfungiblePositionManager(asset.manager).positions(\n            asset.tokenId\n        );\n        INonfungiblePositionManager.DecreaseLiquidityParams memory withdrawParams = INonfungiblePositionManager\n            .DecreaseLiquidityParams(asset.tokenId, uint128(asset.liquidity), 0, 0, block.timestamp);\n        (uint256 token0Amount, uint256 token1Amount) = INonfungiblePositionManager(asset.manager).decreaseLiquidity(\n            withdrawParams\n        );\n        INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager.CollectParams(\n            asset.tokenId,\n            address(this),\n            uint128(token0Amount),\n            uint128(token1Amount)\n        );\n        INonfungiblePositionManager(asset.manager).collect(params);\n        receivedTokens = new address[](2);\n        receivedTokens[0] = token0;\n        receivedTokens[1] = token1;\n        receivedTokenAmounts = new uint256[](2);\n        receivedTokenAmounts[0] = token0Amount;\n        receivedTokenAmounts[1] = token1Amount;\n        IERC721(asset.manager).transferFrom(address(this), msg.sender, asset.tokenId);\n    }\n\n    function getRatio(address poolAddress, int24 tick0, int24 tick1) external view returns (uint256, uint256) {\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n        int24 currentTick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n        uint absTick = currentTick < 0 ? uint(-int(currentTick)) : uint(int(currentTick));\n        uint24 tickSpacing = uint24(pool.tickSpacing());\n        absTick -= absTick % tickSpacing;\n        currentTick = currentTick < 0 ? -int24(int(absTick)) : int24(int(absTick));\n\n        uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tick0);\n        uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tick1);\n        // uint128 liquidity = LiquidityAmounts.getLiquidityForAmounts(\n        //     sqrtPriceX96,\n        //     sqrtRatioAX96,\n        //     sqrtRatioBX96,\n        //     1e18,\n        //     1e18\n        // );\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\n            TickMath.getSqrtRatioAtTick(currentTick),\n            sqrtRatioAX96,\n            sqrtRatioBX96,\n            pool.liquidity()\n        );\n        uint256 MAX = 2 ** 256 - 1;\n        if (uint256(sqrtPriceX96) * uint256(sqrtPriceX96) > MAX / 1e18) {\n            uint256 price = ((uint256(sqrtPriceX96) * uint256(sqrtPriceX96)) >> (96 * 2)) * 1e18;\n            return (amount0, (amount1 * 1e18) / price);\n        } else {\n            uint256 price = (uint256(sqrtPriceX96) * uint256(sqrtPriceX96) * 1e18) >> (96 * 2);\n            return (amount0, (amount1 * 1e18) / price);\n        }\n    }\n\n    function mint(\n        Asset memory toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts,\n        address receiver\n    ) external payable returns (uint256) {\n        IUniswapV3Pool pool = IUniswapV3Pool(toMint.pool);\n        address token0 = pool.token0();\n        address token1 = pool.token1();\n        require((token0 == underlyingTokens[0] && token1 == underlyingTokens[1]), \"6\");\n        INonfungiblePositionManager.MintParams memory mintParams;\n        for (uint256 i = 0; i < underlyingAmounts.length; i++) {\n            IERC20(underlyingTokens[i]).safeIncreaseAllowance(toMint.manager, underlyingAmounts[i]);\n        }\n        uint256 minAmount0;\n        uint256 minAmount1;\n        {\n            uint24 fees = pool.fee();\n            (int24 tick0, int24 tick1, uint256 m0, uint256 m1) = abi.decode(\n                toMint.data,\n                (int24, int24, uint256, uint256)\n            );\n            minAmount0 = m0;\n            minAmount1 = m1;\n            mintParams = INonfungiblePositionManager.MintParams(\n                token0,\n                token1,\n                fees,\n                tick0,\n                tick1,\n                underlyingAmounts[0],\n                underlyingAmounts[1],\n                0,\n                0,\n                receiver,\n                block.timestamp\n            );\n        }\n        (uint256 tokenId, , uint256 amount0, uint256 amount1) = INonfungiblePositionManager(toMint.manager).mint(\n            mintParams\n        );\n        require(amount0 > minAmount0 && amount1 > minAmount1, \"3\");\n        IERC20(token0).safeTransfer(receiver, underlyingAmounts[0] - amount0);\n        IERC20(token1).safeTransfer(receiver, underlyingAmounts[1] - amount1);\n        return tokenId;\n    }\n\n    function simulateMint(\n        Asset memory toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts\n    ) external view returns (uint256 liquidity) {\n        IUniswapV3Pool pool = IUniswapV3Pool(toMint.pool);\n        (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\n        int24 currentTick = TickMath.getTickAtSqrtRatio(sqrtRatioX96);\n        uint absTick = currentTick < 0 ? uint(-int(currentTick)) : uint(int(currentTick));\n        uint24 tickSpacing = uint24(pool.tickSpacing());\n        absTick -= absTick % tickSpacing;\n        currentTick = currentTick < 0 ? -int24(int(absTick)) : int24(int(absTick));\n        (int24 tick0, int24 tick1, , ) = abi.decode(toMint.data, (int24, int24, uint256, uint256));\n        uint256 amount0;\n        uint256 amount1;\n        if (underlyingTokens[0] == pool.token0()) {\n            amount0 = underlyingAmounts[0];\n            amount1 = underlyingAmounts[1];\n        } else {\n            amount0 = underlyingAmounts[1];\n            amount1 = underlyingAmounts[0];\n        }\n        liquidity = LiquidityAmounts.getLiquidityForAmounts(\n            TickMath.getSqrtRatioAtTick(currentTick),\n            TickMath.getSqrtRatioAtTick(tick0),\n            TickMath.getSqrtRatioAtTick(tick1),\n            amount0,\n            amount1\n        );\n    }\n\n    function testSupported(address token) external view returns (bool) {\n        if (token == supportedManager) {\n            return true;\n        }\n        return false;\n    }\n\n    function testSupportedPool(address poolAddress) external view returns (bool) {\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n        // (bool success, bytes memory returnData) = poolAddress.staticcall(abi.encodeWithSelector(\n        //     pool.factory.selector));\n        // if (success) {\n        //     (address factory) = abi.decode(returnData, (address));\n        //     if (factory==INonfungiblePositionManager(supportedManager).factory()) return true;\n        // }\n        // return false;\n        try pool.factory() returns (address factory) {\n            if (factory == INonfungiblePositionManager(supportedManager).factory()) {\n                return true;\n            }\n            return false;\n        } catch {\n            return false;\n        }\n    }\n\n    function getUnderlyingAmount(\n        Asset memory nft\n    ) external view returns (address[] memory underlying, uint256[] memory amounts) {\n        IUniswapV3Pool pool;\n        int24 tick0;\n        int24 tick1;\n        if (nft.tokenId == 0) {\n            pool = IUniswapV3Pool(nft.pool);\n            (tick0, tick1, , ) = abi.decode(nft.data, (int24, int24, uint256, uint256));\n        } else {\n            INonfungiblePositionManager manager = INonfungiblePositionManager(nft.manager);\n            IUniswapV3Factory factory = IUniswapV3Factory(manager.factory());\n            (, , address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, , , , , ) = manager\n                .positions(nft.tokenId);\n            tick0 = tickLower;\n            tick1 = tickUpper;\n            pool = IUniswapV3Pool(factory.getPool(token0, token1, fee));\n        }\n        underlying = getUnderlyingTokens(address(pool));\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\n            sqrtPriceX96,\n            TickMath.getSqrtRatioAtTick(tick0),\n            TickMath.getSqrtRatioAtTick(tick1),\n            uint128(nft.liquidity)\n        );\n        amounts = new uint256[](2);\n        amounts[0] = amount0;\n        amounts[1] = amount1;\n    }\n\n    function getUnderlyingTokens(address lpTokenAddress) public view returns (address[] memory) {\n        IUniswapV3Pool pool = IUniswapV3Pool(lpTokenAddress);\n        address[] memory receivedTokens = new address[](2);\n        receivedTokens[0] = pool.token0();\n        receivedTokens[1] = pool.token1();\n        return receivedTokens;\n    }\n\n    function getTickAtRatio(uint160 ratio) external pure returns (int24) {\n        return TickMath.getTickAtSqrtRatio(ratio);\n    }\n}\n"
    },
    "contracts/PoolInteractors/VenusPoolInteractor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"../interfaces/IPoolInteractor.sol\";\nimport \"../interfaces/Venus/IVToken.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"hardhat/console.sol\";\n\ncontract VenusPoolInteractor is IPoolInteractor {\n    using SaferERC20 for IERC20;\n\n    function burn(\n        address lpTokenAddress,\n        uint256 amount,\n        address self\n    ) external payable returns (address[] memory, uint256[] memory) {\n        IVToken lpTokenContract = IVToken(lpTokenAddress);\n        (address[] memory underlying, ) = getUnderlyingTokens(lpTokenAddress);\n        lpTokenContract.approve(lpTokenAddress, amount);\n        uint256 balanceStart = IERC20(underlying[0]).balanceOf(address(this));\n        lpTokenContract.redeem(amount);\n        if (address(this).balance > 0) {\n            IWETH(payable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c)).deposit{value: address(this).balance}();\n        }\n        uint256 balanceEnd = IERC20(underlying[0]).balanceOf(address(this));\n        uint256[] memory receivedTokenAmounts = new uint256[](1);\n        receivedTokenAmounts[0] = balanceEnd - balanceStart;\n        return (underlying, receivedTokenAmounts);\n    }\n\n    receive() external payable {}\n\n    function mint(\n        address toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts,\n        address receiver,\n        address self\n    ) external payable returns (uint256) {\n        IVToken lpTokenContract = IVToken(toMint);\n        uint256 balanceBefore = lpTokenContract.balanceOf(address(this));\n        if (toMint == 0xA07c5b74C9B40447a954e1466938b865b6BBea36) {\n            IWETH(payable(underlyingTokens[0])).withdraw(underlyingAmounts[0]);\n            lpTokenContract.mint{value: underlyingAmounts[0]}();\n        } else {\n            for (uint256 i = 0; i < underlyingTokens.length; i++) {\n                ERC20 tokenContract = ERC20(underlyingTokens[i]);\n                tokenContract.approve(toMint, underlyingAmounts[i]);\n            }\n            lpTokenContract.mint(underlyingAmounts[0]);\n        }\n        uint256 minted = lpTokenContract.balanceOf(address(this)) - balanceBefore;\n        if (receiver != address(this)) {\n            lpTokenContract.transfer(receiver, minted);\n        }\n        return minted;\n    }\n\n    function simulateMint(\n        address toMint,\n        address[] memory underlyingTokens,\n        uint256[] memory underlyingAmounts\n    ) external view returns (uint256 minted) {\n        IVToken lpToken = IVToken(toMint);\n        uint256 exchangeRate = lpToken.exchangeRateStored();\n        minted = (underlyingAmounts[0] * uint256(10) ** 18) / exchangeRate;\n    }\n\n    function testSupported(address token) external view override returns (bool) {\n        try IVToken(token).isVToken() returns (bool isVToken) {\n            return isVToken;\n        } catch {\n            return false;\n        }\n        // try IVToken(token).borrowRatePerBlock() returns (uint) {} catch {return false;}\n        // try IVToken(token).supplyRatePerBlock() returns (uint) {} catch {return false;}\n        // return true;\n    }\n\n    function getUnderlyingAmount(\n        address lpTokenAddress,\n        uint256 amount\n    ) external view returns (address[] memory underlying, uint256[] memory amounts) {\n        IVToken lpToken = IVToken(lpTokenAddress);\n        uint256 exchangeRate = lpToken.exchangeRateStored();\n        (underlying, ) = getUnderlyingTokens(lpTokenAddress);\n        amounts = new uint256[](1);\n        amounts[0] = (exchangeRate * amount) / uint256(10) ** 18;\n    }\n\n    function getUnderlyingTokens(address lpTokenAddress) public view returns (address[] memory, uint256[] memory) {\n        uint256[] memory ratios = new uint256[](1);\n        address[] memory receivedTokens = new address[](1);\n        ratios[0] = 1;\n        if (lpTokenAddress == 0xA07c5b74C9B40447a954e1466938b865b6BBea36) {\n            receivedTokens[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n            return (receivedTokens, ratios);\n        }\n        IVToken lpTokenContract = IVToken(lpTokenAddress);\n        address underlyingAddress = lpTokenContract.underlying();\n        receivedTokens[0] = underlyingAddress;\n        return (receivedTokens, ratios);\n    }\n}\n"
    },
    "contracts/PositionsManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./utils/OwnableUpgradeable.sol\";\r\nimport \"./Banks/BankBase.sol\";\r\nimport \"./interfaces/IPositionsManager.sol\";\r\nimport \"./interfaces/IUniversalSwap.sol\";\r\nimport \"./libraries/AddressArray.sol\";\r\nimport \"./libraries/UintArray.sol\";\r\nimport \"./libraries/StringArray.sol\";\r\nimport \"./libraries/SaferERC20.sol\";\r\nimport \"./ManagerHelper.sol\";\r\n\r\ncontract PositionsManager is IPositionsManager, Initializable, OwnableUpgradeable {\r\n    using SaferERC20 for IERC20;\r\n    using UintArray for uint256[];\r\n    using AddressArray for address[];\r\n\r\n    Position[] public positions;\r\n    mapping(uint256 => bool) public positionClosed; // Is position open\r\n    mapping(address => uint256[]) public userPositions; // Mapping from user address to a list of position IDs belonging to the user\r\n    address payable[] public banks;\r\n    address public universalSwap;\r\n    address public networkToken;\r\n    address public stableToken; // Stable token such as USDC or BUSD is used to measure the value of the position using the function closeToUSDC\r\n    mapping(address => bool) public keepers;\r\n\r\n    function initialize(address _universalSwap, address _stableToken) public initializer {\r\n        universalSwap = _universalSwap;\r\n        stableToken = _stableToken;\r\n        networkToken = IUniversalSwap(_universalSwap).networkToken();\r\n        positions.push();\r\n        __Ownable_init();\r\n    }\r\n\r\n    ///-------------Modifiers-------------\r\n    modifier notClosed(uint positionId) {\r\n        require(positionClosed[positionId]!=true, \"12\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPositionOwner(uint positionId) {\r\n        require(positions[positionId].user == msg.sender, \"1\");\r\n        _;\r\n    }\r\n\r\n    ///-------------Public view functions-------------\r\n    /// @inheritdoc IPositionsManager\r\n    function numPositions() external view returns (uint256) {\r\n        return positions.length;\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function getBanks() external view returns (address payable[] memory) {\r\n        return banks;\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function getPositions(address user) external view returns (uint256[] memory) {\r\n        return userPositions[user];\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function getPosition(uint256 positionId) external view returns (Position memory position) {\r\n        return positions[positionId];\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function recommendBank(address lpToken) external view returns (address[] memory, uint256[] memory) {\r\n        uint256[] memory tokenIds;\r\n        address[] memory supportedBanks;\r\n        for (uint256 i = 0; i < banks.length; i++) {\r\n            (bool success, uint256 tokenId) = BankBase(banks[i]).getIdFromLpToken(lpToken);\r\n            if (success) {\r\n                supportedBanks = supportedBanks.append(banks[i]);\r\n                tokenIds = tokenIds.append(tokenId);\r\n            }\r\n        }\r\n        return (supportedBanks, tokenIds);\r\n    }\r\n\r\n    ///-------------Core logic-------------\r\n    /// @inheritdoc IPositionsManager\r\n    function adjustLiquidationPoints(uint256 positionId, LiquidationCondition[] memory _liquidationPoints) external notClosed(positionId) onlyPositionOwner(positionId) {\r\n        Position storage position = positions[positionId];\r\n        delete position.liquidationPoints;\r\n        for (uint256 i = 0; i < _liquidationPoints.length; i++) {\r\n            position.liquidationPoints.push(_liquidationPoints[i]);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function depositInExisting(\r\n        uint256 positionId,\r\n        Provided memory provided,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions,\r\n        uint256[] memory minAmounts\r\n    ) external payable notClosed(positionId) onlyPositionOwner(positionId) {\r\n        Position storage position = positions[positionId];\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        uint256[] memory amountsUsed;\r\n        (address[] memory underlying, uint256[] memory ratios) = bank.getUnderlyingForRecurringDeposit(\r\n            position.bankToken\r\n        );\r\n        if (minAmounts.length > 0) {\r\n            for (uint256 i = 0; i < provided.tokens.length; i++) {\r\n                IERC20(provided.tokens[i]).safeTransferFrom(msg.sender, universalSwap, provided.amounts[i]);\r\n            }\r\n            for (uint256 i = 0; i < provided.nfts.length; i++) {\r\n                IERC721Upgradeable(provided.nfts[i].manager).safeTransferFrom(msg.sender, universalSwap, provided.nfts[i].tokenId);\r\n            }\r\n            amountsUsed = IUniversalSwap(universalSwap).swapAfterTransfer{value: msg.value}(\r\n                provided,\r\n                swaps,\r\n                conversions,\r\n                Desired(underlying, new Asset[](0), ratios, minAmounts),\r\n                address(bank)\r\n            );\r\n            if (msg.value > 0) {\r\n                provided.tokens = provided.tokens.append(address(0));\r\n                provided.amounts = provided.amounts.append(msg.value);\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < provided.tokens.length; i++) {\r\n                IERC20(provided.tokens[i]).safeTransferFrom(msg.sender, address(bank), provided.amounts[i]);\r\n            }\r\n            if (msg.value > 0) {\r\n                provided.tokens = provided.tokens.append(address(0));\r\n                provided.amounts = provided.amounts.append(msg.value);\r\n                payable(address(bank)).transfer(msg.value);\r\n            }\r\n            amountsUsed = provided.amounts;\r\n        }\r\n        uint256 minted = bank.mintRecurring(position.bankToken, address(uint160(positionId)), underlying, amountsUsed);\r\n        position.amount += minted;\r\n        emit IncreasePosition(positionId, minted, IUniversalSwap(universalSwap).estimateValue(provided, stableToken));\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function deposit(\r\n        Position memory position,\r\n        address[] memory suppliedTokens,\r\n        uint256[] memory suppliedAmounts\r\n    ) external payable returns (uint256) {\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        address lpToken = bank.getLPToken(position.bankToken);\r\n        require(IUniversalSwap(universalSwap).isSupported(lpToken), \"2\"); // UnsupportedToken\r\n        require((msg.value > 0 && suppliedTokens.length == 0) || (msg.value == 0 && suppliedTokens.length > 0), \"6\");\r\n        for (uint256 i = 0; i < suppliedTokens.length; i++) {\r\n            IERC20(suppliedTokens[i]).safeTransferFrom(msg.sender, address(bank), suppliedAmounts[i]);\r\n        }\r\n        if (msg.value > 0) {\r\n            suppliedTokens = new address[](1);\r\n            suppliedAmounts = new uint256[](1);\r\n            suppliedTokens[0] = address(0);\r\n            suppliedAmounts[0] = msg.value;\r\n            payable(address(bank)).transfer(msg.value);\r\n        }\r\n        uint256 minted = bank.mint(\r\n            position.bankToken,\r\n            address(uint160(positions.length)),\r\n            suppliedTokens,\r\n            suppliedAmounts\r\n        );\r\n        positions.push();\r\n        Position storage newPosition = positions[positions.length - 1];\r\n        newPosition.user = position.user;\r\n        newPosition.bank = position.bank;\r\n        newPosition.bankToken = position.bankToken;\r\n        newPosition.amount = minted;\r\n        for (uint256 i = 0; i < position.liquidationPoints.length; i++) {\r\n            newPosition.liquidationPoints.push(position.liquidationPoints[i]);\r\n        }\r\n        userPositions[position.user].push(positions.length - 1);\r\n        Provided memory provided;\r\n        if (bank.isUnderlyingERC721()) {\r\n            Asset memory asset = Asset(address(0), suppliedTokens[0], suppliedAmounts[0], minted, \"\");\r\n            Asset[] memory assets = new Asset[](1);\r\n            assets[0] = asset;\r\n            provided = Provided(new address[](0), new uint256[](0), assets);\r\n        } else {\r\n            provided = Provided(suppliedTokens, suppliedAmounts, new Asset[](0));\r\n        }\r\n        emit Deposit(\r\n            positions.length - 1,\r\n            newPosition.amount,\r\n            IUniversalSwap(universalSwap).estimateValue(provided, stableToken)\r\n        );\r\n        return positions.length - 1;\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function withdraw(uint256 positionId, uint256 amount) external notClosed(positionId) onlyPositionOwner(positionId) {\r\n        Position storage position = positions[positionId];\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        require(position.amount >= amount, \"7\");\r\n        position.amount -= amount;\r\n        (address[] memory tokens, uint256[] memory amounts) = bank.burn(\r\n            position.bankToken,\r\n            address(uint160(positionId)),\r\n            amount,\r\n            msg.sender\r\n        );\r\n        Provided memory withdrawn = Provided(tokens, amounts, new Asset[](0));\r\n        emit Withdraw(positionId, amount, IUniversalSwap(universalSwap).estimateValue(withdrawn, stableToken));\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function close(uint256 positionId, uint liquidationIndex) external notClosed(positionId) {\r\n        Position storage position = positions[positionId];\r\n        require(keepers[msg.sender] || position.user == msg.sender || msg.sender == currentOwner(), \"1\");\r\n        Provided memory withdrawn = _close(positionId, position.user);\r\n        uint usdValue = IUniversalSwap(universalSwap).estimateValue(withdrawn, stableToken);\r\n        if (msg.sender==position.user) {\r\n            emit PositionClose(positionId, position.amount, usdValue);\r\n        } else {\r\n            emit Refund(positionId, position.amount, usdValue, liquidationIndex);\r\n        }\r\n        position.amount = 0;\r\n        positionClosed[positionId] = true;\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function harvestRewards(uint256 positionId) external notClosed(positionId) onlyPositionOwner(positionId) returns (address[] memory, uint256[] memory) {\r\n        Provided memory harvested = _harvest(positionId, positions[positionId].user);\r\n        emit Harvest(positionId, 0, IUniversalSwap(universalSwap).estimateValue(harvested, stableToken));\r\n        return (harvested.tokens, harvested.amounts);\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function harvestAndRecompound(\r\n        uint256 positionId,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions,\r\n        uint256[] memory minAmounts\r\n    ) external notClosed(positionId) onlyPositionOwner(positionId) returns (uint256) {\r\n        Position storage position = positions[positionId];\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        Provided memory harvested = _harvest(positionId, minAmounts.length > 0 ? universalSwap : address(bank));\r\n        (address[] memory underlying, uint256[] memory ratios) = bank.getUnderlyingForRecurringDeposit(\r\n            position.bankToken\r\n        );\r\n        uint256[] memory amounts;\r\n        if (minAmounts.length > 0) {\r\n            if (harvested.amounts.sum() > 0) {\r\n                amounts = IUniversalSwap(universalSwap).swapAfterTransfer(\r\n                    harvested,\r\n                    swaps,\r\n                    conversions,\r\n                    Desired(underlying, new Asset[](0), ratios, minAmounts),\r\n                    address(bank)\r\n                );\r\n            }\r\n        } else {\r\n            amounts = harvested.amounts;\r\n        }\r\n        uint256 newLpTokens;\r\n        if (amounts.sum() > 0) {\r\n            newLpTokens = bank.mintRecurring(position.bankToken, address(uint160(positionId)), underlying, amounts);\r\n            position.amount += newLpTokens;\r\n        }\r\n        emit HarvestRecompound(positionId, newLpTokens, IUniversalSwap(universalSwap).estimateValue(harvested, stableToken));\r\n        return newLpTokens;\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function botLiquidate(\r\n        uint256 positionId,\r\n        uint256 liquidationIndex,\r\n        uint256 liquidationFee,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions\r\n    ) external notClosed(positionId) {\r\n        Position storage position = positions[positionId];\r\n        require(keepers[msg.sender] || position.user == msg.sender || msg.sender == currentOwner(), \"1\");\r\n        Provided memory positionAssets = _close(positionId, universalSwap);\r\n        uint256 positionValue = IUniversalSwap(universalSwap).estimateValue(positionAssets, networkToken);\r\n        uint256 desiredTokenObtained;\r\n        {\r\n            address[] memory wanted = new address[](2);\r\n            uint256[] memory ratios = new uint256[](2);\r\n            wanted[0] = position.liquidationPoints[liquidationIndex].liquidateTo;\r\n            wanted[1] = address(0);\r\n            ratios[0] = positionValue;\r\n            ratios[1] = liquidationFee;\r\n            uint256[] memory valuesOut = IUniversalSwap(universalSwap).swapAfterTransfer(\r\n                Provided(positionAssets.tokens, positionAssets.amounts, new Asset[](0)),\r\n                swaps,\r\n                conversions,\r\n                Desired(wanted, new Asset[](0), ratios, new uint256[](2)),\r\n                address(this)\r\n            );\r\n            desiredTokenObtained = valuesOut[0];\r\n            IERC20(position.liquidationPoints[liquidationIndex].liquidateTo).safeTransfer(position.user, desiredTokenObtained);\r\n            require(address(this).balance>=liquidationFee*95/100, \"3\"); // 5% slippage for liquidation fee\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n        {\r\n            positionValue = IUniversalSwap(universalSwap).estimateValue(positionAssets, stableToken);\r\n            uint256 minUsdOut = (positionValue * (10 ** 18 - position.liquidationPoints[liquidationIndex].slippage)) /\r\n                10 ** 18;\r\n            uint256 usdOut = IUniversalSwap(universalSwap).estimateValueERC20(\r\n                position.liquidationPoints[liquidationIndex].liquidateTo,\r\n                desiredTokenObtained,\r\n                stableToken\r\n            );\r\n            require(usdOut > minUsdOut, \"3\");\r\n        }\r\n        emit BotLiquidate(positionId, position.amount, positionValue, liquidationIndex);\r\n        position.amount = 0;\r\n        positionClosed[positionId] = true;\r\n    }\r\n\r\n    ///-------------Permissioned functions-------------\r\n    /// @inheritdoc IPositionsManager\r\n    function setKeeper(address keeperAddress, bool active) external onlyOwner {\r\n        keepers[keeperAddress] = active;\r\n    }\r\n\r\n    /// @inheritdoc IPositionsManager\r\n    function setBanks(address payable[] memory _banks) external onlyOwner {\r\n        banks = _banks;\r\n    }\r\n\r\n    ///-------------Internal logic-------------\r\n\r\n    function _harvest(uint256 positionId, address receiver) internal returns (Provided memory harvested) {\r\n        Position storage position = positions[positionId];\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        (address[] memory rewards, uint256[] memory rewardAmounts) = bank.harvest(\r\n            position.bankToken,\r\n            address(uint160(positionId)),\r\n            receiver\r\n        );\r\n        harvested = Provided(rewards, rewardAmounts, new Asset[](0));\r\n    }\r\n\r\n    function _close(uint positionId, address receiver) internal returns (Provided memory assets) {\r\n        Position storage position = positions[positionId];\r\n        BankBase bank = BankBase(payable(position.bank));\r\n        address[] memory tokens;\r\n        uint256[] memory tokenAmounts;\r\n        Provided memory positionAssets;\r\n        (address[] memory rewardAddresses, uint256[] memory rewardAmounts) = bank.harvest(\r\n            position.bankToken,\r\n            address(uint160(positionId)),\r\n            receiver\r\n        );\r\n        (address[] memory outTokens, uint256[] memory outTokenAmounts) = bank.burn(\r\n            position.bankToken,\r\n            address(uint160(positionId)),\r\n            position.amount,\r\n            receiver\r\n        );\r\n        tokens = rewardAddresses.concat(outTokens);\r\n        tokenAmounts = rewardAmounts.concat(outTokenAmounts);\r\n        positionAssets = Provided(tokens, tokenAmounts, new Asset[](0));\r\n        return positionAssets;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/Swappers/UniswapV2Swapper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/UniswapV2/IUniswapV2Router02.sol\";\nimport \"../interfaces/UniswapV2/IUniswapV2Pair.sol\";\nimport \"../interfaces/UniswapV2/IUniswapV2Factory.sol\";\nimport \"../interfaces/ISwapper.sol\";\nimport \"../libraries/SaferERC20.sol\";\nimport \"hardhat/console.sol\";\n\ncontract UniswapV2Swapper is ISwapper, Ownable {\n    using SaferERC20 for IERC20;\n\n    IUniswapV2Router02 public router;\n    address[] public commonPoolTokens; // Common pool tokens are used to test different swap paths with commonly used pool tokens to find the best swaps\n\n    constructor(address _router, address[] memory _commonPoolTokens) {\n        router = IUniswapV2Router02(_router);\n        commonPoolTokens = _commonPoolTokens;\n    }\n\n    function getCommonPoolTokens() external view returns (address[] memory) {\n        return commonPoolTokens;\n    }\n\n    function swap(uint256 amount, address[] memory path, address self) external payable returns (uint256 obtained) {\n        if (path.length == 0 || path[0] == path[path.length - 1] || amount == 0) {\n            return amount;\n        }\n        IUniswapV2Router02 routerContract = IUniswapV2Router02(UniswapV2Swapper(self).router());\n        IERC20(path[0]).safeIncreaseAllowance(address(routerContract), amount);\n        try routerContract.getAmountsOut(amount, path) returns (uint256[] memory amountsOut) {\n            if (amountsOut[amountsOut.length - 1] == 0) return 0;\n            routerContract.swapExactTokensForTokens(amount, 0, path, address(this), block.timestamp);\n            return amountsOut[amountsOut.length - 1];\n        } catch {\n            return 0;\n        }\n    }\n\n    function _findBestPool(address token, IUniswapV2Router02 routerContract) internal view returns (address) {\n        address bestPairToken;\n        uint256 maxTokenAmount;\n        IUniswapV2Factory factory = IUniswapV2Factory(routerContract.factory());\n        for (uint256 i = 0; i < commonPoolTokens.length; i++) {\n            address pairAddress = factory.getPair(token, commonPoolTokens[i]);\n            if (pairAddress != address(0)) {\n                IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\n                (uint256 r0, uint256 r1, ) = pair.getReserves();\n                uint256 tokenAvailable = pair.token0() == token ? r0 : r1;\n                if (tokenAvailable > maxTokenAmount) {\n                    maxTokenAmount = tokenAvailable;\n                    bestPairToken = pair.token0() == token ? pair.token1() : pair.token0();\n                }\n            }\n        }\n        return bestPairToken;\n    }\n\n    function _calculateAmountsUsed(\n        address tokenIn,\n        address pathAddress,\n        uint[][][] memory amountsForSwaps,\n        SwapPoint[] memory priorSwaps\n    ) internal view returns (uint tokenInAmount, uint tokenOutAmount) {\n        for (uint priorSwapIndex = 0; priorSwapIndex < priorSwaps.length; priorSwapIndex++) {\n            SwapPoint memory priorSwap = priorSwaps[priorSwapIndex];\n            for (uint priorSwapperIndex = 0; priorSwapperIndex < priorSwap.swappers.length; priorSwapperIndex++) {\n                if (priorSwap.swappers[priorSwapperIndex] == address(this)) {\n                    for (\n                        uint priorSwapperPathIndex = 1;\n                        priorSwapperPathIndex < priorSwap.paths[priorSwapperIndex].length;\n                        priorSwapperPathIndex++\n                    ) {\n                        address tokenInPrior = priorSwap.paths[priorSwapperIndex][priorSwapperPathIndex - 1];\n                        address tokenOutPrior = priorSwap.paths[priorSwapperIndex][priorSwapperPathIndex];\n                        if (tokenInPrior == tokenIn && tokenOutPrior == pathAddress) {\n                            tokenInAmount += amountsForSwaps[priorSwapIndex][priorSwapperIndex][\n                                priorSwapperPathIndex - 1\n                            ];\n                        } else if (tokenInPrior == pathAddress && tokenOutPrior == tokenIn) {\n                            tokenOutAmount += amountsForSwaps[priorSwapIndex][priorSwapperIndex][\n                                priorSwapperPathIndex - 1\n                            ];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function _calculateAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        uint tokenInAmount,\n        uint tokenOutAmount\n    ) internal view returns (uint) {\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(tokenIn, tokenOut));\n        uint rIn;\n        uint rOut;\n        if (pair.token0() == tokenIn) {\n            (rIn, rOut, ) = pair.getReserves();\n        } else {\n            (rOut, rIn, ) = pair.getReserves();\n        }\n        (bool success, bytes memory returnData) = address(pair).staticcall(abi.encodeWithSignature(\"swapFee()\"));\n        if (!success) {\n            try router.getAmountOut(tokenInAmount, rIn, rOut) returns (uint256 amount) {\n                rIn += tokenInAmount;\n                rOut -= amount;\n            } catch {}\n            try router.getAmountOut(tokenOutAmount, rOut, rIn) returns (uint256 amount) {\n                rOut += tokenOutAmount;\n                rIn -= amount;\n            } catch {}\n            try router.getAmountOut(amountIn, rIn, rOut) returns (uint256 amount) {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            uint32 fee = abi.decode(returnData, (uint32));\n            try router.getAmountOut(tokenInAmount, rIn, rOut, fee) returns (uint256 amount) {\n                rIn += tokenInAmount;\n                rOut -= amount;\n            } catch {}\n            try router.getAmountOut(tokenOutAmount, rOut, rIn, fee) returns (uint256 amount) {\n                rOut += tokenOutAmount;\n                rIn -= amount;\n            } catch {}\n            try router.getAmountOut(amountIn, rIn, rOut, fee) returns (uint256 amount) {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function getAmountsOutWithPath(\n        uint256 amount,\n        address[] memory path,\n        uint[][][] memory amountsForSwaps,\n        SwapPoint[] memory priorSwaps\n    ) external view returns (uint256[] memory amountsOut) {\n        if (path.length == 0 || path[0] == path[path.length - 1] || amount == 0) {\n            amountsOut = new uint[](2);\n            amountsOut[0] = amount;\n            amountsOut[1] = amount;\n            return amountsOut;\n        }\n        amountsOut = new uint[](path.length);\n        amountsOut[0] = amount;\n        for (uint i = 1; i < path.length; i++) {\n            (uint tokenInAmount, uint tokenOutAmount) = _calculateAmountsUsed(\n                path[i - 1],\n                path[i],\n                amountsForSwaps,\n                priorSwaps\n            );\n            amountsOut[i] = _calculateAmountOut(path[i - 1], path[i], amountsOut[i - 1], tokenInAmount, tokenOutAmount);\n            address[] memory tempPath = new address[](2);\n            tempPath[0] = path[i - 1];\n            tempPath[1] = path[i];\n        }\n    }\n\n    function getAmountOut(uint256 amount, address[] memory path) public view returns (uint256) {\n        try router.getAmountsOut(amount, path) returns (uint256[] memory amountsOut) {\n            return amountsOut[amountsOut.length - 1];\n        } catch {\n            return 0;\n        }\n    }\n\n    function getPrice(address token, address inTermsOf) public view returns (uint256) {\n        if (token == inTermsOf) return (uint256(10) ** ERC20(token).decimals());\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n        address poolAddress = factory.getPair(token, inTermsOf);\n        if (poolAddress != address(0)) {\n            IUniswapV2Pair pair = IUniswapV2Pair(poolAddress);\n            (uint256 r0, uint256 r1, ) = pair.getReserves();\n            if (token == pair.token0()) {\n                return ((r1 * uint256(10) ** ERC20(token).decimals()) / r0);\n            } else {\n                return ((r0 * uint256(10) ** ERC20(token).decimals()) / r1);\n            }\n        }\n        return 0;\n    }\n\n    function checkSwappable(address inToken) external view returns (bool) {\n        address factoryAddress = router.factory();\n        IUniswapV2Factory factory = IUniswapV2Factory(factoryAddress);\n        for (uint256 i = 0; i < commonPoolTokens.length; i++) {\n            if (inToken == commonPoolTokens[i]) return true;\n            uint256 tokenWorth = getPrice(commonPoolTokens[i], commonPoolTokens[1]);\n            address pair = factory.getPair(inToken, commonPoolTokens[i]);\n            if (pair == address(0)) continue;\n            uint256 bal = IERC20(commonPoolTokens[i]).balanceOf(pair);\n            uint256 poolUsd = (bal * tokenWorth) /\n                (10 ** ERC20(commonPoolTokens[i]).decimals() * 10 ** ERC20(commonPoolTokens[1]).decimals());\n            if (poolUsd > 1000) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/UniversalSwap/ConversionHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../interfaces/IPoolInteractor.sol\";\r\nimport \"../interfaces/IUniversalSwap.sol\";\r\nimport \"../libraries/UintArray.sol\";\r\nimport \"../libraries/AddressArray.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"../libraries/Conversions.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract ConversionHelper {\r\n    using UintArray for uint256[];\r\n    using AddressArray for address[];\r\n    using Conversions for Conversion[];\r\n\r\n    IUniversalSwap public universalSwap;\r\n\r\n    constructor(IUniversalSwap _universalSwap) {\r\n        universalSwap = _universalSwap;\r\n    }\r\n\r\n    ///-------------Public view functions-------------\r\n    function prepareConversions(\r\n        address[] memory desiredERC20s,\r\n        Asset[] memory desiredERC721s,\r\n        uint256[] memory ratios,\r\n        uint256 totalAvailable\r\n    ) public view returns (Conversion[] memory conversions) {\r\n        ratios = ratios.scale(totalAvailable);\r\n        for (uint256 i = 0; i < desiredERC20s.length; i++) {\r\n            conversions = conversions.concat(_getConversionsERC20(desiredERC20s[i], ratios[i]));\r\n        }\r\n        for (uint256 i = 0; i < desiredERC721s.length; i++) {\r\n            conversions = conversions.concat(\r\n                _getConversionsERC721(desiredERC721s[i], ratios[desiredERC20s.length + i])\r\n            );\r\n        }\r\n    }\r\n\r\n    function simulateConversions(\r\n        Conversion[] memory conversions,\r\n        address[] memory outputTokens,\r\n        address[] memory inputTokens,\r\n        uint256[] memory inputAmounts\r\n    ) public view returns (uint256[] memory amounts) {\r\n        amounts = new uint256[](conversions.length);\r\n        uint256 amountsAdded;\r\n        for (uint256 i = 0; i < conversions.length; i++) {\r\n            if (conversions[i].desiredERC721.manager != address(0)) {\r\n                (uint256 liquidity, uint256[] memory newAmounts) = _simulateConversionERC721(\r\n                    conversions[i],\r\n                    inputTokens,\r\n                    inputAmounts\r\n                );\r\n                inputAmounts = newAmounts;\r\n                amounts[amountsAdded] = liquidity;\r\n                amountsAdded += 1;\r\n            } else {\r\n                (uint256 amountObtained, uint256[] memory newAmounts) = _simulateConversionERC20(\r\n                    conversions[i],\r\n                    inputTokens,\r\n                    inputAmounts\r\n                );\r\n                inputAmounts = newAmounts;\r\n                if (outputTokens.exists(conversions[i].desiredERC20) && conversions[i].underlying.length != 0) {\r\n                    amounts[amountsAdded] = amountObtained;\r\n                    amountsAdded += 1;\r\n                } else {\r\n                    inputTokens = inputTokens.append(conversions[i].desiredERC20);\r\n                    inputAmounts.append(amountObtained);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ///-------------Internal logic-------------\r\n    function _getConversionsERC20(address desired, uint256 valueAllocated) internal view returns (Conversion[] memory) {\r\n        (address[] memory underlying, uint256[] memory ratios) = _getUnderlyingERC20(desired);\r\n        ratios = ratios.scale(valueAllocated);\r\n        Asset memory placeholder;\r\n        Conversion[] memory conversions;\r\n        for (uint256 i = 0; i < underlying.length; i++) {\r\n            if (!universalSwap.isSimpleToken(underlying[i])) {\r\n                Conversion[] memory underlyingConversions = _getConversionsERC20(underlying[i], ratios[i]);\r\n                conversions = conversions.concat(underlyingConversions);\r\n            }\r\n        }\r\n        Conversion memory finalConversion = Conversion(placeholder, desired, valueAllocated, underlying, ratios);\r\n        conversions = conversions.append(finalConversion);\r\n        return conversions;\r\n    }\r\n\r\n    function _getConversionsERC721(\r\n        Asset memory nft,\r\n        uint256 valueAllocated\r\n    ) internal view returns (Conversion[] memory) {\r\n        (address[] memory underlying, uint256[] memory ratios) = _getUnderlyingERC721(nft);\r\n        ratios = ratios.scale(valueAllocated);\r\n        Conversion[] memory conversions;\r\n        Conversion memory finalConversion = Conversion(nft, address(0), valueAllocated, underlying, ratios);\r\n        conversions = conversions.append(finalConversion);\r\n        return conversions;\r\n    }\r\n\r\n    function _simulateConversionERC20(\r\n        Conversion memory conversion,\r\n        address[] memory inputTokens,\r\n        uint256[] memory inputTokenAmounts\r\n    ) internal view returns (uint256, uint256[] memory) {\r\n        if (\r\n            (conversion.underlying[0] == conversion.desiredERC20 && conversion.underlying.length == 1) ||\r\n            conversion.desiredERC20 == address(0)\r\n        ) {\r\n            uint256 idx = inputTokens.findFirst(conversion.underlying[0]);\r\n            uint256 balance = inputTokenAmounts[idx];\r\n            inputTokenAmounts[idx] -= (balance * conversion.underlyingValues[0]) / 1e18;\r\n            return ((balance * conversion.underlyingValues[0]) / 1e18, inputTokenAmounts);\r\n        } else {\r\n            uint256[] memory amounts = new uint256[](conversion.underlying.length);\r\n            for (uint256 i = 0; i < conversion.underlying.length; i++) {\r\n                uint256 idx = inputTokens.findFirst(conversion.underlying[i]);\r\n                uint256 balance = inputTokenAmounts[idx];\r\n                uint256 amountToUse = (balance * conversion.underlyingValues[i]) / 1e18;\r\n                amounts[i] = amountToUse;\r\n                inputTokenAmounts[idx] -= amountToUse;\r\n            }\r\n            address poolInteractor = universalSwap.getProtocol(conversion.desiredERC20);\r\n            uint256 mintable = IPoolInteractor(poolInteractor).simulateMint(\r\n                conversion.desiredERC20,\r\n                conversion.underlying,\r\n                amounts\r\n            );\r\n            return (mintable, inputTokenAmounts);\r\n        }\r\n    }\r\n\r\n    function _simulateConversionERC721(\r\n        Conversion memory conversion,\r\n        address[] memory inputTokens,\r\n        uint256[] memory inputTokenAmounts\r\n    ) internal view returns (uint256, uint256[] memory) {\r\n        uint256[] memory amounts = new uint256[](conversion.underlying.length);\r\n        for (uint256 j = 0; j < conversion.underlying.length; j++) {\r\n            uint256 idx = inputTokens.findFirst(conversion.underlying[j]);\r\n            uint256 balance = inputTokenAmounts[idx];\r\n            uint256 amountToUse = (balance * conversion.underlyingValues[j]) / 1e18;\r\n            inputTokenAmounts[idx] -= amountToUse;\r\n            amounts[j] = amountToUse;\r\n        }\r\n        address poolInteractor = universalSwap.getProtocol(conversion.desiredERC721.manager);\r\n        uint256 liquidityMinted = INFTPoolInteractor(poolInteractor).simulateMint(\r\n            conversion.desiredERC721,\r\n            conversion.underlying,\r\n            amounts\r\n        );\r\n        return (liquidityMinted, inputTokenAmounts);\r\n    }\r\n\r\n    function _getUnderlyingERC20(\r\n        address token\r\n    ) internal view returns (address[] memory underlyingTokens, uint256[] memory ratios) {\r\n        if (universalSwap.isSimpleToken(token)) {\r\n            underlyingTokens = new address[](1);\r\n            underlyingTokens[0] = token != address(0) ? token : universalSwap.networkToken();\r\n            ratios = new uint256[](1);\r\n            ratios[0] = 1;\r\n        } else {\r\n            address poolInteractor = universalSwap.getProtocol(token);\r\n            if (poolInteractor != address(0)) {\r\n                IPoolInteractor poolInteractorContract = IPoolInteractor(poolInteractor);\r\n                (underlyingTokens, ratios) = poolInteractorContract.getUnderlyingTokens(token);\r\n            } else {\r\n                revert(\"UT\"); //Unsupported Token\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getUnderlyingERC721(\r\n        Asset memory nft\r\n    ) internal view returns (address[] memory underlying, uint256[] memory ratios) {\r\n        address[] memory nftPoolInteractors = universalSwap.getNFTPoolInteractors();\r\n        for (uint256 i = 0; i < nftPoolInteractors.length; i++) {\r\n            if (INFTPoolInteractor(nftPoolInteractors[i]).testSupported(nft.manager)) {\r\n                INFTPoolInteractor poolInteractor = INFTPoolInteractor(nftPoolInteractors[i]);\r\n                underlying = poolInteractor.getUnderlyingTokens(nft.pool);\r\n                ratios = new uint256[](underlying.length);\r\n                (int24 tick0, int24 tick1, , ) = abi.decode(nft.data, (int24, int24, uint256, uint256));\r\n                (uint256 ratio0, uint256 ratio1) = poolInteractor.getRatio(nft.pool, tick0, tick1);\r\n                ratios[0] = ratio0;\r\n                ratios[1] = ratio1;\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "contracts/UniversalSwap/CoreLogic.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\r\nimport \"../interfaces/IPoolInteractor.sol\";\r\nimport \"../interfaces/ISwapper.sol\";\r\nimport \"../interfaces/IUniversalSwap.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\nimport \"../libraries/UintArray.sol\";\r\nimport \"../libraries/AddressArray.sol\";\r\nimport \"../utils/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../libraries/Conversions.sol\";\r\nimport \"../libraries/SaferERC20.sol\";\r\nimport \"./UniversalSwap.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract CoreLogic {\r\n    using Address for address;\r\n    using UintArray for uint256[];\r\n    using AddressArray for address[];\r\n    using SaferERC20 for IERC20;\r\n\r\n    function _addWETH(\r\n        address[] memory tokens,\r\n        uint256[] memory amounts\r\n    ) internal returns (address[] memory, uint256[] memory) {\r\n        uint256 startingBalance = IERC20(IUniversalSwap(address(this)).networkToken()).balanceOf(address(this));\r\n        if (msg.value > 0) {\r\n            IWETH(payable(IUniversalSwap(address(this)).networkToken())).deposit{value: msg.value}();\r\n        }\r\n        if (address(this).balance > 0) {\r\n            IWETH(payable(IUniversalSwap(address(this)).networkToken())).deposit{value: address(this).balance}();\r\n        }\r\n        uint256 ethSupplied = IERC20(IUniversalSwap(address(this)).networkToken()).balanceOf(address(this)) - startingBalance;\r\n        if (ethSupplied > 0) {\r\n            tokens = tokens.append(IUniversalSwap(address(this)).networkToken());\r\n            amounts = amounts.append(ethSupplied);\r\n        }\r\n        uint addressZeroIndex = tokens.findFirst(address(0));\r\n        if (addressZeroIndex != tokens.length) {\r\n            tokens.remove(addressZeroIndex);\r\n            amounts.remove(addressZeroIndex);\r\n        }\r\n        return (tokens, amounts);\r\n    }\r\n\r\n    function _burn(\r\n        address token,\r\n        uint256 amount\r\n    ) internal returns (address[] memory underlyingTokens, uint256[] memory underlyingTokenAmounts) {\r\n        address poolInteractor = IUniversalSwap(address(this)).getProtocol(token);\r\n        bytes memory data = poolInteractor.functionDelegateCall(\r\n            abi.encodeWithSelector(IPoolInteractor(poolInteractor).burn.selector, token, amount, poolInteractor)\r\n        );\r\n        (underlyingTokens, underlyingTokenAmounts) = abi.decode(data, (address[], uint256[]));\r\n    }\r\n\r\n    function _mint(\r\n        address toMint,\r\n        address[] memory underlyingTokens,\r\n        uint256[] memory underlyingAmounts,\r\n        address receiver\r\n    ) internal returns (uint256 amountMinted) {\r\n        if (toMint == underlyingTokens[0]) return underlyingAmounts[0];\r\n        if (toMint == address(0)) {\r\n            IWETH(payable(IUniversalSwap(address(this)).networkToken())).withdraw(underlyingAmounts[0]);\r\n            payable(receiver).transfer(underlyingAmounts[0]);\r\n            return underlyingAmounts[0];\r\n        }\r\n        address poolInteractor = IUniversalSwap(address(this)).getProtocol(toMint);\r\n        bytes memory returnData = poolInteractor.functionDelegateCall(\r\n            abi.encodeWithSelector(\r\n                IPoolInteractor(poolInteractor).mint.selector,\r\n                toMint,\r\n                underlyingTokens,\r\n                underlyingAmounts,\r\n                receiver,\r\n                poolInteractor\r\n            )\r\n        );\r\n        amountMinted = abi.decode(returnData, (uint256));\r\n    }\r\n\r\n    function _simplifyInputTokens(\r\n        address[] memory inputTokens,\r\n        uint256[] memory inputTokenAmounts\r\n    ) internal returns (address[] memory, uint256[] memory) {\r\n        bool allSimiplified = true;\r\n        address[] memory updatedTokens = inputTokens;\r\n        uint256[] memory updatedTokenAmounts = inputTokenAmounts;\r\n        for (uint256 i = 0; i < inputTokens.length; i++) {\r\n            if (!IUniversalSwap(address(this)).isSimpleToken(inputTokens[i])) {\r\n                allSimiplified = false;\r\n                (address[] memory newTokens, uint256[] memory newTokenAmounts) = _burn(\r\n                    inputTokens[i],\r\n                    inputTokenAmounts[i]\r\n                );\r\n                updatedTokens[i] = newTokens[0];\r\n                updatedTokenAmounts[i] = newTokenAmounts[0];\r\n                address[] memory tempTokens = new address[](updatedTokens.length + newTokens.length - 1);\r\n                uint256[] memory tempTokenAmounts = new uint256[](\r\n                    updatedTokenAmounts.length + newTokenAmounts.length - 1\r\n                );\r\n                uint256 j = 0;\r\n                while (j < updatedTokens.length) {\r\n                    tempTokens[j] = updatedTokens[j];\r\n                    tempTokenAmounts[j] = updatedTokenAmounts[j];\r\n                    j++;\r\n                }\r\n                uint256 k = 0;\r\n                while (k < newTokens.length - 1) {\r\n                    tempTokens[j + k] = newTokens[k + 1];\r\n                    tempTokenAmounts[j + k] = newTokenAmounts[k + 1];\r\n                    k++;\r\n                }\r\n                updatedTokens = tempTokens;\r\n                updatedTokenAmounts = tempTokenAmounts;\r\n            }\r\n        }\r\n        if (allSimiplified) {\r\n            return (inputTokens, inputTokenAmounts);\r\n        } else {\r\n            return _simplifyInputTokens(updatedTokens, updatedTokenAmounts);\r\n        }\r\n    }\r\n\r\n    function collectAndBreak(\r\n        address[] memory inputTokens,\r\n        uint256[] memory inputTokenAmounts,\r\n        Asset[] memory inputNFTs\r\n    ) public payable returns (address[] memory, uint256[] memory) {\r\n        for (uint256 i = 0; i < inputTokenAmounts.length; i++) {\r\n            if (inputTokens[i] == address(0)) continue;\r\n            IERC20(inputTokens[i]).safeTransferFrom(msg.sender, address(this), inputTokenAmounts[i]);\r\n        }\r\n        for (uint256 i = 0; i < inputNFTs.length; i++) {\r\n            IERC721Upgradeable(inputNFTs[i].manager).transferFrom(msg.sender, address(this), inputNFTs[i].tokenId);\r\n        }\r\n        return breakAssets(inputTokens, inputTokenAmounts, inputNFTs);\r\n    }\r\n\r\n    function breakAssets(\r\n        address[] memory inputTokens,\r\n        uint256[] memory inputTokenAmounts,\r\n        Asset[] memory inputNFTs\r\n    ) public payable returns (address[] memory, uint256[] memory) {\r\n        for (uint256 i = 0; i < inputNFTs.length; i++) {\r\n            Asset memory nft = inputNFTs[i];\r\n            address nftPoolInteractor = IUniversalSwap(address(this)).getProtocol(nft.manager);\r\n            if (nftPoolInteractor == address(0)) revert(\"UT\");\r\n            bytes memory returnData = nftPoolInteractor.functionDelegateCall(\r\n                abi.encodeWithSelector(INFTPoolInteractor(nftPoolInteractor).burn.selector, nft)\r\n            );\r\n            (address[] memory nftTokens, uint256[] memory nftTokenAmounts) = abi.decode(\r\n                returnData,\r\n                (address[], uint256[])\r\n            );\r\n            inputTokens = inputTokens.concat(nftTokens);\r\n            inputTokenAmounts = inputTokenAmounts.concat(nftTokenAmounts);\r\n        }\r\n        (address[] memory simplifiedTokens, uint256[] memory simplifiedTokenAmounts) = _simplifyInputTokens(\r\n            inputTokens,\r\n            inputTokenAmounts\r\n        );\r\n        (simplifiedTokens, simplifiedTokenAmounts) = _addWETH(simplifiedTokens, simplifiedTokenAmounts);\r\n        (simplifiedTokens, simplifiedTokenAmounts) = simplifiedTokens.shrink(simplifiedTokenAmounts);\r\n        simplifiedTokenAmounts = _collectFee(simplifiedTokens, simplifiedTokenAmounts);\r\n        return (simplifiedTokens, simplifiedTokenAmounts);\r\n    }\r\n\r\n    function _collectFee(address[] memory tokens, uint[] memory amounts) internal returns (uint[] memory) {\r\n        for (uint i = 0; i<tokens.length; i++) {\r\n            IERC20(tokens[i]).safeTransfer(\r\n                IUniversalSwap(address(this)).treasury(),\r\n                amounts[i]*IUniversalSwap(address(this)).devFee()/100000\r\n            );\r\n            amounts[i]-=amounts[i]*IUniversalSwap(address(this)).devFee()/100000;\r\n        }\r\n        return amounts;\r\n    }\r\n\r\n    function _conductERC20Conversion(\r\n        Conversion memory conversion,\r\n        address receiver,\r\n        address[] memory tokensAvailable,\r\n        uint256[] memory amountsAvailable\r\n    ) internal returns (uint256) {\r\n        if ((conversion.underlying[0] == conversion.desiredERC20 && conversion.underlying.length == 1)) {\r\n            uint256 tokenToUseIndex = tokensAvailable.findFirst(conversion.underlying[0]);\r\n            uint256 balance = amountsAvailable[tokenToUseIndex];\r\n            uint256 amountToUse = (balance * conversion.underlyingValues[0]) / 1e18;\r\n            IERC20(conversion.underlying[0]).safeTransfer(receiver, amountToUse);\r\n            amountsAvailable[tokenToUseIndex] -= amountToUse;\r\n            return amountToUse;\r\n        } else {\r\n            uint256[] memory inputTokenAmounts = new uint256[](conversion.underlying.length);\r\n            for (uint256 i = 0; i < conversion.underlying.length; i++) {\r\n                uint256 tokenToUseIndex = tokensAvailable.findFirst(conversion.underlying[i]);\r\n                uint256 balance = amountsAvailable[tokenToUseIndex];\r\n                uint256 amountToUse = (balance * conversion.underlyingValues[i]) / 1e18;\r\n                amountsAvailable[tokenToUseIndex] -= amountToUse;\r\n                inputTokenAmounts[i] = amountToUse;\r\n            }\r\n            return _mint(conversion.desiredERC20, conversion.underlying, inputTokenAmounts, receiver);\r\n        }\r\n    }\r\n\r\n    function _conductERC721Conversion(\r\n        Conversion memory conversion,\r\n        address receiver,\r\n        address[] memory tokensAvailable,\r\n        uint256[] memory amountsAvailable\r\n    ) internal returns (uint256) {\r\n        Asset memory nft = conversion.desiredERC721;\r\n        address nftPoolInteractor = IUniversalSwap(address(this)).getProtocol(nft.manager);\r\n        if (nftPoolInteractor == address(0)) revert(\"UT\");\r\n        uint256[] memory inputTokenAmounts = new uint256[](conversion.underlying.length);\r\n        for (uint256 j = 0; j < conversion.underlying.length; j++) {\r\n            uint256 tokenToUseIndex = tokensAvailable.findFirst(conversion.underlying[j]);\r\n            uint256 balance = amountsAvailable[tokenToUseIndex];\r\n            uint256 amountToUse = (balance * conversion.underlyingValues[j]) / 1e18;\r\n            amountsAvailable[tokenToUseIndex] -= amountToUse;\r\n            // uint balance = IERC20(conversion.underlying[j]).balanceOf(address(this));\r\n            // uint amountToUse = balance*conversion.underlyingValues[j]/1e18;\r\n            inputTokenAmounts[j] = amountToUse;\r\n        }\r\n        bytes memory returnData = nftPoolInteractor.functionDelegateCall(\r\n            abi.encodeWithSelector(\r\n                INFTPoolInteractor(nftPoolInteractor).mint.selector,\r\n                nft,\r\n                conversion.underlying,\r\n                inputTokenAmounts,\r\n                receiver\r\n            )\r\n        );\r\n        uint256 tokenId = abi.decode(returnData, (uint256));\r\n        return tokenId;\r\n    }\r\n\r\n    function _conductConversions(\r\n        Conversion[] memory conversions,\r\n        address[] memory outputTokens,\r\n        uint256[] memory minAmountsOut,\r\n        address receiver,\r\n        address[] memory tokensAvailable,\r\n        uint256[] memory amountsAvailable\r\n    ) internal returns (uint256[] memory amounts) {\r\n        amounts = new uint256[](conversions.length);\r\n        uint256 amountsAdded;\r\n        for (uint256 i = 0; i < conversions.length; i++) {\r\n            if (conversions[i].desiredERC721.manager != address(0)) {\r\n                uint256 tokenId = _conductERC721Conversion(conversions[i], receiver, tokensAvailable, amountsAvailable);\r\n                amounts[amountsAdded] = tokenId;\r\n                amountsAdded += 1;\r\n            } else {\r\n                uint256 amountObtained = _conductERC20Conversion(\r\n                    conversions[i],\r\n                    receiver,\r\n                    tokensAvailable,\r\n                    amountsAvailable\r\n                );\r\n                if (outputTokens.exists(conversions[i].desiredERC20) && conversions[i].underlying.length != 0) {\r\n                    amounts[amountsAdded] = amountObtained;\r\n                    require(amountObtained >= minAmountsOut[amountsAdded], \"3\");\r\n                    amountsAdded += 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _conductSwaps(\r\n        SwapPoint[] memory swaps,\r\n        address[] memory tokens,\r\n        uint256[] memory amounts\r\n    ) internal returns (address[] memory tokensObtained, uint256[] memory amountsObtained) {\r\n        tokensObtained = new address[](swaps.length);\r\n        amountsObtained = new uint256[](swaps.length);\r\n        for (uint256 i = 0; i < swaps.length; i++) {\r\n            uint256 amount = (swaps[i].amountIn * amounts[tokens.findFirst(swaps[i].tokenIn)]) / 1e18;\r\n            for (uint256 j = 0; j < swaps[i].swappers.length; j++) {\r\n                bytes memory returnData = swaps[i].swappers[j].functionDelegateCall(\r\n                    abi.encodeWithSelector(\r\n                        ISwapper(swaps[i].swappers[j]).swap.selector,\r\n                        amount,\r\n                        swaps[i].paths[j],\r\n                        swaps[i].swappers[j]\r\n                    )\r\n                );\r\n                amount = abi.decode(returnData, (uint256));\r\n            }\r\n            tokensObtained[i] = swaps[i].tokenOut;\r\n            amountsObtained[i] = amount;\r\n        }\r\n        (tokensObtained, amountsObtained) = tokensObtained.shrink(amountsObtained);\r\n    }\r\n\r\n    function swap(\r\n        Provided memory provided,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions,\r\n        Desired memory desired,\r\n        address receiver\r\n    ) public payable returns (uint256[] memory) {\r\n        if (swaps.length == 0 || conversions.length == 0) {\r\n            (swaps, conversions) = IUniversalSwap(address(this)).preSwapCalculateSwaps(provided, desired);\r\n        }\r\n        require(provided.tokens.length > 0, \"4\");\r\n        (address[] memory tokensAfterSwap, uint256[] memory amountsAfterSwap) = _conductSwaps(\r\n            swaps,\r\n            provided.tokens,\r\n            provided.amounts\r\n        );\r\n        uint256[] memory amountsAndIds = _conductConversions(\r\n            conversions,\r\n            desired.outputERC20s,\r\n            desired.minAmountsOut,\r\n            receiver,\r\n            tokensAfterSwap,\r\n            amountsAfterSwap\r\n        );\r\n        address[] memory managers = new address[](desired.outputERC721s.length);\r\n        for (uint256 i = 0; i < managers.length; i++) {\r\n            managers[i] = desired.outputERC721s[i].manager;\r\n        }\r\n        return amountsAndIds;\r\n    }\r\n}"
    },
    "contracts/UniversalSwap/ProvidedHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../interfaces/IPoolInteractor.sol\";\r\nimport \"../interfaces/IUniversalSwap.sol\";\r\nimport \"../libraries/UintArray.sol\";\r\nimport \"../libraries/AddressArray.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract ProvidedHelper {\r\n    using AddressArray for address[];\r\n    using UintArray for uint256[];\r\n\r\n    IUniversalSwap public universalSwap;\r\n\r\n    constructor(IUniversalSwap _universalSwap) {\r\n        universalSwap = _universalSwap;\r\n    }\r\n\r\n    ///-------------Internal logic-------------\r\n    function simplifyWithoutWrite(\r\n        Provided memory provided\r\n    ) public view returns (address[] memory simplifiedTokens, uint256[] memory simplifiedAmounts) {\r\n        address[] memory swappers = universalSwap.getSwappers();\r\n        address[] memory poolInteractors = universalSwap.getPoolInteractors();\r\n        address[] memory nftPoolInteractors = universalSwap.getNFTPoolInteractors();\r\n\r\n        (simplifiedTokens, simplifiedAmounts) = _simplifyWithoutWriteERC20(\r\n            provided.tokens,\r\n            provided.amounts,\r\n            poolInteractors,\r\n            nftPoolInteractors,\r\n            swappers\r\n        );\r\n        (\r\n            address[] memory simplifiedTokensERC721,\r\n            uint256[] memory simplifiedAmountsERC721\r\n        ) = _simplifyWithoutWriteERC721(provided.nfts, nftPoolInteractors);\r\n        simplifiedTokens = simplifiedTokens.concat(simplifiedTokensERC721);\r\n        simplifiedAmounts = simplifiedAmounts.concat(simplifiedAmountsERC721);\r\n        (simplifiedTokens, simplifiedAmounts) = simplifiedTokens.shrink(simplifiedAmounts);\r\n    }\r\n\r\n    ///-------------Internal logic-------------\r\n    function _simplifyWithoutWriteERC20(\r\n        address[] memory tokens,\r\n        uint256[] memory amounts,\r\n        address[] memory poolInteractors,\r\n        address[] memory nftPoolInteractors,\r\n        address[] memory swappers\r\n    ) internal view returns (address[] memory simplifiedTokens, uint256[] memory simplifiedAmounts) {\r\n        address networkToken = universalSwap.networkToken();\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (universalSwap.isSimpleToken(tokens[i])) {\r\n                if (tokens[i] != address(0)) {\r\n                    simplifiedTokens = simplifiedTokens.append(tokens[i]);\r\n                } else {\r\n                    simplifiedTokens = simplifiedTokens.append(networkToken);\r\n                }\r\n                simplifiedAmounts = simplifiedAmounts.append(amounts[i]);\r\n                continue;\r\n            }\r\n            for (uint256 j = 0; j < poolInteractors.length; j++) {\r\n                if (IPoolInteractor(poolInteractors[j]).testSupported(tokens[i])) {\r\n                    (address[] memory brokenTokens, uint256[] memory brokenAmounts) = IPoolInteractor(\r\n                        poolInteractors[j]\r\n                    ).getUnderlyingAmount(tokens[i], amounts[i]);\r\n                    (address[] memory simpleTokens, uint256[] memory simpleAmounts) = _simplifyWithoutWriteERC20(\r\n                        brokenTokens,\r\n                        brokenAmounts,\r\n                        poolInteractors,\r\n                        nftPoolInteractors,\r\n                        swappers\r\n                    );\r\n                    simplifiedTokens = simplifiedTokens.concat(simpleTokens);\r\n                    simplifiedAmounts = simplifiedAmounts.concat(simpleAmounts);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _simplifyWithoutWriteERC721(\r\n        Asset[] memory nfts,\r\n        address[] memory nftPoolInteractors\r\n    ) internal view returns (address[] memory simplifiedTokens, uint256[] memory simplifiedAmounts) {\r\n        for (uint256 i = 0; i < nfts.length; i++) {\r\n            for (uint256 j = 0; j < nftPoolInteractors.length; j++) {\r\n                if (INFTPoolInteractor(nftPoolInteractors[j]).testSupported(nfts[i].manager)) {\r\n                    (address[] memory tokens, uint256[] memory amounts) = INFTPoolInteractor(nftPoolInteractors[j])\r\n                        .getUnderlyingAmount(nfts[i]);\r\n                    simplifiedTokens = simplifiedTokens.concat(tokens);\r\n                    simplifiedAmounts = simplifiedAmounts.concat(amounts);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "contracts/UniversalSwap/SwapHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../interfaces/ISwapper.sol\";\r\nimport \"../interfaces/IUniversalSwap.sol\";\r\nimport \"../libraries/UintArray.sol\";\r\nimport \"../libraries/AddressArray.sol\";\r\nimport \"../libraries/SwapFinder.sol\";\r\nimport \"../interfaces/IOracle.sol\";\r\nimport \"../libraries/Conversions.sol\";\r\nimport \"../libraries/UintArray2D.sol\";\r\nimport \"./ConversionHelper.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract SwapHelper {\r\n    using UintArray for uint256[];\r\n    using UintArray2D for uint[][];\r\n    using AddressArray for address[];\r\n    using SwapFinder for SwapPoint[];\r\n    using SwapFinder for SwapPoint;\r\n    using Conversions for Conversion[];\r\n\r\n    struct FindSwapsBetween {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 valueNeeded;\r\n        uint256 amountInAvailable;\r\n        uint256 valueInAvailable;\r\n    }\r\n\r\n    ConversionHelper public conversionHelper;\r\n    IUniversalSwap public universapSwap;\r\n\r\n    constructor(\r\n        IUniversalSwap _universalSwap,\r\n        ConversionHelper _conversionHelper\r\n    ) {\r\n        universapSwap = _universalSwap;\r\n        conversionHelper = _conversionHelper;\r\n    }\r\n\r\n    ///-------------Internal logic-------------\r\n    function findMultipleSwaps(\r\n        address[] memory inputTokens,\r\n        uint256[] memory inputAmounts,\r\n        uint256[] memory inputValues,\r\n        address[] memory outputTokens,\r\n        uint256[] memory outputValues\r\n    ) public view returns (SwapPoint[] memory bestSwaps) {\r\n        bestSwaps = new SwapPoint[](inputTokens.length * outputTokens.length);\r\n        for (uint256 i = 0; i < inputTokens.length; i++) {\r\n            for (uint256 j = 0; j < outputTokens.length; j++) {\r\n                bestSwaps[(i * outputTokens.length) + j] = _findBestRoute(\r\n                    FindSwapsBetween(inputTokens[i], outputTokens[j], outputValues[j], inputAmounts[i], inputValues[i])\r\n                );\r\n            }\r\n        }\r\n        bestSwaps = bestSwaps.sort();\r\n        bestSwaps = bestSwaps.findBestSwaps(inputTokens, inputValues, inputAmounts, outputTokens, outputValues);\r\n    }\r\n\r\n    function getAmountsOut(\r\n        Provided memory provided,\r\n        Desired memory desired,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions\r\n    ) external view returns (uint256[] memory amounts, uint256[] memory expectedUSDValues) {\r\n        (address[] memory underlyingTokens, ) = conversions.getUnderlying();\r\n        uint256[] memory expectedAmounts;\r\n        (underlyingTokens, expectedAmounts) = simulateSwaps(swaps, provided.tokens, provided.amounts);\r\n        (underlyingTokens, expectedAmounts) = underlyingTokens.shrink(expectedAmounts);\r\n        amounts = conversionHelper.simulateConversions(conversions, desired.outputERC20s, underlyingTokens, expectedAmounts);\r\n        expectedUSDValues = new uint256[](amounts.length);\r\n        for (uint256 i = 0; i < desired.outputERC20s.length; i++) {\r\n            address[] memory token = new address[](1);\r\n            uint256[] memory amount = new uint256[](1);\r\n            token[0] = desired.outputERC20s[i];\r\n            amount[0] = amounts[i];\r\n            uint256 value = universapSwap.estimateValue(Provided(token, amount, new Asset[](0)), universapSwap.stableToken());\r\n            expectedUSDValues[i] = value;\r\n        }\r\n        for (uint256 i = 0; i < desired.outputERC721s.length; i++) {\r\n            desired.outputERC721s[i].liquidity = amounts[desired.outputERC20s.length + i];\r\n            Asset[] memory nft = new Asset[](1);\r\n            nft[0] = desired.outputERC721s[i];\r\n            uint256 value = universapSwap.estimateValue(Provided(new address[](0), new uint256[](0), nft), universapSwap.stableToken());\r\n            expectedUSDValues[desired.outputERC20s.length + i] = value;\r\n        }\r\n    }\r\n\r\n    function simulateSwaps(\r\n        SwapPoint[] memory swaps,\r\n        address[] memory tokens,\r\n        uint256[] memory amounts\r\n    ) public view returns (address[] memory tokensOut, uint256[] memory amountsOut) {\r\n        tokensOut = new address[](swaps.length);\r\n        amountsOut = new uint256[](swaps.length);\r\n\r\n        SwapPoint[] memory swapsConducted = new SwapPoint[](swaps.length);\r\n        uint[][][] memory amountsForSwaps = new uint[][][](swaps.length);\r\n\r\n        for (uint256 i = 0; i < swaps.length; i++) {\r\n            uint256 amount = (swaps[i].amountIn * amounts[tokens.findFirst(swaps[i].tokenIn)]) / 1e18;\r\n            amountsForSwaps[i] = new uint[][](swaps[i].swappers.length);\r\n            for (uint j = 0; j < swaps[i].swappers.length; j++) {\r\n                uint[] memory amountsForSwap = ISwapper(swaps[i].swappers[j]).getAmountsOutWithPath(\r\n                    amount,\r\n                    swaps[i].paths[j],\r\n                    amountsForSwaps,\r\n                    swapsConducted\r\n                );\r\n                amount = amountsForSwap[amountsForSwap.length - 1];\r\n                amountsForSwaps[i][j] = amountsForSwap;\r\n            }\r\n            tokensOut[i] = swaps[i].tokenOut;\r\n            amountsOut[i] = amount;\r\n            swapsConducted[i] = swaps[i];\r\n        }\r\n    }\r\n\r\n    ///-------------Internal logic-------------\r\n    function _recommendConnector(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint amount\r\n    ) internal view returns (address[4] memory connectors) {\r\n        uint[][] memory scoresIn;\r\n        uint[][] memory scoresOut;\r\n        address[] memory swappers = universapSwap.getSwappers();\r\n        for (uint i = 0; i < swappers.length; i++) {\r\n            ISwapper swapper = ISwapper(swappers[i]);\r\n            address[] memory commonPoolTokens = swapper.getCommonPoolTokens();\r\n            for (uint j = 0; j < commonPoolTokens.length; j++) {\r\n                address[] memory path = new address[](3);\r\n                path[0] = tokenIn;\r\n                path[1] = commonPoolTokens[j];\r\n                path[2] = tokenIn;\r\n                uint amountIn = swapper.getAmountOut(amount, path);\r\n                uint[] memory scoreIn = new uint[](3);\r\n                scoreIn[0] = i;\r\n                scoreIn[1] = j;\r\n                scoreIn[2] = amountIn;\r\n                scoresIn = scoresIn.append(scoreIn);\r\n                path[0] = tokenOut;\r\n                path[2] = tokenOut;\r\n                uint amountOut = swapper.getAmountOut(amount, path);\r\n                uint[] memory scoreOut = new uint[](3);\r\n                scoreOut[0] = i;\r\n                scoreOut[1] = j;\r\n                scoreOut[2] = amountOut;\r\n                scoresOut = scoresOut.append(scoreOut);\r\n            }\r\n        }\r\n        uint maxAmountIn;\r\n        uint maxAmountInIndex;\r\n        uint maxAmountOut;\r\n        uint maxAmountOutIndex;\r\n        for (uint i = 0; i < scoresIn.length; i++) {\r\n            if (scoresIn[i][2] > maxAmountIn) {\r\n                maxAmountIn = scoresIn[i][2];\r\n                maxAmountInIndex = i;\r\n            }\r\n        }\r\n        for (uint i = 0; i < scoresOut.length; i++) {\r\n            if (scoresOut[i][2] > maxAmountOut) {\r\n                maxAmountOut = scoresOut[i][2];\r\n                maxAmountOutIndex = i;\r\n            }\r\n        }\r\n        connectors[0] = swappers[scoresIn[maxAmountInIndex][0]];\r\n        connectors[1] = ISwapper(swappers[scoresIn[maxAmountInIndex][0]]).getCommonPoolTokens()[\r\n            scoresIn[maxAmountInIndex][1]\r\n        ];\r\n        connectors[2] = swappers[scoresOut[maxAmountOutIndex][0]];\r\n        connectors[3] = ISwapper(swappers[scoresOut[maxAmountOutIndex][0]]).getCommonPoolTokens()[\r\n            scoresOut[maxAmountOutIndex][1]\r\n        ];\r\n    }\r\n\r\n    function _calculateRouteAmount(\r\n        address[] memory swappersUsed,\r\n        address[][] memory paths,\r\n        uint amount\r\n    ) internal view returns (uint) {\r\n        for (uint i = 0; i < swappersUsed.length; i++) {\r\n            amount = ISwapper(swappersUsed[i]).getAmountOut(amount, paths[i]);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function _routeHelper(\r\n        address[] memory swappersUsed,\r\n        address[][] memory paths,\r\n        uint amountIn,\r\n        FindSwapsBetween memory swapsBetween,\r\n        uint tokenWorth,\r\n        uint valueIn\r\n    ) internal view returns (SwapPoint memory, uint) {\r\n        uint score = _calculateRouteAmount(swappersUsed, paths, amountIn);\r\n        uint256 valueOut = (tokenWorth * score) / uint256(10) ** ERC20(swapsBetween.tokenOut).decimals();\r\n        int256 slippage = (1e12 * (int256(valueIn) - int256(valueOut))) / int256(valueIn);\r\n        return (\r\n            SwapPoint(\r\n                amountIn,\r\n                valueIn,\r\n                score,\r\n                valueOut,\r\n                slippage,\r\n                swapsBetween.tokenIn,\r\n                swappersUsed,\r\n                swapsBetween.tokenOut,\r\n                paths\r\n            ),\r\n            score\r\n        );\r\n    }\r\n\r\n    function _findBestRoute(FindSwapsBetween memory swapsBetween) internal view returns (SwapPoint memory swapPoint) {\r\n        uint256 amountIn = swapsBetween.valueNeeded > swapsBetween.valueInAvailable\r\n            ? swapsBetween.amountInAvailable\r\n            : (swapsBetween.valueNeeded * swapsBetween.amountInAvailable) / swapsBetween.valueInAvailable;\r\n        uint256 valueIn = (amountIn * swapsBetween.valueInAvailable) / swapsBetween.amountInAvailable;\r\n        address[] memory swappers = universapSwap.getSwappers();\r\n        uint256 tokenWorth = IOracle(universapSwap.oracle()).getPrice(swapsBetween.tokenOut, universapSwap.networkToken());\r\n        address[4] memory connectors = _recommendConnector(swapsBetween.tokenIn, swapsBetween.tokenOut, amountIn);\r\n        SwapPoint[] memory swaps = new SwapPoint[](swappers.length + 3);\r\n        uint[] memory scores = new uint[](swappers.length + 3);\r\n        for (uint i = 0; i < swappers.length; i++) {\r\n            address[][] memory paths = new address[][](1);\r\n            paths[0] = new address[](2);\r\n            paths[0][0] = swapsBetween.tokenIn;\r\n            paths[0][1] = swapsBetween.tokenOut;\r\n            address[] memory swappersUsed = new address[](1);\r\n            swappersUsed[0] = swappers[i];\r\n            (swaps[i], scores[i]) = _routeHelper(swappersUsed, paths, amountIn, swapsBetween, tokenWorth, valueIn);\r\n        }\r\n        {\r\n            address[][] memory paths = new address[][](1);\r\n            paths[0] = new address[](3);\r\n            paths[0][0] = swapsBetween.tokenIn;\r\n            paths[0][1] = connectors[1];\r\n            paths[0][2] = swapsBetween.tokenOut;\r\n            address[] memory swappersUsed = new address[](1);\r\n            swappersUsed[0] = connectors[0];\r\n            (swaps[swappers.length], scores[swappers.length]) = _routeHelper(\r\n                swappersUsed,\r\n                paths,\r\n                amountIn,\r\n                swapsBetween,\r\n                tokenWorth,\r\n                valueIn\r\n            );\r\n        }\r\n        {\r\n            address[][] memory paths = new address[][](1);\r\n            paths[0] = new address[](3);\r\n            paths[0][0] = swapsBetween.tokenIn;\r\n            paths[0][1] = connectors[3];\r\n            paths[0][2] = swapsBetween.tokenOut;\r\n            address[] memory swappersUsed = new address[](1);\r\n            swappersUsed[0] = connectors[2];\r\n            (swaps[swappers.length + 1], scores[swappers.length + 1]) = _routeHelper(\r\n                swappersUsed,\r\n                paths,\r\n                amountIn,\r\n                swapsBetween,\r\n                tokenWorth,\r\n                valueIn\r\n            );\r\n        }\r\n        {\r\n            address[][] memory paths;\r\n            address[] memory swappersUsed;\r\n            if (connectors[0] != connectors[2]) {\r\n                paths = new address[][](2);\r\n                swappersUsed = new address[](2);\r\n                paths[0] = new address[](2);\r\n                paths[0][0] = swapsBetween.tokenIn;\r\n                paths[0][1] = connectors[1];\r\n                paths[1] = new address[](3);\r\n                paths[1][0] = connectors[1];\r\n                paths[1][1] = connectors[3];\r\n                paths[1][2] = swapsBetween.tokenOut;\r\n                swappersUsed[0] = connectors[0];\r\n                swappersUsed[1] = connectors[2];\r\n            } else {\r\n                paths = new address[][](1);\r\n                swappersUsed = new address[](1);\r\n                swappersUsed[0] = connectors[0];\r\n                paths[0] = new address[](4);\r\n                paths[0][0] = swapsBetween.tokenIn;\r\n                paths[0][1] = connectors[1];\r\n                paths[0][2] = connectors[3];\r\n                paths[0][3] = swapsBetween.tokenOut;\r\n            }\r\n            (swaps[swappers.length + 2], scores[swappers.length + 2]) = _routeHelper(\r\n                swappersUsed,\r\n                paths,\r\n                amountIn,\r\n                swapsBetween,\r\n                tokenWorth,\r\n                valueIn\r\n            );\r\n        }\r\n        uint maxScore;\r\n        uint bestScoreIndex;\r\n        for (uint i = 0; i < scores.length; i++) {\r\n            if (scores[i] > maxScore) {\r\n                maxScore = scores[i];\r\n                bestScoreIndex = i;\r\n            }\r\n        }\r\n        return swaps[bestScoreIndex];\r\n    }\r\n}"
    },
    "contracts/UniversalSwap/UniversalSwap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\r\nimport \"../utils/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"../libraries/Conversions.sol\";\r\nimport \"../libraries/SaferERC20.sol\";\r\nimport \"./CoreLogic.sol\";\r\nimport \"./SwapHelper.sol\";\r\nimport \"./ProvidedHelper.sol\";\r\nimport \"./ConversionHelper.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract UniversalSwap is IUniversalSwap, OwnableUpgradeable {\r\n    using Address for address;\r\n    using UintArray for uint256[];\r\n    using AddressArray for address[];\r\n    using SaferERC20 for IERC20;\r\n    using Conversions for Conversion[];\r\n    using SwapFinder for SwapPoint;\r\n\r\n    event Trade(address receiver, uint inputUsdValue, address[] tokens, address[] managers, uint256[] amountsAndIds);\r\n\r\n    address public networkToken;\r\n    address public stableToken;\r\n    address[] public swappers;\r\n    address[] public poolInteractors;\r\n    address[] public nftPoolInteractors;\r\n    address public oracle;\r\n    ProvidedHelper public providedHelper;\r\n    ConversionHelper public conversionHelper; \r\n    SwapHelper public swapHelper;\r\n    address public coreLogic;\r\n    uint public devFee;\r\n    address public treasury;\r\n\r\n    function initialize(\r\n        address[] memory _poolInteractors,\r\n        address[] memory _nftPoolInteractors,\r\n        address _networkToken,\r\n        address _stableToken,\r\n        address[] memory _swappers,\r\n        address _oracle\r\n    ) public initializer {\r\n        poolInteractors = _poolInteractors;\r\n        nftPoolInteractors = _nftPoolInteractors;\r\n        swappers = _swappers;\r\n        networkToken = _networkToken;\r\n        stableToken = _stableToken;\r\n        oracle = _oracle;\r\n        devFee = 100;\r\n        treasury = msg.sender;\r\n        __Ownable_init();\r\n    }\r\n\r\n    ///-------------Public view functions-------------\r\n\r\n    function getSwappers() external view returns (address[] memory) {\r\n        return swappers;\r\n    }\r\n\r\n    function getPoolInteractors() external view returns (address[] memory) {\r\n        return poolInteractors;\r\n    }\r\n\r\n    function getNFTPoolInteractors() external view returns (address[] memory) {\r\n        return nftPoolInteractors;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function isSimpleToken(address token) public view returns (bool) {\r\n        if (token == networkToken || token == address(0)) return true;\r\n        if (getProtocol(token)!=address(0)) return false;\r\n        for (uint256 i = 0; i < swappers.length; i++) {\r\n            if (ISwapper(swappers[i]).checkSwappable(token)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function getProtocol(address token) public view returns (address) {\r\n        if (token == networkToken || token == address(0)) return address(0);\r\n        for (uint256 x = 0; x < poolInteractors.length; x++) {\r\n            if (IPoolInteractor(poolInteractors[x]).testSupported(token)) return poolInteractors[x];\r\n        }\r\n        for (uint256 i = 0; i < nftPoolInteractors.length; i++) {\r\n            if (INFTPoolInteractor(nftPoolInteractors[i]).testSupported(token)) return nftPoolInteractors[i];\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function getTokenValues(\r\n        address[] memory tokens,\r\n        uint256[] memory tokenAmounts\r\n    ) public view returns (uint256[] memory values, uint256 total) {\r\n        values = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            values[i] = (IOracle(oracle).getPrice(tokens[i], networkToken) * tokenAmounts[i]) / uint256(10) ** ERC20(tokens[i]).decimals();\r\n            total += values[i];\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function estimateValue(Provided memory assets, address inTermsOf) public view returns (uint256) {\r\n        (address[] memory tokens, uint256[] memory amounts) = providedHelper.simplifyWithoutWrite(assets);\r\n        (, uint256 value) = getTokenValues(tokens, amounts);\r\n        value = (IOracle(oracle).getPrice(networkToken, inTermsOf) * value) / uint256(10) ** ERC20(networkToken).decimals();\r\n        return value;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function isSupported(address token) public view returns (bool) {\r\n        if (isSimpleToken(token)) return true;\r\n        if (getProtocol(token) != address(0)) return true;\r\n        return false;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function estimateValueERC20(address token, uint256 amount, address inTermsOf) public view returns (uint256) {\r\n        address[] memory tokens = new address[](1);\r\n        uint256[] memory amounts = new uint256[](1);\r\n        tokens[0] = token;\r\n        amounts[0] = amount;\r\n        Provided memory asset = Provided(tokens, amounts, new Asset[](0));\r\n        return estimateValue(asset, inTermsOf);\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function estimateValueERC721(Asset memory nft, address inTermsOf) public view returns (uint256) {\r\n        Asset[] memory assets = new Asset[](1);\r\n        assets[0] = nft;\r\n        return estimateValue(Provided(new address[](0), new uint256[](0), assets), inTermsOf);\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function getUnderlying(Provided memory provided) external view returns (address[] memory, uint256[] memory) {\r\n        return providedHelper.simplifyWithoutWrite(provided);\r\n    }\r\n\r\n    ///-------------Pre-swap calculations-------------\r\n    /// @inheritdoc IUniversalSwap\r\n    function getAmountsOut(\r\n        Provided memory provided,\r\n        Desired memory desired\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256[] memory amounts,\r\n            SwapPoint[] memory swaps,\r\n            Conversion[] memory conversions,\r\n            uint256[] memory expectedUSDValues\r\n        )\r\n    {\r\n        for (uint256 i = 0; i < provided.tokens.length; i++) {\r\n            if (provided.tokens[i] == address(0)) {\r\n                provided.tokens[i] = networkToken;\r\n            }\r\n        }\r\n        (provided.tokens, provided.amounts) = providedHelper.simplifyWithoutWrite(provided);\r\n        provided.nfts = new Asset[](0);\r\n        for (uint i = 0; i<provided.tokens.length; i++) {\r\n            provided.amounts[i]-=provided.amounts[i]*devFee/100000;\r\n        }\r\n        (swaps, conversions) = preSwapCalculateSwaps(provided, desired);\r\n        (amounts, expectedUSDValues) = swapHelper.getAmountsOut(provided, desired, swaps, conversions);\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function getAmountsOutWithSwaps(\r\n        Provided memory provided,\r\n        Desired memory desired,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions\r\n    ) external view returns (uint[] memory amounts, uint[] memory expectedUSDValues) {\r\n        for (uint256 i = 0; i < provided.tokens.length; i++) {\r\n            if (provided.tokens[i] == address(0)) {\r\n                provided.tokens[i] = networkToken;\r\n            }\r\n        }\r\n        (provided.tokens, provided.amounts) = providedHelper.simplifyWithoutWrite(provided);\r\n        provided.nfts = new Asset[](0);\r\n        for (uint i = 0; i<provided.tokens.length; i++) {\r\n            provided.amounts[i]-=provided.amounts[i]*devFee/100000;\r\n        }\r\n        (amounts, expectedUSDValues) = swapHelper.getAmountsOut(provided, desired, swaps, conversions);\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function preSwapCalculateUnderlying(\r\n        Provided memory provided,\r\n        Desired memory desired\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            Conversion[] memory,\r\n            address[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        uint256 totalValue;\r\n        uint256[] memory inputTokenValues;\r\n        (inputTokenValues, totalValue) = getTokenValues(provided.tokens, provided.amounts);\r\n        Conversion[] memory conversions = conversionHelper.prepareConversions(\r\n            desired.outputERC20s,\r\n            desired.outputERC721s,\r\n            desired.ratios,\r\n            totalValue\r\n        );\r\n        (address[] memory conversionUnderlying, uint256[] memory conversionUnderlyingValues) = conversions\r\n            .getUnderlying();\r\n        (conversionUnderlying, conversionUnderlyingValues) = conversionUnderlying.shrink(conversionUnderlyingValues);\r\n        conversions = conversions.normalizeRatios();\r\n        return (\r\n            provided.tokens,\r\n            provided.amounts,\r\n            inputTokenValues,\r\n            conversions,\r\n            conversionUnderlying,\r\n            conversionUnderlyingValues\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function preSwapCalculateSwaps(\r\n        Provided memory provided,\r\n        Desired memory desired\r\n    ) public view returns (SwapPoint[] memory swaps, Conversion[] memory conversions) {\r\n        uint256[] memory inputTokenValues;\r\n        address[] memory conversionUnderlying;\r\n        uint256[] memory conversionUnderlyingValues;\r\n        (\r\n            provided.tokens,\r\n            provided.amounts,\r\n            inputTokenValues,\r\n            conversions,\r\n            conversionUnderlying,\r\n            conversionUnderlyingValues\r\n        ) = preSwapCalculateUnderlying(provided, desired);\r\n        swaps = swapHelper.findMultipleSwaps(\r\n            provided.tokens,\r\n            provided.amounts,\r\n            inputTokenValues,\r\n            conversionUnderlying,\r\n            conversionUnderlyingValues\r\n        );\r\n        return (swaps, conversions);\r\n    }\r\n\r\n    ///-------------Core logic-------------\r\n    /// @inheritdoc IUniversalSwap\r\n    function swapAfterTransfer(\r\n        Provided memory provided,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions,\r\n        Desired memory desired,\r\n        address receiver\r\n    ) external payable returns (uint256[] memory) {\r\n        uint usdValue = estimateValue(provided, stableToken);\r\n        uint addressZeroIndex = provided.tokens.findFirst(address(0));\r\n        if (addressZeroIndex != provided.tokens.length) {\r\n            provided.tokens = provided.tokens.remove(addressZeroIndex);\r\n            provided.amounts = provided.amounts.remove(addressZeroIndex);\r\n        }\r\n        bytes memory data = coreLogic.functionDelegateCall(abi.encodeWithSelector(\r\n            CoreLogic(coreLogic).breakAssets.selector, provided.tokens, provided.amounts, provided.nfts\r\n        ));\r\n        (provided.tokens, provided.amounts) = abi.decode(data, (address[], uint[]));\r\n        provided.nfts = new Asset[](0);\r\n        data = coreLogic.functionDelegateCall(abi.encodeWithSelector(\r\n            CoreLogic(coreLogic).swap.selector, provided, swaps, conversions, desired, receiver\r\n        ));\r\n        uint[] memory amountsAndIds = abi.decode(data, (uint[]));\r\n        address[] memory managers = new address[](desired.outputERC721s.length);\r\n        for (uint256 i = 0; i < managers.length; i++) {\r\n            managers[i] = desired.outputERC721s[i].manager;\r\n        }\r\n        emit Trade(msg.sender, usdValue, desired.outputERC20s, managers, amountsAndIds);\r\n        return amountsAndIds;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function swap(\r\n        Provided memory provided,\r\n        SwapPoint[] memory swaps,\r\n        Conversion[] memory conversions,\r\n        Desired memory desired,\r\n        address receiver\r\n    ) external payable returns (uint256[] memory) {\r\n        uint usdValue = estimateValue(provided, stableToken);\r\n        uint addressZeroIndex = provided.tokens.findFirst(address(0));\r\n        if (addressZeroIndex != provided.tokens.length) {\r\n            provided.tokens = provided.tokens.remove(addressZeroIndex);\r\n            provided.amounts = provided.amounts.remove(addressZeroIndex);\r\n        }\r\n        bytes memory data = coreLogic.functionDelegateCall(abi.encodeWithSelector(\r\n            CoreLogic(coreLogic).collectAndBreak.selector, provided.tokens, provided.amounts, provided.nfts\r\n        ));\r\n        (provided.tokens, provided.amounts) = abi.decode(data, (address[], uint[]));\r\n        provided.nfts = new Asset[](0);\r\n        data = coreLogic.functionDelegateCall(abi.encodeWithSelector(\r\n            CoreLogic(coreLogic).swap.selector, provided, swaps, conversions, desired, receiver\r\n        ));\r\n        uint[] memory amountsAndIds = abi.decode(data, (uint[]));\r\n        address[] memory managers = new address[](desired.outputERC721s.length);\r\n        for (uint256 i = 0; i < managers.length; i++) {\r\n            managers[i] = desired.outputERC721s[i].manager;\r\n        }\r\n        emit Trade(msg.sender, usdValue, desired.outputERC20s, managers, amountsAndIds);\r\n        return amountsAndIds;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    ///-------------Permissioned functions-------------\r\n    /// @inheritdoc IUniversalSwap\r\n    function setSwappers(address[] calldata _swappers) external onlyOwner {\r\n        swappers = _swappers;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function setOracle(address _oracle) external onlyOwner {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function setPoolInteractors(address[] calldata _poolInteractors) external onlyOwner {\r\n        poolInteractors = _poolInteractors;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function setHelpers(\r\n        address _coreLogic,\r\n        address _providedHelper,\r\n        address _conversionHelper,\r\n        address _swapHelper\r\n    ) external onlyOwner {\r\n        coreLogic = _coreLogic;\r\n        providedHelper = ProvidedHelper(_providedHelper);\r\n        conversionHelper = ConversionHelper(_conversionHelper);\r\n        swapHelper = SwapHelper(_swapHelper);\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function setNFTPoolInteractors(address[] calldata _nftPoolInteractors) external onlyOwner {\r\n        nftPoolInteractors = _nftPoolInteractors;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function setDevFee(uint _fee) external onlyOwner {\r\n        devFee = _fee;\r\n    }\r\n\r\n    /// @inheritdoc IUniversalSwap\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function currentOwner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(currentOwner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}